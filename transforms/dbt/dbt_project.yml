#
# Providence
# Transforms
# DBT Analytics: "Date" Dimension
#

# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: 'providence'
version: '1.0.0'
config-version: 2

vars:
  # schema to source external data
  external_schema: "lake"
  # schema to source native data & write dbt model objects
  schema: "public"

# This setting configures which "profile" dbt uses for this project.
profile: 'providence'

# These configurations specify where dbt should look for different types of files.
# The `model-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

target-path: "target"  # directory which will store compiled SQL files
clean-targets:         # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages"

# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models
models:
  providence:
    # use redshift late binding views allow us replace the tables backing them
    # https://www.getdbt.com/blog/using-redshift-s-late-binding-views-with-dbt/
    bind: false
    staging:
      # staging models backed by native redshift tables.
      native:
        +materialized: view
      # staging models backed by data lake queried via redshift spectrum.
      # redshift spectrum only supports a limited no. of SQL features.
      # writes the spectrum staging models as tables to have full SQL functions
      # in downstream transformations.
      spectrum:
        +materialized: table
    intermediate:
      # adhoc transforms
      transforms:
        +materialized: ephemeral
      # dimensional model
      dim_model:
        +materialized: table
    marts:
      # purpose-built materializations
      +materialized: table
