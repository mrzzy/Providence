{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v8.json", "dbt_version": "1.4.5", "generated_at": "2023-05-14T13:14:34.195895Z", "invocation_id": "48e2432d-c5ff-4058-aa7a-bda50f115aa5", "env": {}, "project_id": "fc52c21756c177325b755781195254d9", "user_id": "cf81d32d-1cb9-4952-a0d7-93207fc3e664", "send_anonymous_usage_stats": true, "adapter_type": "redshift"}, "nodes": {"model.providence.int_unique_transaction": {"database": "mrzzy", "schema": "public", "name": "int_unique_transaction", "resource_type": "model", "package_name": "providence", "path": "intermediate/transforms/int_unique_transaction.sql", "original_file_path": "models/intermediate/transforms/int_unique_transaction.sql", "unique_id": "model.providence.int_unique_transaction", "fqn": ["providence", "intermediate", "transforms", "int_unique_transaction"], "alias": "int_unique_transaction", "checksum": {"name": "sha256", "checksum": "32ac79a5a18ac7144e514b7701af1672c5df4f2186ca2c831a5200c568726640"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A unique, non-deleted Accounting Transaction.", "columns": {"id": {"name": "id", "description": "Unique Transaction ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary Amount transferred from the associated account to the payee in the Transaction. Negative values signify a withdrawal from the account while positive values signfiy a deposit from the payee.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "User assigned description to the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clearing_status": {"name": "clearing_status", "description": "Reconciliation status of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_approved": {"name": "is_approved", "description": "Whether the Transaction was approved.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Whether the Transaction was deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "budget_id": {"name": "budget_id", "description": "ID of the YNAB Budget the Transaction was made within.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category_id": {"name": "category_id", "description": "YNAB assigned ID of the Category this Transaction belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "ID of the YNAB Account this Transaction was made on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payee_id": {"name": "payee_id", "description": "ID of the YNAB Payee involved in this Transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transfer_account_id": {"name": "transfer_account_id", "description": "Optional. Only set when this Transaction is a transfer between Accounts. ID of the target YNAB Account this Transaction transfers to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "Date when this Transaction was made.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "scraped_on": {"name": "scraped_on", "description": "Timestamp when the data was last scraped from YNAB.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "providence://models/intermediate/transforms/models.yml", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "ephemeral"}, "created_at": 1684070075.680737, "relation_name": null, "raw_code": "--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Accounting Transactions\n--\nselect *\nfrom\n    (\n        {{\n            deduplicate(\n                relation=ref(\"stg_ynab_transaction\"),\n                partition_by=\"id\",\n                order_by=\"scraped_on desc\",\n            )\n        }}\n    )\nwhere is_deleted = false", "language": "sql", "refs": [["stg_ynab_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.providence.deduplicate"], "nodes": ["model.providence.stg_ynab_transaction"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/int_unique_transaction.sql", "compiled": true, "compiled_code": "--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Accounting Transactions\n--\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by scraped_on desc\n            ) as n_row\n        from \"mrzzy\".\"public\".\"stg_ynab_transaction\"\n    )\nwhere n_row = 1\n    )\nwhere is_deleted = false", "extra_ctes_injected": true, "extra_ctes": []}, "model.providence.int_unique_budget_category": {"database": "mrzzy", "schema": "public", "name": "int_unique_budget_category", "resource_type": "model", "package_name": "providence", "path": "intermediate/transforms/int_unique_budget_category.sql", "original_file_path": "models/intermediate/transforms/int_unique_budget_category.sql", "unique_id": "model.providence.int_unique_budget_category", "fqn": ["providence", "intermediate", "transforms", "int_unique_budget_category"], "alias": "int_unique_budget_category", "checksum": {"name": "sha256", "checksum": "3dfc7616e26840bcf62811a5625a27c86c31ac64580b68ad9a29ac9879c5bf95"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Budget Category where funds are allocated in budget.", "columns": {"id": {"name": "id", "description": "Unique Surrogate key for Category dimension.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "budget_id": {"name": "budget_id", "description": "ID of the Budget that contains this Budget Category.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category_id": {"name": "category_id", "description": "ID identfying the Budget Category across dimension updates.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "User assigned Category name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category_group_id": {"name": "category_group_id", "description": "ID of the Category Group this Category is grouped within.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Whether the Category was deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "budget_amount": {"name": "budget_amount", "description": "Amount of money budgeted into this budget category.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "budget_month": {"name": "budget_month", "description": "The month this budget allocation was effective.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "goal_type": {"name": "goal_type", "description": "Type of goal setting selected for this budget category.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "goal_amount": {"name": "goal_amount", "description": "Target amount the user aims to set aside for this budget category.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "goal_due": {"name": "goal_due", "description": "Due date by when user aims to set aside the money for the goal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp when the data was last updated / refreshed.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "providence://models/intermediate/transforms/models.yml", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "ephemeral"}, "created_at": 1684070075.6665208, "relation_name": null, "raw_code": "--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Budget Categories\n--\nwith\n    duplicated_categories as (\n        select\n            {{ dbt_utils.generate_surrogate_key([\"id\", \"budget_month\"]) }} as \"id\",\n            id as category_id,\n            scraped_on as updated_at,\n            {{\n                dbt_utils.star(\n                    ref(\"stg_ynab_budget_category\"),\n                    except=[\"id\", \"scraped_on\"],\n                )\n            }}\n        from {{ ref(\"stg_ynab_budget_category\") }}\n    )\nselect *\nfrom\n    (\n        {{\n            deduplicate(\n                relation=\"duplicated_categories\",\n                partition_by=\"id\",\n                order_by=\"updated_at desc\",\n            )\n        }}\n    )", "language": "sql", "refs": [["stg_ynab_budget_category"], ["stg_ynab_budget_category"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.dbt_utils.star", "macro.providence.deduplicate"], "nodes": ["model.providence.stg_ynab_budget_category", "model.providence.stg_ynab_budget_category"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/int_unique_budget_category.sql", "compiled": true, "compiled_code": "--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Budget Categories\n--\nwith\n    duplicated_categories as (\n        select\n            \n    \nmd5(cast(coalesce(cast(id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(budget_month as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\",\n            id as category_id,\n            scraped_on as updated_at,\n            \"name\",\n  \"budget_id\",\n  \"category_group_id\",\n  \"goal_due\",\n  \"is_deleted\",\n  \"budget_month\",\n  \"budget_amount\",\n  \"goal_type\",\n  \"goal_amount\"\n        from \"mrzzy\".\"public\".\"stg_ynab_budget_category\"\n    )\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by updated_at desc\n            ) as n_row\n        from duplicated_categories\n    )\nwhere n_row = 1\n    )", "extra_ctes_injected": true, "extra_ctes": []}, "model.providence.int_unique_enriched_bank_statement": {"database": "mrzzy", "schema": "public", "name": "int_unique_enriched_bank_statement", "resource_type": "model", "package_name": "providence", "path": "intermediate/transforms/int_unique_enriched_bank_statement.sql", "original_file_path": "models/intermediate/transforms/int_unique_enriched_bank_statement.sql", "unique_id": "model.providence.int_unique_enriched_bank_statement", "fqn": ["providence", "intermediate", "transforms", "int_unique_enriched_bank_statement"], "alias": "int_unique_enriched_bank_statement", "checksum": {"name": "sha256", "checksum": "ccdbfc5574a3b7ed7e107ad34a59ed0d8dea40d3a6f97579671ae71d29e82829"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Unique Bank Statement enriched with Account dimension ID.", "columns": {"id": {"name": "id", "description": "Unique Surrogate key for transaction in Bank Statement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transacted_on": {"name": "transacted_on", "description": "Date on which the Bank Transaction was made.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Date on which the Bank Transaction was made.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_no": {"name": "account_no", "description": "Bank account number.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "ID of Account dimension representing the Bank Account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Product name of the Bank Account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deposit": {"name": "deposit", "description": "Monetary amount credited to the Bank Account in the Transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "withdrawal": {"name": "withdrawal", "description": "Monetary amount deducted from the Bank Account in the Transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance": {"name": "balance", "description": "Current Balance of the Bank account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_code": {"name": "currency_code", "description": "3 character ISO code of the currency used by Bank Account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "statement_begin": {"name": "statement_begin", "description": "Timestamp denoting the start the date range of the bank statement form the Bank Account information was derived.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "statement_end": {"name": "statement_end", "description": "Timestamp denoting the end (inclusive) the date range of the bank statement from which the Bank Account information was derived.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "processed_on": {"name": "processed_on", "description": "Timestamp when the data was last extracted from Bank statement export.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "providence://models/intermediate/transforms/models.yml", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "ephemeral"}, "created_at": 1684070075.673672, "relation_name": null, "raw_code": "--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Enriched Bank Statement\n--\nwith\n    keyed_statement as (\n        select\n            {{\n                dbt_utils.generate_surrogate_key(\n                    [\"account_no\", \"transacted_on\", \"description\"]\n                )\n            }} as \"id\", *\n        from {{ ref(\"stg_uob_statement\") }}\n    ),\n\n    unique_statement as (\n        (\n            {{\n                deduplicate(\n                    relation=\"keyed_statement\",\n                    partition_by=\"id\",\n                    order_by=\"processed_on desc\",\n                )\n            }}\n        )\n    )\n\n-- enrich statement with account dimension\nselect t.*, a.id as account_id\nfrom unique_statement as t\nleft join {{ ref(\"dim_account\") }} as a on a.vendor_id = t.account_no", "language": "sql", "refs": [["stg_uob_statement"], ["dim_account"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.providence.deduplicate"], "nodes": ["model.providence.stg_uob_statement", "model.providence.dim_account"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/int_unique_enriched_bank_statement.sql", "compiled": true, "compiled_code": "--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Enriched Bank Statement\n--\nwith\n    keyed_statement as (\n        select\n            \n    \nmd5(cast(coalesce(cast(account_no as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transacted_on as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(description as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\", *\n        from \"mrzzy\".\"public\".\"stg_uob_statement\"\n    ),\n\n    unique_statement as (\n        (\n            select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by processed_on desc\n            ) as n_row\n        from keyed_statement\n    )\nwhere n_row = 1\n        )\n    )\n\n-- enrich statement with account dimension\nselect t.*, a.id as account_id\nfrom unique_statement as t\nleft join \"mrzzy\".\"public\".\"dim_account\" as a on a.vendor_id = t.account_no", "extra_ctes_injected": true, "extra_ctes": []}, "model.providence.dim_budget_category": {"database": "mrzzy", "schema": "public", "name": "dim_budget_category", "resource_type": "model", "package_name": "providence", "path": "intermediate/dim_model/dim_budget_category.sql", "original_file_path": "models/intermediate/dim_model/dim_budget_category.sql", "unique_id": "model.providence.dim_budget_category", "fqn": ["providence", "intermediate", "dim_model", "dim_budget_category"], "alias": "dim_budget_category", "checksum": {"name": "sha256", "checksum": "04de2e93a878439e417a9de6b4f404714144d99757808d5997860eece5a2ce8b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Budget Category where funds are allocated in budget.", "columns": {"id": {"name": "id", "description": "Unique Surrogate key for Category dimension.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category_id": {"name": "category_id", "description": "ID identfying the Budget Category across dimension updates.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "User assigned Category name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "budget_id": {"name": "budget_id", "description": "ID of the Budget that contains this Budget Category.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category_group_id": {"name": "category_group_id", "description": "ID of the Category Group this Category is grouped within.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category_group": {"name": "category_group", "description": "User assigned name of the Category Group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "goal_type": {"name": "goal_type", "description": "Type of goal setting selected for this budget category.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "goal_amount": {"name": "goal_amount", "description": "Target amount the user aims to set aside for this budget category.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "goal_due": {"name": "goal_due", "description": "Due date by when user aims to set aside the money for the goal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Whether the Category was deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_expense": {"name": "is_expense", "description": "Whether the Category is part of an Expense Category Group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp when the data was last updated / refreshed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "effective_at": {"name": "effective_at", "description": "Timestamp when this dimension row became effective.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "expired_at": {"name": "expired_at", "description": "Timestamp when this dimension row expired (exclusive).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_current": {"name": "is_current", "description": "Whether this dimension row is currently effective.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "providence://models/intermediate/dim_model/models.yml", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1684070075.8960507, "relation_name": "\"mrzzy\".\"public\".\"dim_budget_category\"", "raw_code": "--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Budget Category dimension\n--\n-- use type 2 SCD to track changes to budget category's goals over time\nwith\n    category_scd as (\n        select\n            *,\n            cast(budget_month as timestamp) as effective_at,\n            -- dimension row expire when the next dimension row becomes effective\n            coalesce(\n                cast(\n                    lead(budget_month) over (\n                        partition by category_id order by budget_month asc\n                    ) as timestamp\n                ),\n                {{ timestamp_max() }}\n            ) as expired_at\n        from {{ ref(\"int_unique_budget_category\") }}\n    ),\n\n    unique_groups as (\n        {{\n            deduplicate(\n                relation=ref(\"stg_ynab_budget_category_group\"),\n                partition_by=\"id\",\n                order_by=\"scraped_on desc\",\n            )\n        }}\n    )\n\nselect\n    c.\"id\",\n    c.category_id,\n    c.name,\n    c.budget_id,\n    -- use unique_group's id instead to resolve dangling category_group_id as null\n    g.\"id\" as category_group_id,\n    g.name as category_group,\n    c.goal_type,\n    c.goal_amount,\n    c.goal_due,\n    c.is_deleted,\n    c.updated_at,\n    c.effective_at,\n    c.expired_at,\n    coalesce(g.name like 'Expenses%', false) as is_expense,\n    c.expired_at is null as is_current\nfrom category_scd as c\nleft join unique_groups as g on g.id = c.category_group_id", "language": "sql", "refs": [["int_unique_budget_category"], ["stg_ynab_budget_category_group"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.providence.timestamp_max", "macro.providence.deduplicate"], "nodes": ["model.providence.int_unique_budget_category", "model.providence.stg_ynab_budget_category_group"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/dim_budget_category.sql", "compiled": true, "compiled_code": "--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Budget Category dimension\n--\n-- use type 2 SCD to track changes to budget category's goals over time\nwith\n     __dbt__cte__int_unique_budget_category as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Budget Categories\n--\nwith\n    duplicated_categories as (\n        select\n            \n    \nmd5(cast(coalesce(cast(id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(budget_month as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\",\n            id as category_id,\n            scraped_on as updated_at,\n            \"name\",\n  \"budget_id\",\n  \"category_group_id\",\n  \"goal_due\",\n  \"is_deleted\",\n  \"budget_month\",\n  \"budget_amount\",\n  \"goal_type\",\n  \"goal_amount\"\n        from \"mrzzy\".\"public\".\"stg_ynab_budget_category\"\n    )\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by updated_at desc\n            ) as n_row\n        from duplicated_categories\n    )\nwhere n_row = 1\n    )\n),category_scd as (\n        select\n            *,\n            cast(budget_month as timestamp) as effective_at,\n            -- dimension row expire when the next dimension row becomes effective\n            coalesce(\n                cast(\n                    lead(budget_month) over (\n                        partition by category_id order by budget_month asc\n                    ) as timestamp\n                ),\n                cast('9999-12-31 23:59:59' as timestamp)\n            ) as expired_at\n        from __dbt__cte__int_unique_budget_category\n    ),\n\n    unique_groups as (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by scraped_on desc\n            ) as n_row\n        from \"mrzzy\".\"public\".\"stg_ynab_budget_category_group\"\n    )\nwhere n_row = 1\n    )\n\nselect\n    c.\"id\",\n    c.category_id,\n    c.name,\n    c.budget_id,\n    -- use unique_group's id instead to resolve dangling category_group_id as null\n    g.\"id\" as category_group_id,\n    g.name as category_group,\n    c.goal_type,\n    c.goal_amount,\n    c.goal_due,\n    c.is_deleted,\n    c.updated_at,\n    c.effective_at,\n    c.expired_at,\n    coalesce(g.name like 'Expenses%', false) as is_expense,\n    c.expired_at is null as is_current\nfrom category_scd as c\nleft join unique_groups as g on g.id = c.category_group_id", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_budget_category", "sql": " __dbt__cte__int_unique_budget_category as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Budget Categories\n--\nwith\n    duplicated_categories as (\n        select\n            \n    \nmd5(cast(coalesce(cast(id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(budget_month as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\",\n            id as category_id,\n            scraped_on as updated_at,\n            \"name\",\n  \"budget_id\",\n  \"category_group_id\",\n  \"goal_due\",\n  \"is_deleted\",\n  \"budget_month\",\n  \"budget_amount\",\n  \"goal_type\",\n  \"goal_amount\"\n        from \"mrzzy\".\"public\".\"stg_ynab_budget_category\"\n    )\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by updated_at desc\n            ) as n_row\n        from duplicated_categories\n    )\nwhere n_row = 1\n    )\n)"}]}, "model.providence.dim_date": {"database": "mrzzy", "schema": "public", "name": "dim_date", "resource_type": "model", "package_name": "providence", "path": "intermediate/dim_model/dim_date.sql", "original_file_path": "models/intermediate/dim_model/dim_date.sql", "unique_id": "model.providence.dim_date", "fqn": ["providence", "intermediate", "dim_model", "dim_date"], "alias": "dim_date", "checksum": {"name": "sha256", "checksum": "bd23fdf8da7e61b4b4801876f341b7ed91476baeff3b743a50ecd8dd01a4535d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Provides descriptive attributes for dates.", "columns": {"id": {"name": "id", "description": "Surrogate key for the date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "day_of_month": {"name": "day_of_month", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "day_of_week": {"name": "day_of_week", "description": "Numeric day of the week (Sunday is 0).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "weekday_name": {"name": "weekday_name", "description": "Name of the weekday.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "weekday_short": {"name": "weekday_short", "description": "3 character abbreviation of the name of the weekday.", "meta": {}, "data_type": null, "quote": null, "tags": [], "test": ["not_null"]}, "year_month_week": {"name": "year_month_week", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [], "test": ["not_null"]}, "day_of_year": {"name": "day_of_year", "description": "Numeric day of the year", "meta": {}, "data_type": null, "quote": null, "tags": [], "test": ["not_null", {"dbt_utils.accepted_range": {"min_value": 1, "max_value": 366}}]}, "week_of_month,": {"name": "week_of_month,", "description": "Week no. of the month,", "meta": {}, "data_type": null, "quote": null, "tags": [], "test": ["not_null", {"dbt_utils.accepted_range": {"min_value": 0, "max_value": 1}}]}, "week_of_year": {"name": "week_of_year", "description": "Week no. of the year.", "meta": {}, "data_type": null, "quote": null, "tags": [], "test": ["not_null", {"dbt_utils.accepted_range": {"min_value": 1, "max_value": 52}}]}, "month_of_year": {"name": "month_of_year", "description": "Numeric month of the year.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "month_name": {"name": "month_name", "description": "Long name of the month.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "month_short": {"name": "month_short", "description": "3 character abbreviation of the name of the month.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quarter": {"name": "quarter", "description": "Quarter no. of the year.", "meta": {}, "data_type": null, "quote": null, "tags": [], "test": ["not_null", {"dbt_utils.accepted_range": {"min_value": 1, "max_value": 52}}]}, "year_month": {"name": "year_month", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [], "test": ["not_null"]}, "year": {"name": "year", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_weekend": {"name": "is_weekend", "description": "Whether the date is a weekend.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp when the data was last updated / refreshed.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "providence://models/intermediate/dim_model/models.yml", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1684070075.875452, "relation_name": "\"mrzzy\".\"public\".\"dim_date\"", "raw_code": "--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Date Dimension\n--\nselect\n    date_day as \"id\",\n    date_day as \"date\",\n    cast(to_char(date_day, 'W') as int) as week_of_month,\n    cast(to_char(date_day, 'WW') as int) as week_of_year,\n    cast(to_char(date_day, 'Q') as int) as \"quarter\",\n    date_trunc('week', date_day) as year_month_week,\n    extract(day from date_day) as day_of_month,\n    extract(dayofweek from date_day) as day_of_week,\n    extract(dayofyear from date_day) as day_of_year,\n    to_char(date_day, 'day') as weekday_name,\n    to_char(date_day, 'dy') as weekday_short,\n    extract(month from date_day) as month_of_year,\n    to_char(date_day, 'month') as month_name,\n    to_char(date_day, 'mon') as month_short,\n    extract(year from date_day) as \"year\",\n    date_trunc('month', date_day) as year_month,\n    -- 0: sunday, 6: saturday\n    coalesce(extract(dayofweek from date_day) in (0, 6), false) as is_weekend,\n    sysdate as updated_at\nfrom\n    (\n        -- generate next 20 years of date dimension rows\n        {{\n            dbt_utils.date_spine(\n                datepart=\"day\",\n                start_date=\"cast('2019-01-01' as date)\",\n                end_date=\"cast(dateadd(year, 20, sysdate) as date)\",\n            )\n        }}\n    )", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.date_spine"], "nodes": []}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/dim_date.sql", "compiled": true, "compiled_code": "--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Date Dimension\n--\nselect\n    date_day as \"id\",\n    date_day as \"date\",\n    cast(to_char(date_day, 'W') as int) as week_of_month,\n    cast(to_char(date_day, 'WW') as int) as week_of_year,\n    cast(to_char(date_day, 'Q') as int) as \"quarter\",\n    date_trunc('week', date_day) as year_month_week,\n    extract(day from date_day) as day_of_month,\n    extract(dayofweek from date_day) as day_of_week,\n    extract(dayofyear from date_day) as day_of_year,\n    to_char(date_day, 'day') as weekday_name,\n    to_char(date_day, 'dy') as weekday_short,\n    extract(month from date_day) as month_of_year,\n    to_char(date_day, 'month') as month_name,\n    to_char(date_day, 'mon') as month_short,\n    extract(year from date_day) as \"year\",\n    date_trunc('month', date_day) as year_month,\n    -- 0: sunday, 6: saturday\n    coalesce(extract(dayofweek from date_day) in (0, 6), false) as is_weekend,\n    sysdate as updated_at\nfrom\n    (\n        -- generate next 20 years of date dimension rows\n        \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n     + \n    \n    p12.generated_number * power(2, 12)\n     + \n    \n    p13.generated_number * power(2, 13)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n     cross join \n    \n    p as p12\n     cross join \n    \n    p as p13\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 8899\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        cast('2019-01-01' as date)\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast(dateadd(year, 20, sysdate) as date)\n\n)\n\nselect * from filtered\n\n\n    )", "extra_ctes_injected": true, "extra_ctes": []}, "model.providence.dim_bank_card": {"database": "mrzzy", "schema": "public", "name": "dim_bank_card", "resource_type": "model", "package_name": "providence", "path": "intermediate/dim_model/dim_bank_card.sql", "original_file_path": "models/intermediate/dim_model/dim_bank_card.sql", "unique_id": "model.providence.dim_bank_card", "fqn": ["providence", "intermediate", "dim_model", "dim_bank_card"], "alias": "dim_bank_card", "checksum": {"name": "sha256", "checksum": "583f914b09e5bfb0de754a40d7f0682a8e50691241f96d5c9f8b5eb3926ac1ac"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Bank card used to pay for public transport trips.", "columns": {"id": {"name": "id", "description": "Key for the bank card.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "User assigned name of the Bank Card.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp when the data was last updated / refreshed.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "providence://models/intermediate/dim_model/models.yml", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1684070075.8777583, "relation_name": "\"mrzzy\".\"public\".\"dim_bank_card\"", "raw_code": "--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Bank Card Dimension\n--\nselect id, name, scraped_on as updated_at\nfrom\n    (\n        {{\n            deduplicate(\n                relation=ref(\"stg_simplygo_card\"),\n                partition_by=\"id\",\n                order_by=\"scraped_on desc\",\n            )\n        }}\n    )", "language": "sql", "refs": [["stg_simplygo_card"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.providence.deduplicate"], "nodes": ["model.providence.stg_simplygo_card"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/dim_bank_card.sql", "compiled": true, "compiled_code": "--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Bank Card Dimension\n--\nselect id, name, scraped_on as updated_at\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by scraped_on desc\n            ) as n_row\n        from \"mrzzy\".\"public\".\"stg_simplygo_card\"\n    )\nwhere n_row = 1\n    )", "extra_ctes_injected": true, "extra_ctes": []}, "model.providence.fact_vendor_transaction": {"database": "mrzzy", "schema": "public", "name": "fact_vendor_transaction", "resource_type": "model", "package_name": "providence", "path": "intermediate/dim_model/fact_vendor_transaction.sql", "original_file_path": "models/intermediate/dim_model/fact_vendor_transaction.sql", "unique_id": "model.providence.fact_vendor_transaction", "fqn": ["providence", "intermediate", "dim_model", "fact_vendor_transaction"], "alias": "fact_vendor_transaction", "checksum": {"name": "sha256", "checksum": "87ef0eac3d8a452f8f7500c1473bda5952667c6fc1667bff4ff803fe74897456"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Transactions on an account vendor (eg. bank) hosted account .", "columns": {"id": {"name": "id", "description": "Unique surrogate key for the Vendor Transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Bank assigned description of the Vendor Transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_id": {"name": "date_id", "description": "ID of the Date when this Vendor Transaction was made.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "ID of the Account this Vendor Transaction was made on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Amount transacted. Negative values deduct from the balance of the Vendor Account while Positive values credit to its balance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp when the data was last updated / refreshed.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "providence://models/intermediate/dim_model/models.yml", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1684070075.920198, "relation_name": "\"mrzzy\".\"public\".\"fact_vendor_transaction\"", "raw_code": "--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Bank Transaction Fact table\n--\n-- insert initial balance transaction so that sum of transaction amount will\n-- tally with account balance\nwith\n    initial_balances as (\n        select account_id, statement_begin, balance, processed_on\n        from\n            (\n                {{\n                    deduplicate(\n                        relation=ref(\"int_unique_enriched_bank_statement\"),\n                        partition_by=\"account_id\",\n                        order_by=\"processed_on asc\",\n                        n_row_col=\"_n_row_account\",\n                    )\n                }}\n            )\n    ),\n\n    initial_transaction as (\n        select\n            {{ dbt_utils.generate_surrogate_key([\"account_id\"]) }} as \"id\",\n            statement_begin as date_id,\n            account_id,\n            'Initial Balance' as description,\n            processed_on as updated_at,\n            balance as amount\n        from initial_balances\n    )\n\n-- grain: 1 row = 1 bank transaction\nselect *\nfrom initial_transaction\nunion all\nselect\n    id,\n    transacted_on as date_id,\n    account_id,\n    description,\n    processed_on as updated_at,\n    deposit - withdrawal as amount\nfrom {{ ref(\"int_unique_enriched_bank_statement\") }}", "language": "sql", "refs": [["int_unique_enriched_bank_statement"], ["int_unique_enriched_bank_statement"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.providence.deduplicate", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.providence.int_unique_enriched_bank_statement", "model.providence.int_unique_enriched_bank_statement"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/fact_vendor_transaction.sql", "compiled": true, "compiled_code": "--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Bank Transaction Fact table\n--\n-- insert initial balance transaction so that sum of transaction amount will\n-- tally with account balance\nwith\n     __dbt__cte__int_unique_enriched_bank_statement as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Enriched Bank Statement\n--\nwith\n    keyed_statement as (\n        select\n            \n    \nmd5(cast(coalesce(cast(account_no as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transacted_on as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(description as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\", *\n        from \"mrzzy\".\"public\".\"stg_uob_statement\"\n    ),\n\n    unique_statement as (\n        (\n            select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by processed_on desc\n            ) as n_row\n        from keyed_statement\n    )\nwhere n_row = 1\n        )\n    )\n\n-- enrich statement with account dimension\nselect t.*, a.id as account_id\nfrom unique_statement as t\nleft join \"mrzzy\".\"public\".\"dim_account\" as a on a.vendor_id = t.account_no\n),initial_balances as (\n        select account_id, statement_begin, balance, processed_on\n        from\n            (\n                select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by account_id order by processed_on asc\n            ) as _n_row_account\n        from __dbt__cte__int_unique_enriched_bank_statement\n    )\nwhere _n_row_account = 1\n            )\n    ),\n\n    initial_transaction as (\n        select\n            \n    \nmd5(cast(coalesce(cast(account_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\",\n            statement_begin as date_id,\n            account_id,\n            'Initial Balance' as description,\n            processed_on as updated_at,\n            balance as amount\n        from initial_balances\n    )\n\n-- grain: 1 row = 1 bank transaction\nselect *\nfrom initial_transaction\nunion all\nselect\n    id,\n    transacted_on as date_id,\n    account_id,\n    description,\n    processed_on as updated_at,\n    deposit - withdrawal as amount\nfrom __dbt__cte__int_unique_enriched_bank_statement", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_enriched_bank_statement", "sql": " __dbt__cte__int_unique_enriched_bank_statement as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Enriched Bank Statement\n--\nwith\n    keyed_statement as (\n        select\n            \n    \nmd5(cast(coalesce(cast(account_no as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transacted_on as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(description as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\", *\n        from \"mrzzy\".\"public\".\"stg_uob_statement\"\n    ),\n\n    unique_statement as (\n        (\n            select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by processed_on desc\n            ) as n_row\n        from keyed_statement\n    )\nwhere n_row = 1\n        )\n    )\n\n-- enrich statement with account dimension\nselect t.*, a.id as account_id\nfrom unique_statement as t\nleft join \"mrzzy\".\"public\".\"dim_account\" as a on a.vendor_id = t.account_no\n)"}]}, "model.providence.fact_monthly_budget": {"database": "mrzzy", "schema": "public", "name": "fact_monthly_budget", "resource_type": "model", "package_name": "providence", "path": "intermediate/dim_model/fact_monthly_budget.sql", "original_file_path": "models/intermediate/dim_model/fact_monthly_budget.sql", "unique_id": "model.providence.fact_monthly_budget", "fqn": ["providence", "intermediate", "dim_model", "fact_monthly_budget"], "alias": "fact_monthly_budget", "checksum": {"name": "sha256", "checksum": "1b191beb7595491e61ca87ccaf9ee733d6807c675581bd2a67f56c3ced6797d5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Snapshots of the Monthly Budget allocation.", "columns": {"id": {"name": "id", "description": "Surrogate key the Monthly Budget snapshot", "meta": {}, "data_type": null, "quote": null, "tags": []}, "month_date_id": {"name": "month_date_id", "description": "Date ID of the year-month the budget allocation is made for.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "budget_id": {"name": "budget_id", "description": "ID of Budget this budget allocation is made within.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category_id": {"name": "category_id", "description": "ID of Budget Category this budget allocation applies to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Amount allocated to the Budget Category for the year-month.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp when the data was last updated / refreshed.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "providence://models/intermediate/dim_model/models.yml", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1684070075.8996959, "relation_name": "\"mrzzy\".\"public\".\"fact_monthly_budget\"", "raw_code": "--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Monthly Budget Fact table\n--\n-- grain 1 row: 1 monthly budget snapshot\nselect\n    \"id\",\n    budget_month as month_date_id,\n    budget_id,\n    \"id\" as category_id,\n    budget_amount as amount,\n    updated_at\nfrom {{ ref(\"int_unique_budget_category\") }}", "language": "sql", "refs": [["int_unique_budget_category"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.providence.int_unique_budget_category"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/fact_monthly_budget.sql", "compiled": true, "compiled_code": "with __dbt__cte__int_unique_budget_category as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Budget Categories\n--\nwith\n    duplicated_categories as (\n        select\n            \n    \nmd5(cast(coalesce(cast(id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(budget_month as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\",\n            id as category_id,\n            scraped_on as updated_at,\n            \"name\",\n  \"budget_id\",\n  \"category_group_id\",\n  \"goal_due\",\n  \"is_deleted\",\n  \"budget_month\",\n  \"budget_amount\",\n  \"goal_type\",\n  \"goal_amount\"\n        from \"mrzzy\".\"public\".\"stg_ynab_budget_category\"\n    )\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by updated_at desc\n            ) as n_row\n        from duplicated_categories\n    )\nwhere n_row = 1\n    )\n)--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Monthly Budget Fact table\n--\n-- grain 1 row: 1 monthly budget snapshot\nselect\n    \"id\",\n    budget_month as month_date_id,\n    budget_id,\n    \"id\" as category_id,\n    budget_amount as amount,\n    updated_at\nfrom __dbt__cte__int_unique_budget_category", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_budget_category", "sql": " __dbt__cte__int_unique_budget_category as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Budget Categories\n--\nwith\n    duplicated_categories as (\n        select\n            \n    \nmd5(cast(coalesce(cast(id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(budget_month as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\",\n            id as category_id,\n            scraped_on as updated_at,\n            \"name\",\n  \"budget_id\",\n  \"category_group_id\",\n  \"goal_due\",\n  \"is_deleted\",\n  \"budget_month\",\n  \"budget_amount\",\n  \"goal_type\",\n  \"goal_amount\"\n        from \"mrzzy\".\"public\".\"stg_ynab_budget_category\"\n    )\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by updated_at desc\n            ) as n_row\n        from duplicated_categories\n    )\nwhere n_row = 1\n    )\n)"}]}, "model.providence.fact_public_transport_trip_leg": {"database": "mrzzy", "schema": "public", "name": "fact_public_transport_trip_leg", "resource_type": "model", "package_name": "providence", "path": "intermediate/dim_model/fact_public_transport_trip_leg.sql", "original_file_path": "models/intermediate/dim_model/fact_public_transport_trip_leg.sql", "unique_id": "model.providence.fact_public_transport_trip_leg", "fqn": ["providence", "intermediate", "dim_model", "fact_public_transport_trip_leg"], "alias": "fact_public_transport_trip_leg", "checksum": {"name": "sha256", "checksum": "b0c7a834c88264116ecf6284a638eb32b42bf9ea0a9199fa1668b051f55bd1ba"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Legs of a Public Transport Trip.", "columns": {"id": {"name": "id", "description": "Surrogate key for the Trip leg.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "traveled_on": {"name": "traveled_on", "description": "Timestamp when the Trip Leg was made.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "travel_date_id": {"name": "travel_date_id", "description": "Date ID on which the Trip Leg was made.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost_sgd": {"name": "cost_sgd", "description": "Cost of the Trip Leg in SGD.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source": {"name": "source", "description": "Start location of the Trip Leg.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "destination": {"name": "destination", "description": "End location of the Trip Leg.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transport_mode": {"name": "transport_mode", "description": "Mode of public transport used for this Trip Leg.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bank_card_id": {"name": "bank_card_id", "description": "ID of the Bank Card used to pay for this Trip Leg.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "ID of the Account the Trip is billed to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_ref": {"name": "billing_ref", "description": "Billing reference assigned once the Trip Leg is billed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_billed": {"name": "is_billed", "description": "Whether the fare for the Trip has been billed & deducted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp when the data was last updated / refreshed.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "providence://models/intermediate/dim_model/models.yml", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1684070075.8844337, "relation_name": "\"mrzzy\".\"public\".\"fact_public_transport_trip_leg\"", "raw_code": "--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Public Transport Trip Legs Facts\n--\n-- grain: 1 row = 1 trip leg snapshot\nwith\n    trip_legs_duplicated as (\n        select\n            -- since bank cards cannot make concurrent trips, the combination\n            -- of travel timestamp & card_id should be unique for each trip leg\n            {{\n                dbt_utils.generate_surrogate_key(\n                    [\"card_id\", \"traveled_on\", \"begin_at\"]\n                )\n            }} as \"id\",\n            {{\n                dbt_utils.star(\n                    ref(\"stg_simplygo_trip_leg\"),\n                    except=[\"traveled_on\", \"begin_at\", \"card_id\", \"posting_ref\"],\n                )\n            }},\n            posting_ref as billing_ref,\n            posting_ref is not null as is_billed,\n            -- merged in travel timestamp in utc timezone\n            convert_timezone('SGT', 'UTC', traveled_on + begin_at) as traveled_on,\n            scraped_on as updated_at,\n            -- foreign keys to dimensions\n            traveled_on as travel_date_id,\n            card_id as bank_card_id\n        from {{ ref(\"stg_simplygo_trip_leg\") }}\n    ),\n\n    unique_trip_legs as (\n        {{\n            deduplicate(\n                relation=\"trip_legs_duplicated\",\n                partition_by=\"id\",\n                order_by=\"updated_at desc\",\n            )\n        }}\n    )\n\nselect t.*, a.id as account_id\n-- associate trip leg with bank account based on bank account used to pay for the leg\nfrom unique_trip_legs as t\nleft join {{ ref(\"stg_map_bank_card\") }} as m on m.bank_card_id = t.bank_card_id\nleft join\n    {{ ref(\"dim_account\") }} as a on m.vendor = a.vendor and m.vendor_id = a.vendor_id", "language": "sql", "refs": [["stg_simplygo_trip_leg"], ["stg_simplygo_trip_leg"], ["stg_map_bank_card"], ["dim_account"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.dbt_utils.star", "macro.providence.deduplicate"], "nodes": ["model.providence.stg_simplygo_trip_leg", "model.providence.stg_simplygo_trip_leg", "model.providence.stg_map_bank_card", "model.providence.dim_account"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/fact_public_transport_trip_leg.sql", "compiled": true, "compiled_code": "--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Public Transport Trip Legs Facts\n--\n-- grain: 1 row = 1 trip leg snapshot\nwith\n    trip_legs_duplicated as (\n        select\n            -- since bank cards cannot make concurrent trips, the combination\n            -- of travel timestamp & card_id should be unique for each trip leg\n            \n    \nmd5(cast(coalesce(cast(card_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(traveled_on as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(begin_at as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\",\n            \"cost_sgd\",\n  \"source\",\n  \"destination\",\n  \"transport_mode\",\n  \"scraped_on\",\n            posting_ref as billing_ref,\n            posting_ref is not null as is_billed,\n            -- merged in travel timestamp in utc timezone\n            convert_timezone('SGT', 'UTC', traveled_on + begin_at) as traveled_on,\n            scraped_on as updated_at,\n            -- foreign keys to dimensions\n            traveled_on as travel_date_id,\n            card_id as bank_card_id\n        from \"mrzzy\".\"public\".\"stg_simplygo_trip_leg\"\n    ),\n\n    unique_trip_legs as (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by updated_at desc\n            ) as n_row\n        from trip_legs_duplicated\n    )\nwhere n_row = 1\n    )\n\nselect t.*, a.id as account_id\n-- associate trip leg with bank account based on bank account used to pay for the leg\nfrom unique_trip_legs as t\nleft join \"mrzzy\".\"public\".\"stg_map_bank_card\" as m on m.bank_card_id = t.bank_card_id\nleft join\n    \"mrzzy\".\"public\".\"dim_account\" as a on m.vendor = a.vendor and m.vendor_id = a.vendor_id", "extra_ctes_injected": true, "extra_ctes": []}, "model.providence.fact_accounting_transaction": {"database": "mrzzy", "schema": "public", "name": "fact_accounting_transaction", "resource_type": "model", "package_name": "providence", "path": "intermediate/dim_model/fact_accounting_transaction.sql", "original_file_path": "models/intermediate/dim_model/fact_accounting_transaction.sql", "unique_id": "model.providence.fact_accounting_transaction", "fqn": ["providence", "intermediate", "dim_model", "fact_accounting_transaction"], "alias": "fact_accounting_transaction", "checksum": {"name": "sha256", "checksum": "4c3d2af922edfcfa2b4815a1c9b6e7372393b981d332c7a8e716bfc092a89434"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Accounting Transactions", "columns": {"id": {"name": "id", "description": "Surrogate key of the Accounting Transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "super_id": {"name": "super_id", "description": "ID of super / parent Transaction of this transaction if one exists.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary Amount transferred from the associated account to the payee in the Accounting Transaction. Negative values signify a withdrawal from the account while spositive values signfiy a deposit from the payee.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "User assigned description to the Accounting Transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clearing_status": {"name": "clearing_status", "description": "Reconciliation status of this Account Transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_approved": {"name": "is_approved", "description": "Whether the Accounting Transaction was approved.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "budget_id": {"name": "budget_id", "description": "ID of the Budget the Accounting Transaction was made within.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "ID of the Account this Accounting Transaction was made on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category_id": {"name": "category_id", "description": "ID of Budget Category this Accounting Transaction was assigned.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payee_id": {"name": "payee_id", "description": "ID of the Payee involved in this Accounting Transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transfer_account_id": {"name": "transfer_account_id", "description": "Optional. Only set when this Accounting Transaction is a transfer between Accounts. ID of the target Account this Transaction transfers to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_id": {"name": "date_id", "description": "ID of the Date when this Accounting Transaction was made.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp when the data was last updated / refreshed.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "providence://models/intermediate/dim_model/models.yml", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1684070075.9166098, "relation_name": "\"mrzzy\".\"public\".\"fact_accounting_transaction\"", "raw_code": "--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Accounting Transaction Fact table\n--\nwith\n    unique_subtransactions as (\n        {{\n            deduplicate(\n                relation=ref(\"stg_ynab_subtransaction\"),\n                partition_by=\"id\",\n                order_by=\"scraped_on desc\",\n            )\n        }}\n    ),\n\n    -- expand subtransactions as individual transaction rows\n    all_transactions as (\n        select\n            s.super_id as super_id,\n            t.budget_id,\n            t.clearing_status,\n            t.is_approved,\n            t.account_id,\n            t.\"date\" as date_id,\n            coalesce(s.id, t.id) as \"id\",\n            coalesce(s.description, t.description) as description,\n            coalesce(s.category_id, t.category_id) as _ynab_category_id,\n            coalesce(s.payee_id, t.payee_id) as payee_id,\n            coalesce(\n                s.transfer_account_id, t.transfer_account_id\n            ) as transfer_account_id,\n            coalesce(s.amount, t.amount) as amount,\n            greatest(s.scraped_on, t.scraped_on) as updated_at\n        from {{ ref(\"int_unique_transaction\") }} as t\n        left join unique_subtransactions as s on s.super_id = t.id\n    )\n\n-- swap ynab category id with budget category dimension's id\nselect t.*, c.id as category_id\nfrom all_transactions as t\nleft join\n    {{ ref(\"dim_budget_category\") }} as c\n    on c.category_id = t._ynab_category_id\n    and c.effective_at = date_trunc('month', t.date_id)", "language": "sql", "refs": [["stg_ynab_subtransaction"], ["int_unique_transaction"], ["dim_budget_category"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.providence.deduplicate"], "nodes": ["model.providence.stg_ynab_subtransaction", "model.providence.int_unique_transaction", "model.providence.dim_budget_category"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/fact_accounting_transaction.sql", "compiled": true, "compiled_code": "--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Accounting Transaction Fact table\n--\nwith\n     __dbt__cte__int_unique_transaction as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Accounting Transactions\n--\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by scraped_on desc\n            ) as n_row\n        from \"mrzzy\".\"public\".\"stg_ynab_transaction\"\n    )\nwhere n_row = 1\n    )\nwhere is_deleted = false\n),unique_subtransactions as (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by scraped_on desc\n            ) as n_row\n        from \"mrzzy\".\"public\".\"stg_ynab_subtransaction\"\n    )\nwhere n_row = 1\n    ),\n\n    -- expand subtransactions as individual transaction rows\n    all_transactions as (\n        select\n            s.super_id as super_id,\n            t.budget_id,\n            t.clearing_status,\n            t.is_approved,\n            t.account_id,\n            t.\"date\" as date_id,\n            coalesce(s.id, t.id) as \"id\",\n            coalesce(s.description, t.description) as description,\n            coalesce(s.category_id, t.category_id) as _ynab_category_id,\n            coalesce(s.payee_id, t.payee_id) as payee_id,\n            coalesce(\n                s.transfer_account_id, t.transfer_account_id\n            ) as transfer_account_id,\n            coalesce(s.amount, t.amount) as amount,\n            greatest(s.scraped_on, t.scraped_on) as updated_at\n        from __dbt__cte__int_unique_transaction as t\n        left join unique_subtransactions as s on s.super_id = t.id\n    )\n\n-- swap ynab category id with budget category dimension's id\nselect t.*, c.id as category_id\nfrom all_transactions as t\nleft join\n    \"mrzzy\".\"public\".\"dim_budget_category\" as c\n    on c.category_id = t._ynab_category_id\n    and c.effective_at = date_trunc('month', t.date_id)", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_transaction", "sql": " __dbt__cte__int_unique_transaction as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Accounting Transactions\n--\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by scraped_on desc\n            ) as n_row\n        from \"mrzzy\".\"public\".\"stg_ynab_transaction\"\n    )\nwhere n_row = 1\n    )\nwhere is_deleted = false\n)"}]}, "model.providence.dim_payee": {"database": "mrzzy", "schema": "public", "name": "dim_payee", "resource_type": "model", "package_name": "providence", "path": "intermediate/dim_model/dim_payee.sql", "original_file_path": "models/intermediate/dim_model/dim_payee.sql", "unique_id": "model.providence.dim_payee", "fqn": ["providence", "intermediate", "dim_model", "dim_payee"], "alias": "dim_payee", "checksum": {"name": "sha256", "checksum": "793a094f098108d163b0fc20b59bbd97b5524283af13e5177e42d42b35b1bcf1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A Payee involved in an transaction.", "columns": {"id": {"name": "id", "description": "ID that uniquely identifies the payee.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the Payee.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transfer_account_id": {"name": "transfer_account_id", "description": "Optional. Account that the Payee represents in transfer transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp when the data was last updated / refreshed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_unaccounted": {"name": "is_unaccounted", "description": "Whether transactions made with this YNAB Payee is considered unaccounted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_passive": {"name": "is_passive", "description": "Whether transactions made this YNAB Payee is considered passive income.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "providence://models/intermediate/dim_model/models.yml", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1684070075.9033895, "relation_name": "\"mrzzy\".\"public\".\"dim_payee\"", "raw_code": "--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Payee Dimension\n--\nwith\n    unique_payees as (\n        {{\n            deduplicate(\n                relation=ref(\"stg_ynab_payee\"),\n                partition_by=\"id\",\n                order_by=\"scraped_on desc\",\n            )\n        }}\n    )\n\nselect\n    {{\n        dbt_utils.star(\n            ref(\"stg_ynab_payee\"), except=[\"scraped_on\"], relation_alias=\"p\"\n        )\n    }},\n    p.scraped_on as updated_at,\n    coalesce(f.is_unaccounted, false) as is_unaccounted,\n    coalesce(f.is_passive, false) as is_passive\nfrom unique_payees as p\nleft join {{ ref(\"ynab_payee_flag\") }} as f on f.payee_id = p.id", "language": "sql", "refs": [["stg_ynab_payee"], ["stg_ynab_payee"], ["ynab_payee_flag"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.providence.deduplicate", "macro.dbt_utils.star"], "nodes": ["model.providence.stg_ynab_payee", "model.providence.stg_ynab_payee", "seed.providence.ynab_payee_flag"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/dim_payee.sql", "compiled": true, "compiled_code": "--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Payee Dimension\n--\nwith\n    unique_payees as (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by scraped_on desc\n            ) as n_row\n        from \"mrzzy\".\"public\".\"stg_ynab_payee\"\n    )\nwhere n_row = 1\n    )\n\nselect\n    p.\"id\",\n  p.\"name\",\n  p.\"is_deleted\",\n  p.\"transfer_account_id\",\n    p.scraped_on as updated_at,\n    coalesce(f.is_unaccounted, false) as is_unaccounted,\n    coalesce(f.is_passive, false) as is_passive\nfrom unique_payees as p\nleft join \"mrzzy\".\"public\".\"ynab_payee_flag\" as f on f.payee_id = p.id", "extra_ctes_injected": true, "extra_ctes": []}, "model.providence.dim_budget": {"database": "mrzzy", "schema": "public", "name": "dim_budget", "resource_type": "model", "package_name": "providence", "path": "intermediate/dim_model/dim_budget.sql", "original_file_path": "models/intermediate/dim_model/dim_budget.sql", "unique_id": "model.providence.dim_budget", "fqn": ["providence", "intermediate", "dim_model", "dim_budget"], "alias": "dim_budget", "checksum": {"name": "sha256", "checksum": "0e0cb0d9772d1520647909235f31bce600c85f0d317a2c09538fe51c8f9d25c7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "An accounting budget.", "columns": {"id": {"name": "id", "description": "ID that uniquely identifies the budget.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "User assigned budget name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "modified_at": {"name": "modified_at", "description": "Timestamp when the budget was last modified / changed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_code": {"name": "currency_code", "description": "3 character ISO code of the currency used by the budget.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_symbol": {"name": "currency_symbol", "description": "Symbol used by render the currency used by the budget (eg. $ for dollar)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp when the data was last updated / refreshed.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "providence://models/intermediate/dim_model/models.yml", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1684070075.8880699, "relation_name": "\"mrzzy\".\"public\".\"dim_budget\"", "raw_code": "--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Budget Dimension\n--\nselect\n    {{ dbt_utils.star(ref(\"stg_ynab_budget\"), except=[\"scraped_on\"]) }},\n    scraped_on as updated_at\nfrom\n    (\n        {{\n            deduplicate(\n                relation=ref(\"stg_ynab_budget\"),\n                partition_by=\"id\",\n                order_by=\"scraped_on desc\",\n            )\n        }}\n    )", "language": "sql", "refs": [["stg_ynab_budget"], ["stg_ynab_budget"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star", "macro.providence.deduplicate"], "nodes": ["model.providence.stg_ynab_budget", "model.providence.stg_ynab_budget"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/dim_budget.sql", "compiled": true, "compiled_code": "--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Budget Dimension\n--\nselect\n    \"id\",\n  \"name\",\n  \"modified_at\",\n  \"currency_code\",\n  \"currency_symbol\",\n    scraped_on as updated_at\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by scraped_on desc\n            ) as n_row\n        from \"mrzzy\".\"public\".\"stg_ynab_budget\"\n    )\nwhere n_row = 1\n    )", "extra_ctes_injected": true, "extra_ctes": []}, "model.providence.fact_bank_statement": {"database": "mrzzy", "schema": "public", "name": "fact_bank_statement", "resource_type": "model", "package_name": "providence", "path": "intermediate/dim_model/fact_bank_statement.sql", "original_file_path": "models/intermediate/dim_model/fact_bank_statement.sql", "unique_id": "model.providence.fact_bank_statement", "fqn": ["providence", "intermediate", "dim_model", "fact_bank_statement"], "alias": "fact_bank_statement", "checksum": {"name": "sha256", "checksum": "cf49cd1394987426099af2cd5d1d22ca7f7cfbfeea3eafecae7aea8e7ef938bd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Periodic Bank Statement snapshot.", "columns": {"id": {"name": "id", "description": "Unique surrogate key for the Bank Statement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "begin_date_id": {"name": "begin_date_id", "description": "Id of the Date beginning the period that the Bank Statement covers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_date_id": {"name": "end_date_id", "description": "Id of the Date ending the period that the Bank Statement covers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "ID of the Account for which this Bank Statement derived.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance": {"name": "balance", "description": "Current Balance of the Bank account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp when the data was last updated / refreshed.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "providence://models/intermediate/dim_model/models.yml", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1684070075.924007, "relation_name": "\"mrzzy\".\"public\".\"fact_bank_statement\"", "raw_code": "--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Bank Statement Fact table\n--\nwith\n    keyed_statement as (\n        select\n            {{\n                dbt_utils.generate_surrogate_key(\n                    [\"statement_begin\", \"statement_begin\"]\n                )\n            }} as \"id\", *\n        from {{ ref(\"stg_uob_statement\") }}\n    ),\n\n    unique_statement as (\n        {{\n            deduplicate(\n                relation=\"keyed_statement\",\n                partition_by=\"id\",\n                order_by=\"processed_on desc\",\n            )\n        }}\n    )\n\n-- grain: 1 row = 1 bank statement\nselect\n    s.id,\n    s.statement_begin as begin_date_id,\n    s.statement_end as end_date_id,\n    a.id as account_id,\n    s.balance,\n    s.processed_on as updated_at\nfrom unique_statement as s\nleft join {{ ref(\"dim_account\") }} as a on a.vendor_id = s.account_no", "language": "sql", "refs": [["stg_uob_statement"], ["dim_account"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.providence.deduplicate"], "nodes": ["model.providence.stg_uob_statement", "model.providence.dim_account"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/fact_bank_statement.sql", "compiled": true, "compiled_code": "--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Bank Statement Fact table\n--\nwith\n    keyed_statement as (\n        select\n            \n    \nmd5(cast(coalesce(cast(statement_begin as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(statement_begin as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\", *\n        from \"mrzzy\".\"public\".\"stg_uob_statement\"\n    ),\n\n    unique_statement as (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by processed_on desc\n            ) as n_row\n        from keyed_statement\n    )\nwhere n_row = 1\n    )\n\n-- grain: 1 row = 1 bank statement\nselect\n    s.id,\n    s.statement_begin as begin_date_id,\n    s.statement_end as end_date_id,\n    a.id as account_id,\n    s.balance,\n    s.processed_on as updated_at\nfrom unique_statement as s\nleft join \"mrzzy\".\"public\".\"dim_account\" as a on a.vendor_id = s.account_no", "extra_ctes_injected": true, "extra_ctes": []}, "model.providence.dim_account": {"database": "mrzzy", "schema": "public", "name": "dim_account", "resource_type": "model", "package_name": "providence", "path": "intermediate/dim_model/dim_account.sql", "original_file_path": "models/intermediate/dim_model/dim_account.sql", "unique_id": "model.providence.dim_account", "fqn": ["providence", "intermediate", "dim_model", "dim_account"], "alias": "dim_account", "checksum": {"name": "sha256", "checksum": "6763a447ab900feaeded745fb92e83d6914f5cfc6c88d7507754ca3c9908829a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "An Account containing assets tracked in the accounting budget.", "columns": {"id": {"name": "id", "description": "Surrogate key of the Account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "User assigned name of the Account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_closed": {"name": "is_closed", "description": "Whether the account has been closed in the accounting budget.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Whether the account has been deleted in the accounting budget.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_cash": {"name": "is_cash", "description": "Whether the funds in this account is has cash-like liquidity & is budgetable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "budget_type": {"name": "budget_type", "description": "Account type as assigned in the accounting budget.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor": {"name": "vendor", "description": "Name of the Vendor hosting the Account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor_id": {"name": "vendor_id", "description": "Vendor assigned ID to the Account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor_type": {"name": "vendor_type", "description": "Vendor assigned Account type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_reconciled_at": {"name": "last_reconciled_at", "description": "Timestamp when the Account was last reconciled with the Vendor.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp when the data was last updated / refreshed.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "providence://models/intermediate/dim_model/models.yml", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1684070075.9094603, "relation_name": "\"mrzzy\".\"public\".\"dim_account\"", "raw_code": "--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Account Dimension\n--\nwith\n    -- deduplicate ynab & uob account rows\n    unique_ynab_accounts as (\n        select\n            {{\n                dbt_utils.star(\n                    ref(\"stg_ynab_account\"),\n                    except=[\"type\", \"on_budget\", \"payee_id\"],\n                )\n            }},\n            \"type\" as budget_type,\n            on_budget as is_cash\n        from\n            (\n                {{\n                    deduplicate(\n                        relation=ref(\"stg_ynab_account\"),\n                        partition_by=\"id\",\n                        order_by=\"scraped_on desc\",\n                    )\n                }}\n            )\n    ),\n\n    unique_uob_accounts as (\n        select account_no, \"name\", processed_on\n        from\n            (\n                {{\n                    deduplicate(\n                        relation=ref(\"stg_uob_statement\"),\n                        partition_by=\"account_no\",\n                        order_by=\"processed_on desc\",\n                    )\n                }}\n            )\n    ),\n\n    -- enrich budget account with uob bank account info.\n    map_uob_account as (\n        select * from {{ ref(\"stg_map_budget_account\") }} where vendor = 'UOB'\n    )\n\nselect\n    b.*,\n    m.vendor,\n    m.vendor_id,\n    v.name as vendor_type,\n    greatest(b.scraped_on, v.processed_on) as updated_at\nfrom unique_ynab_accounts as b\nleft join map_uob_account as m on m.budget_account_id = b.id\nleft join unique_uob_accounts as v on v.account_no = m.vendor_id", "language": "sql", "refs": [["stg_ynab_account"], ["stg_ynab_account"], ["stg_uob_statement"], ["stg_map_budget_account"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star", "macro.providence.deduplicate"], "nodes": ["model.providence.stg_ynab_account", "model.providence.stg_ynab_account", "model.providence.stg_uob_statement", "model.providence.stg_map_budget_account"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/dim_account.sql", "compiled": true, "compiled_code": "--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Account Dimension\n--\nwith\n    -- deduplicate ynab & uob account rows\n    unique_ynab_accounts as (\n        select\n            \"id\",\n  \"name\",\n  \"is_closed\",\n  \"is_deleted\",\n  \"last_reconciled_at\",\n  \"scraped_on\",\n            \"type\" as budget_type,\n            on_budget as is_cash\n        from\n            (\n                select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by scraped_on desc\n            ) as n_row\n        from \"mrzzy\".\"public\".\"stg_ynab_account\"\n    )\nwhere n_row = 1\n            )\n    ),\n\n    unique_uob_accounts as (\n        select account_no, \"name\", processed_on\n        from\n            (\n                select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by account_no order by processed_on desc\n            ) as n_row\n        from \"mrzzy\".\"public\".\"stg_uob_statement\"\n    )\nwhere n_row = 1\n            )\n    ),\n\n    -- enrich budget account with uob bank account info.\n    map_uob_account as (\n        select * from \"mrzzy\".\"public\".\"stg_map_budget_account\" where vendor = 'UOB'\n    )\n\nselect\n    b.*,\n    m.vendor,\n    m.vendor_id,\n    v.name as vendor_type,\n    greatest(b.scraped_on, v.processed_on) as updated_at\nfrom unique_ynab_accounts as b\nleft join map_uob_account as m on m.budget_account_id = b.id\nleft join unique_uob_accounts as v on v.account_no = m.vendor_id", "extra_ctes_injected": true, "extra_ctes": []}, "model.providence.stg_uob_statement": {"database": "mrzzy", "schema": "public", "name": "stg_uob_statement", "resource_type": "model", "package_name": "providence", "path": "staging/spectrum/uob/stg_uob_statement.sql", "original_file_path": "models/staging/spectrum/uob/stg_uob_statement.sql", "unique_id": "model.providence.stg_uob_statement", "fqn": ["providence", "staging", "spectrum", "uob", "stg_uob_statement"], "alias": "stg_uob_statement", "checksum": {"name": "sha256", "checksum": "c80137636a808ea1f9210814bb9680181c4e1145351d4a83cb0902b4ff62cc74"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A UOB Bank Account Statement", "columns": {"transacted_on": {"name": "transacted_on", "description": "Date on which the Bank Transaction was made.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Date on which the Bank Transaction was made.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_no": {"name": "account_no", "description": "UOB Bank account number.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Product name of the UOB Bank Account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deposit": {"name": "deposit", "description": "Monetary amount credited to the UOB Bank Account in the Transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "withdrawal": {"name": "withdrawal", "description": "Monetary amount deducted from the UOB Bank Account in the Transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance": {"name": "balance", "description": "Current Balance of the UOB Bank account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_code": {"name": "currency_code", "description": "3 character ISO code of the currency used by Bank Account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "statement_begin": {"name": "statement_begin", "description": "Timestamp denoting the start the date range of the bank statement form the Bank Account information was derived.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "statement_end": {"name": "statement_end", "description": "Timestamp denoting the end (inclusive) the date range of the bank statement from which the Bank Account information was derived.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "processed_on": {"name": "processed_on", "description": "Timestamp when the data was last extracted from UOB bank statement export.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "providence://models/staging/spectrum/uob/models.yml", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1684070076.3431728, "relation_name": "\"mrzzy\".\"public\".\"stg_uob_statement\"", "raw_code": "--\n-- Providence\n-- Transforms\n-- DBT Staging: UOB Bank Account Transaction\n--\nselect\n    cast(\"transaction date\" as date) as transacted_on,  -- noqa: RF05\n    -- replace newlines in transaction description with spaces\n    replace(\n        cast(\"transaction description\" as varchar),  -- noqa: RF05\n        '\\n',\n        ' '\n    ) as description,\n    cast(withdrawal as decimal(10, 2)) as withdrawal,\n    cast(deposit as decimal(10, 2)) as deposit,\n    cast(\"available balance\" as decimal(10, 2)) as balance,  -- noqa: RF05\n    cast(\"account number\" as varchar) as account_no,  -- noqa: RF05\n    cast(\"account type\" as varchar) as \"name\",  -- noqa: RF05\n    cast(currency as varchar) as currency_code,\n    -- split_part() is 1-indexed\n    cast(\n        split_part(\"statement period\", ' To ', 1) as date  -- noqa: RF05\n    ) as statement_begin,\n    cast(\n        split_part(\"statement period\", ' To ', 2) as date  -- noqa: RF05\n    ) as statement_end,\n    coalesce(\n        cast(_pandas_etl_transformed_on as timestamp), {{ timestamp_min() }}\n    ) as processed_on\nfrom {{ source(\"uob\", \"source_uob\") }}", "language": "sql", "refs": [], "sources": [["uob", "source_uob"]], "metrics": [], "depends_on": {"macros": ["macro.providence.timestamp_min"], "nodes": ["source.providence.uob.source_uob"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/uob/stg_uob_statement.sql", "compiled": true, "compiled_code": "--\n-- Providence\n-- Transforms\n-- DBT Staging: UOB Bank Account Transaction\n--\nselect\n    cast(\"transaction date\" as date) as transacted_on,  -- noqa: RF05\n    -- replace newlines in transaction description with spaces\n    replace(\n        cast(\"transaction description\" as varchar),  -- noqa: RF05\n        '\\n',\n        ' '\n    ) as description,\n    cast(withdrawal as decimal(10, 2)) as withdrawal,\n    cast(deposit as decimal(10, 2)) as deposit,\n    cast(\"available balance\" as decimal(10, 2)) as balance,  -- noqa: RF05\n    cast(\"account number\" as varchar) as account_no,  -- noqa: RF05\n    cast(\"account type\" as varchar) as \"name\",  -- noqa: RF05\n    cast(currency as varchar) as currency_code,\n    -- split_part() is 1-indexed\n    cast(\n        split_part(\"statement period\", ' To ', 1) as date  -- noqa: RF05\n    ) as statement_begin,\n    cast(\n        split_part(\"statement period\", ' To ', 2) as date  -- noqa: RF05\n    ) as statement_end,\n    coalesce(\n        cast(_pandas_etl_transformed_on as timestamp), cast('0001-01-01 00:00:00' as timestamp)\n    ) as processed_on\nfrom \"mrzzy\".\"lake\".\"source_uob\"", "extra_ctes_injected": true, "extra_ctes": []}, "model.providence.stg_simplygo_card": {"database": "mrzzy", "schema": "public", "name": "stg_simplygo_card", "resource_type": "model", "package_name": "providence", "path": "staging/spectrum/simplygo/stg_simplygo_card.sql", "original_file_path": "models/staging/spectrum/simplygo/stg_simplygo_card.sql", "unique_id": "model.providence.stg_simplygo_card", "fqn": ["providence", "staging", "spectrum", "simplygo", "stg_simplygo_card"], "alias": "stg_simplygo_card", "checksum": {"name": "sha256", "checksum": "6d59abd58f8397f2da672fa153b0b0d223c785905c523216efe14cff044535d6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Bank cards registered in SimplyGo by scrape time.", "columns": {"id": {"name": "id", "description": "ID of the Bank Card as assigned by SimplyGo.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the Bank Card.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "scraped_on": {"name": "scraped_on", "description": "Timestamp when the data was scraped from SimplyGo.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "providence://models/staging/spectrum/simplygo/models.yml", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1684070076.4059966, "relation_name": "\"mrzzy\".\"public\".\"stg_simplygo_card\"", "raw_code": "--\n-- Providence\n-- Transforms\n-- DBT Staging: Simplygo Cards\n--\nselect\n    cast(c.id as varchar) as \"id\",\n    cast(c.name as varchar) as \"name\",\n    cast(s.scraped_on as timestamp) as scraped_on\nfrom {{ source(\"simplygo\", \"source_simplygo\") }} as s, s.cards as c", "language": "sql", "refs": [], "sources": [["simplygo", "source_simplygo"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.providence.simplygo.source_simplygo"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/simplygo/stg_simplygo_card.sql", "compiled": true, "compiled_code": "--\n-- Providence\n-- Transforms\n-- DBT Staging: Simplygo Cards\n--\nselect\n    cast(c.id as varchar) as \"id\",\n    cast(c.name as varchar) as \"name\",\n    cast(s.scraped_on as timestamp) as scraped_on\nfrom \"mrzzy\".\"lake\".\"source_simplygo\" as s, s.cards as c", "extra_ctes_injected": true, "extra_ctes": []}, "model.providence.stg_simplygo_trip_leg": {"database": "mrzzy", "schema": "public", "name": "stg_simplygo_trip_leg", "resource_type": "model", "package_name": "providence", "path": "staging/spectrum/simplygo/stg_simplygo_trip_leg.sql", "original_file_path": "models/staging/spectrum/simplygo/stg_simplygo_trip_leg.sql", "unique_id": "model.providence.stg_simplygo_trip_leg", "fqn": ["providence", "staging", "spectrum", "simplygo", "stg_simplygo_trip_leg"], "alias": "stg_simplygo_trip_leg", "checksum": {"name": "sha256", "checksum": "fe18c8c090a5f35310f25e2f2380b6fe0c11423d15e52eb46ee3ab9d60a08bfb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Legs of a Public Transport Trip made on SimplyGo.", "columns": {"posting_ref": {"name": "posting_ref", "description": "Posting reference assigned by SimplyGo once the Trip Leg is billed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "traveled_on": {"name": "traveled_on", "description": "Date on which the Trip Leg was made.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "begin_at": {"name": "begin_at", "description": "Time at which the Trip Leg was made in Asia/Singapore timezone.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost_sgd": {"name": "cost_sgd", "description": "Cost of the Trip Leg in SGD.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source": {"name": "source", "description": "Start location of the Trip Leg.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "destination": {"name": "destination", "description": "End location of the Trip Leg.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transport_mode": {"name": "transport_mode", "description": "Mode of public transport used for this Trip Leg.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "card_id": {"name": "card_id", "description": "ID of the Bank Card used to pay for this Trip Leg.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "scraped_on": {"name": "scraped_on", "description": "Timestamp when the data was scraped from SimplyGo.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "providence://models/staging/spectrum/simplygo/models.yml", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1684070076.411043, "relation_name": "\"mrzzy\".\"public\".\"stg_simplygo_trip_leg\"", "raw_code": "--\n-- Providence\n-- Transforms\n-- DBT Staging: Simplygo Public Transport Trip Legs\n--\nselect\n    cast(t.posting_ref as varchar) as posting_ref,\n    cast(t.traveled_on as date) as traveled_on,\n    cast(l.begin_at as time) as begin_at,\n    cast(l.cost_sgd as decimal(4, 2)) as cost_sgd,\n    cast(l.source as varchar) as \"source\",\n    cast(l.destination as varchar) as destination,\n    cast(l.mode as varchar) as transport_mode,\n    cast(t.card_id as varchar) as card_id,\n    cast(s.scraped_on as timestamp) as scraped_on\nfrom {{ source(\"simplygo\", \"source_simplygo\") }} as s, s.trips as t, t.legs as l", "language": "sql", "refs": [], "sources": [["simplygo", "source_simplygo"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.providence.simplygo.source_simplygo"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/simplygo/stg_simplygo_trip_leg.sql", "compiled": true, "compiled_code": "--\n-- Providence\n-- Transforms\n-- DBT Staging: Simplygo Public Transport Trip Legs\n--\nselect\n    cast(t.posting_ref as varchar) as posting_ref,\n    cast(t.traveled_on as date) as traveled_on,\n    cast(l.begin_at as time) as begin_at,\n    cast(l.cost_sgd as decimal(4, 2)) as cost_sgd,\n    cast(l.source as varchar) as \"source\",\n    cast(l.destination as varchar) as destination,\n    cast(l.mode as varchar) as transport_mode,\n    cast(t.card_id as varchar) as card_id,\n    cast(s.scraped_on as timestamp) as scraped_on\nfrom \"mrzzy\".\"lake\".\"source_simplygo\" as s, s.trips as t, t.legs as l", "extra_ctes_injected": true, "extra_ctes": []}, "model.providence.stg_ynab_budget_category_group": {"database": "mrzzy", "schema": "public", "name": "stg_ynab_budget_category_group", "resource_type": "model", "package_name": "providence", "path": "staging/spectrum/ynab/stg_ynab_budget_category_group.sql", "original_file_path": "models/staging/spectrum/ynab/stg_ynab_budget_category_group.sql", "unique_id": "model.providence.stg_ynab_budget_category_group", "fqn": ["providence", "staging", "spectrum", "ynab", "stg_ynab_budget_category_group"], "alias": "stg_ynab_budget_category_group", "checksum": {"name": "sha256", "checksum": "dc4eedcc61f09468e606d92f18b475aed5514e74d02af96468026e5a8996289a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Grouping for budget categories.", "columns": {"id": {"name": "id", "description": "YNAB assigned Category Group ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "User assigned name of the Category Group.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Whether the Category Group was deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "scraped_on": {"name": "scraped_on", "description": "Timestamp when the data was last scraped from YNAB.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "providence://models/staging/spectrum/ynab/models.yml", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1684070076.4713032, "relation_name": "\"mrzzy\".\"public\".\"stg_ynab_budget_category_group\"", "raw_code": "--\n-- Providence\n-- Transforms\n-- DBT Staging: YNAB budget category\n--\nselect\n    cast(g.id as varchar) as \"id\",\n    cast(g.name as varchar) as \"name\",\n    cast(g.deleted as boolean) as is_deleted,\n    coalesce(\n        cast(s._rest_api_src_scraped_on as timestamp), {{ timestamp_min() }}\n    ) as scraped_on\nfrom {{ source(\"ynab\", \"source_ynab\") }} as s, s.data.budget.category_groups as g", "language": "sql", "refs": [], "sources": [["ynab", "source_ynab"]], "metrics": [], "depends_on": {"macros": ["macro.providence.timestamp_min"], "nodes": ["source.providence.ynab.source_ynab"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/stg_ynab_budget_category_group.sql", "compiled": true, "compiled_code": "--\n-- Providence\n-- Transforms\n-- DBT Staging: YNAB budget category\n--\nselect\n    cast(g.id as varchar) as \"id\",\n    cast(g.name as varchar) as \"name\",\n    cast(g.deleted as boolean) as is_deleted,\n    coalesce(\n        cast(s._rest_api_src_scraped_on as timestamp), cast('0001-01-01 00:00:00' as timestamp)\n    ) as scraped_on\nfrom \"mrzzy\".\"lake\".\"source_ynab\" as s, s.data.budget.category_groups as g", "extra_ctes_injected": true, "extra_ctes": []}, "model.providence.stg_ynab_subtransaction": {"database": "mrzzy", "schema": "public", "name": "stg_ynab_subtransaction", "resource_type": "model", "package_name": "providence", "path": "staging/spectrum/ynab/stg_ynab_subtransaction.sql", "original_file_path": "models/staging/spectrum/ynab/stg_ynab_subtransaction.sql", "unique_id": "model.providence.stg_ynab_subtransaction", "fqn": ["providence", "staging", "spectrum", "ynab", "stg_ynab_subtransaction"], "alias": "stg_ynab_subtransaction", "checksum": {"name": "sha256", "checksum": "7db77e46f03a1f46429988ae81a3f75ca3fa09dfbb677f32bc33f24e3800cbd0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A YNAB accounting Subtransaction.", "columns": {"id": {"name": "id", "description": "YNAB assigned Subtransaction ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "super_id": {"name": "super_id", "description": "ID of super / parent Transaction of this Subtransaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "User assigned description to the Subtransaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category_id": {"name": "category_id", "description": "YNAB assigned ID of the Category this Subtransaction belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payee_id": {"name": "payee_id", "description": "ID of the YNAB Payee involved in this Transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transfer_account_id": {"name": "transfer_account_id", "description": "Optional. Only set when this Subtransaction is a transfer between Accounts. ID of the target YNAB Account this Subtransaction transfers to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Whether the Subtransaction was deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary Amount transferred from the associated account to the payee in the Subtransaction. Negative values signify a withdrawal from the account (of the super/parent Transaction of this Subtransaction) while positive values signfiy a deposit from the payee.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "scraped_on": {"name": "scraped_on", "description": "Timestamp when the data was last scraped from YNAB.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "providence://models/staging/spectrum/ynab/models.yml", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1684070076.4911408, "relation_name": "\"mrzzy\".\"public\".\"stg_ynab_subtransaction\"", "raw_code": "--\n-- Providence\n-- Transforms\n-- DBT Staging: YNAB Accounting Subtransaction\n--\nselect\n    cast(t.id as varchar) as \"id\",\n    cast(t.transaction_id as varchar) as super_id,\n    cast(t.memo as varchar) as description,\n    cast(s.data.budget.id as varchar) as budget_id,\n    cast(t.category_id as varchar) as category_id,\n    cast(t.payee_id as varchar) as payee_id,\n    cast(t.transfer_account_id as varchar) as transfer_account_id,\n    cast(t.deleted as boolean) as is_deleted,\n    coalesce(\n        cast(s._rest_api_src_scraped_on as timestamp), {{ timestamp_min() }}\n    ) as scraped_on,\n    -- ynab expresses amounts in milliunits: 1000 milliunits = $1\n    cast(t.amount as decimal(13, 2)) / 1000 as amount\nfrom {{ source(\"ynab\", \"source_ynab\") }} as s, s.data.budget.subtransactions as t", "language": "sql", "refs": [], "sources": [["ynab", "source_ynab"]], "metrics": [], "depends_on": {"macros": ["macro.providence.timestamp_min"], "nodes": ["source.providence.ynab.source_ynab"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/stg_ynab_subtransaction.sql", "compiled": true, "compiled_code": "--\n-- Providence\n-- Transforms\n-- DBT Staging: YNAB Accounting Subtransaction\n--\nselect\n    cast(t.id as varchar) as \"id\",\n    cast(t.transaction_id as varchar) as super_id,\n    cast(t.memo as varchar) as description,\n    cast(s.data.budget.id as varchar) as budget_id,\n    cast(t.category_id as varchar) as category_id,\n    cast(t.payee_id as varchar) as payee_id,\n    cast(t.transfer_account_id as varchar) as transfer_account_id,\n    cast(t.deleted as boolean) as is_deleted,\n    coalesce(\n        cast(s._rest_api_src_scraped_on as timestamp), cast('0001-01-01 00:00:00' as timestamp)\n    ) as scraped_on,\n    -- ynab expresses amounts in milliunits: 1000 milliunits = $1\n    cast(t.amount as decimal(13, 2)) / 1000 as amount\nfrom \"mrzzy\".\"lake\".\"source_ynab\" as s, s.data.budget.subtransactions as t", "extra_ctes_injected": true, "extra_ctes": []}, "model.providence.stg_ynab_transaction": {"database": "mrzzy", "schema": "public", "name": "stg_ynab_transaction", "resource_type": "model", "package_name": "providence", "path": "staging/spectrum/ynab/stg_ynab_transaction.sql", "original_file_path": "models/staging/spectrum/ynab/stg_ynab_transaction.sql", "unique_id": "model.providence.stg_ynab_transaction", "fqn": ["providence", "staging", "spectrum", "ynab", "stg_ynab_transaction"], "alias": "stg_ynab_transaction", "checksum": {"name": "sha256", "checksum": "cabd9c14afd68e5c11397d0de6585d3312cfc2861a9c1f01a92720c9e7a33c5e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A YNAB accounting Transaction.", "columns": {"id": {"name": "id", "description": "YNAB assigned Transaction ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary Amount transferred from the associated account to the payee in the Transaction. Negative values signify a withdrawal from the account while positive values signfiy a deposit from the payee.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "User assigned description to the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clearing_status": {"name": "clearing_status", "description": "Reconciliation status of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_approved": {"name": "is_approved", "description": "Whether the Transaction was approved.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Whether the Transaction was deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "budget_id": {"name": "budget_id", "description": "ID of the YNAB Budget the Transaction was made within.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category_id": {"name": "category_id", "description": "YNAB assigned ID of the Category this Transaction belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "ID of the YNAB Account this Transaction was made on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payee_id": {"name": "payee_id", "description": "ID of the YNAB Payee involved in this Transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transfer_account_id": {"name": "transfer_account_id", "description": "Optional. Only set when this Transaction is a transfer between Accounts. ID of the target YNAB Account this Transaction transfers to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "Date when this Transaction was made.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "scraped_on": {"name": "scraped_on", "description": "Timestamp when the data was last scraped from YNAB.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "providence://models/staging/spectrum/ynab/models.yml", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1684070076.4862108, "relation_name": "\"mrzzy\".\"public\".\"stg_ynab_transaction\"", "raw_code": "--\n-- Providence\n-- Transforms\n-- DBT Staging: YNAB Accounting Transaction\n--\nselect\n    cast(t.id as varchar) as \"id\",\n    lower(regexp_replace(trim(cast(t.memo as varchar)), ' +', ' ')) as description,\n    cast(t.cleared as varchar) as clearing_status,\n    cast(t.approved as boolean) as is_approved,\n    cast(t.deleted as boolean) as is_deleted,\n    cast(s.data.budget.id as varchar) as budget_id,\n    cast(t.category_id as varchar) as category_id,\n    cast(t.account_id as varchar) as account_id,\n    cast(t.payee_id as varchar) as payee_id,\n    cast(t.transfer_account_id as varchar) as transfer_account_id,\n    cast(t.date as date) as \"date\",\n    coalesce(\n        cast(s._rest_api_src_scraped_on as timestamp), {{ timestamp_min() }}\n    ) as scraped_on,\n    -- ynab expresses amounts in milliunits: 1000 milliunits = $1\n    cast(t.amount as decimal(13, 2)) / 1000 as amount\nfrom {{ source(\"ynab\", \"source_ynab\") }} as s, s.data.budget.transactions as t", "language": "sql", "refs": [], "sources": [["ynab", "source_ynab"]], "metrics": [], "depends_on": {"macros": ["macro.providence.timestamp_min"], "nodes": ["source.providence.ynab.source_ynab"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/stg_ynab_transaction.sql", "compiled": true, "compiled_code": "--\n-- Providence\n-- Transforms\n-- DBT Staging: YNAB Accounting Transaction\n--\nselect\n    cast(t.id as varchar) as \"id\",\n    lower(regexp_replace(trim(cast(t.memo as varchar)), ' +', ' ')) as description,\n    cast(t.cleared as varchar) as clearing_status,\n    cast(t.approved as boolean) as is_approved,\n    cast(t.deleted as boolean) as is_deleted,\n    cast(s.data.budget.id as varchar) as budget_id,\n    cast(t.category_id as varchar) as category_id,\n    cast(t.account_id as varchar) as account_id,\n    cast(t.payee_id as varchar) as payee_id,\n    cast(t.transfer_account_id as varchar) as transfer_account_id,\n    cast(t.date as date) as \"date\",\n    coalesce(\n        cast(s._rest_api_src_scraped_on as timestamp), cast('0001-01-01 00:00:00' as timestamp)\n    ) as scraped_on,\n    -- ynab expresses amounts in milliunits: 1000 milliunits = $1\n    cast(t.amount as decimal(13, 2)) / 1000 as amount\nfrom \"mrzzy\".\"lake\".\"source_ynab\" as s, s.data.budget.transactions as t", "extra_ctes_injected": true, "extra_ctes": []}, "model.providence.stg_ynab_payee": {"database": "mrzzy", "schema": "public", "name": "stg_ynab_payee", "resource_type": "model", "package_name": "providence", "path": "staging/spectrum/ynab/stg_ynab_payee.sql", "original_file_path": "models/staging/spectrum/ynab/stg_ynab_payee.sql", "unique_id": "model.providence.stg_ynab_payee", "fqn": ["providence", "staging", "spectrum", "ynab", "stg_ynab_payee"], "alias": "stg_ynab_payee", "checksum": {"name": "sha256", "checksum": "a5a55cd8f7ea93b6a4ff90f77f4820b1288c18796074ad142b037d3d18cc46f7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A YNAB Budget payee.", "columns": {"id": {"name": "id", "description": "YNAB assigned Payee ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "User assigned name of the Payee", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transfer_account_id": {"name": "transfer_account_id", "description": "Optional. YNAB Budget Account that the Payee represents in transfer transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "scraped_on": {"name": "scraped_on", "description": "Timestamp when the data was last scraped from YNAB.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "providence://models/staging/spectrum/ynab/models.yml", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1684070076.4790955, "relation_name": "\"mrzzy\".\"public\".\"stg_ynab_payee\"", "raw_code": "--\n-- Providence\n-- Transforms\n-- DBT Staging: YNAB Payee\n--\nselect\n    cast(p.id as varchar) as \"id\",\n    cast(p.name as varchar) as \"name\",\n    cast(p.deleted as boolean) as is_deleted,\n    cast(p.transfer_account_id as varchar) as transfer_account_id,\n    coalesce(\n        cast(s._rest_api_src_scraped_on as timestamp), {{ timestamp_min() }}\n    ) as scraped_on\nfrom {{ source(\"ynab\", \"source_ynab\") }} as s, s.data.budget.payees as p", "language": "sql", "refs": [], "sources": [["ynab", "source_ynab"]], "metrics": [], "depends_on": {"macros": ["macro.providence.timestamp_min"], "nodes": ["source.providence.ynab.source_ynab"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/stg_ynab_payee.sql", "compiled": true, "compiled_code": "--\n-- Providence\n-- Transforms\n-- DBT Staging: YNAB Payee\n--\nselect\n    cast(p.id as varchar) as \"id\",\n    cast(p.name as varchar) as \"name\",\n    cast(p.deleted as boolean) as is_deleted,\n    cast(p.transfer_account_id as varchar) as transfer_account_id,\n    coalesce(\n        cast(s._rest_api_src_scraped_on as timestamp), cast('0001-01-01 00:00:00' as timestamp)\n    ) as scraped_on\nfrom \"mrzzy\".\"lake\".\"source_ynab\" as s, s.data.budget.payees as p", "extra_ctes_injected": true, "extra_ctes": []}, "model.providence.stg_ynab_budget": {"database": "mrzzy", "schema": "public", "name": "stg_ynab_budget", "resource_type": "model", "package_name": "providence", "path": "staging/spectrum/ynab/stg_ynab_budget.sql", "original_file_path": "models/staging/spectrum/ynab/stg_ynab_budget.sql", "unique_id": "model.providence.stg_ynab_budget", "fqn": ["providence", "staging", "spectrum", "ynab", "stg_ynab_budget"], "alias": "stg_ynab_budget", "checksum": {"name": "sha256", "checksum": "1c309f52d4ed9ec6b2ae97cde3a901feac14a6a45aa35667fd5c7be3df3b4816"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A YNAB accounting budget.", "columns": {"id": {"name": "id", "description": "YNAB assigned budget ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "User assigned budget name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "modified_at": {"name": "modified_at", "description": "Timestamp when the budget was last modified / changed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_code": {"name": "currency_code", "description": "3 character ISO code of the currency used by the budget.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_symbol": {"name": "currency_symbol", "description": "Symbol used to denote the currency (eg. $ for dollar)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "scraped_on": {"name": "scraped_on", "description": "Timestamp when the data was last scraped from YNAB.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "providence://models/staging/spectrum/ynab/models.yml", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1684070076.4625516, "relation_name": "\"mrzzy\".\"public\".\"stg_ynab_budget\"", "raw_code": "--\n-- Providence\n-- Transforms\n-- DBT Staging: YNAB budget\n--\nselect\n    cast(s.data.budget.id as varchar) as \"id\",\n    cast(s.data.budget.name as varchar) as \"name\",\n    cast(s.data.budget.last_modified_on as timestamp) as modified_at,\n    cast(s.data.budget.currency_format.iso_code as varchar) as currency_code,\n    cast(s.data.budget.currency_format.currency_symbol as varchar) as currency_symbol,\n    coalesce(\n        cast(s._rest_api_src_scraped_on as timestamp), {{ timestamp_min() }}\n    ) as scraped_on\nfrom {{ source(\"ynab\", \"source_ynab\") }} as s", "language": "sql", "refs": [], "sources": [["ynab", "source_ynab"]], "metrics": [], "depends_on": {"macros": ["macro.providence.timestamp_min"], "nodes": ["source.providence.ynab.source_ynab"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/stg_ynab_budget.sql", "compiled": true, "compiled_code": "--\n-- Providence\n-- Transforms\n-- DBT Staging: YNAB budget\n--\nselect\n    cast(s.data.budget.id as varchar) as \"id\",\n    cast(s.data.budget.name as varchar) as \"name\",\n    cast(s.data.budget.last_modified_on as timestamp) as modified_at,\n    cast(s.data.budget.currency_format.iso_code as varchar) as currency_code,\n    cast(s.data.budget.currency_format.currency_symbol as varchar) as currency_symbol,\n    coalesce(\n        cast(s._rest_api_src_scraped_on as timestamp), cast('0001-01-01 00:00:00' as timestamp)\n    ) as scraped_on\nfrom \"mrzzy\".\"lake\".\"source_ynab\" as s", "extra_ctes_injected": true, "extra_ctes": []}, "model.providence.stg_ynab_account": {"database": "mrzzy", "schema": "public", "name": "stg_ynab_account", "resource_type": "model", "package_name": "providence", "path": "staging/spectrum/ynab/stg_ynab_account.sql", "original_file_path": "models/staging/spectrum/ynab/stg_ynab_account.sql", "unique_id": "model.providence.stg_ynab_account", "fqn": ["providence", "staging", "spectrum", "ynab", "stg_ynab_account"], "alias": "stg_ynab_account", "checksum": {"name": "sha256", "checksum": "1a61f888cfb21a50a388bde1dafadada2a5727db8e25f935189273cc98aba2c2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A YNAB Budget Account.", "columns": {"id": {"name": "id", "description": "YNAB assigned Budget Account ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "User assigned name of the Budget Account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "Type of Budget Account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "on_budget": {"name": "on_budget", "description": "Whether the funds in this Budget Account is budgetable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_closed": {"name": "is_closed", "description": "Whether the Budget Account has been closed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Whether the Budget Account has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payee_id": {"name": "payee_id", "description": "ID of the YNAB payee that credits this Budget Account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_reconciled_at": {"name": "last_reconciled_at", "description": "Timestamp when the Budget Account was last reconciled with the actual account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "scraped_on": {"name": "scraped_on", "description": "Timestamp when the data was last scraped from YNAB.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "providence://models/staging/spectrum/ynab/models.yml", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1684070076.47631, "relation_name": "\"mrzzy\".\"public\".\"stg_ynab_account\"", "raw_code": "--\n-- Providence\n-- Transforms\n-- DBT Analytics: YNAB Budget Account\n--\nselect\n    cast(a.id as varchar) as \"id\",\n    cast(a.name as varchar) as \"name\",\n    cast(a.\"type\" as varchar) as \"type\",\n    cast(a.on_budget as boolean) as on_budget,\n    cast(a.closed as boolean) as is_closed,\n    cast(a.deleted as boolean) as is_deleted,\n    cast(a.transfer_payee_id as varchar) as payee_id,\n    cast(a.last_reconciled_at as timestamp) as last_reconciled_at,\n    coalesce(\n        cast(s._rest_api_src_scraped_on as timestamp), {{ timestamp_min() }}\n    ) as scraped_on\nfrom {{ source(\"ynab\", \"source_ynab\") }} as s, s.data.budget.accounts as a", "language": "sql", "refs": [], "sources": [["ynab", "source_ynab"]], "metrics": [], "depends_on": {"macros": ["macro.providence.timestamp_min"], "nodes": ["source.providence.ynab.source_ynab"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/stg_ynab_account.sql", "compiled": true, "compiled_code": "--\n-- Providence\n-- Transforms\n-- DBT Analytics: YNAB Budget Account\n--\nselect\n    cast(a.id as varchar) as \"id\",\n    cast(a.name as varchar) as \"name\",\n    cast(a.\"type\" as varchar) as \"type\",\n    cast(a.on_budget as boolean) as on_budget,\n    cast(a.closed as boolean) as is_closed,\n    cast(a.deleted as boolean) as is_deleted,\n    cast(a.transfer_payee_id as varchar) as payee_id,\n    cast(a.last_reconciled_at as timestamp) as last_reconciled_at,\n    coalesce(\n        cast(s._rest_api_src_scraped_on as timestamp), cast('0001-01-01 00:00:00' as timestamp)\n    ) as scraped_on\nfrom \"mrzzy\".\"lake\".\"source_ynab\" as s, s.data.budget.accounts as a", "extra_ctes_injected": true, "extra_ctes": []}, "model.providence.stg_ynab_budget_category": {"database": "mrzzy", "schema": "public", "name": "stg_ynab_budget_category", "resource_type": "model", "package_name": "providence", "path": "staging/spectrum/ynab/stg_ynab_budget_category.sql", "original_file_path": "models/staging/spectrum/ynab/stg_ynab_budget_category.sql", "unique_id": "model.providence.stg_ynab_budget_category", "fqn": ["providence", "staging", "spectrum", "ynab", "stg_ynab_budget_category"], "alias": "stg_ynab_budget_category", "checksum": {"name": "sha256", "checksum": "bc17fd220aba86f3a9f6b5a0545bc95f9dbf40dce578578066a611443510bade"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Budget allocation category where funds are allocated in budget.", "columns": {"id": {"name": "id", "description": "YNAB assigned Budget Category ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "User assigned Budget Category name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "budget_id": {"name": "budget_id", "description": "YNAB assigned ID of the Budget this Category belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category_group_id": {"name": "category_group_id", "description": "YNAB assigned ID of the Category Group this Category belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "budget_amount": {"name": "budget_amount", "description": "Amount of money budgeted into this budget category.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "budget_month": {"name": "budget_month", "description": "The month this budget allocation was effective.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "goal_type": {"name": "goal_type", "description": "Type of goal setting selected for this budget category.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "goal_amount": {"name": "goal_amount", "description": "Target amount the user aims to set aside for this budget category.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "goal_due": {"name": "goal_due", "description": "Due date by when user aims to set aside the money for the goal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Whether the Category was deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "scraped_on": {"name": "scraped_on", "description": "Timestamp when the data was last scraped from YNAB.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "providence://models/staging/spectrum/ynab/models.yml", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1684070076.4684246, "relation_name": "\"mrzzy\".\"public\".\"stg_ynab_budget_category\"", "raw_code": "--\n-- Providence\n-- Transforms\n-- DBT Staging: YNAB budget category\n--\nselect\n    cast(c.id as varchar) as \"id\",\n    cast(c.name as varchar) as \"name\",\n    cast(s.data.budget.id as varchar) as budget_id,\n    cast(c.category_group_id as varchar) as category_group_id,\n    -- ynab expresses amounts in milliunits: 1000 milliunits = $1\n    cast(c.goal_target_month as date) as goal_due,\n    cast(c.deleted as boolean) as is_deleted,\n    cast(m.month as date) as budget_month,\n    coalesce(\n        cast(s._rest_api_src_scraped_on as timestamp), {{ timestamp_min() }}\n    ) as scraped_on,\n    cast(c.budgeted as decimal(13, 2)) / 1000 as budget_amount,\n    case\n        cast(c.goal_type as varchar)\n        when 'TB'\n        then 'Target Category Balance'\n        when 'TBD'\n        then 'Target Category Balance by Date'\n        when 'MF'\n        then 'Monthly Funding'\n        when 'NEED'\n        then 'Plan Your Spending'\n    end as goal_type,\n    cast(c.goal_target as decimal(13, 2)) / 1000 as goal_amount\nfrom\n    {{ source(\"ynab\", \"source_ynab\") }} as s,\n    s.data.budget.months as m,\n    m.categories as c", "language": "sql", "refs": [], "sources": [["ynab", "source_ynab"]], "metrics": [], "depends_on": {"macros": ["macro.providence.timestamp_min"], "nodes": ["source.providence.ynab.source_ynab"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/stg_ynab_budget_category.sql", "compiled": true, "compiled_code": "--\n-- Providence\n-- Transforms\n-- DBT Staging: YNAB budget category\n--\nselect\n    cast(c.id as varchar) as \"id\",\n    cast(c.name as varchar) as \"name\",\n    cast(s.data.budget.id as varchar) as budget_id,\n    cast(c.category_group_id as varchar) as category_group_id,\n    -- ynab expresses amounts in milliunits: 1000 milliunits = $1\n    cast(c.goal_target_month as date) as goal_due,\n    cast(c.deleted as boolean) as is_deleted,\n    cast(m.month as date) as budget_month,\n    coalesce(\n        cast(s._rest_api_src_scraped_on as timestamp), cast('0001-01-01 00:00:00' as timestamp)\n    ) as scraped_on,\n    cast(c.budgeted as decimal(13, 2)) / 1000 as budget_amount,\n    case\n        cast(c.goal_type as varchar)\n        when 'TB'\n        then 'Target Category Balance'\n        when 'TBD'\n        then 'Target Category Balance by Date'\n        when 'MF'\n        then 'Monthly Funding'\n        when 'NEED'\n        then 'Plan Your Spending'\n    end as goal_type,\n    cast(c.goal_target as decimal(13, 2)) / 1000 as goal_amount\nfrom\n    \"mrzzy\".\"lake\".\"source_ynab\" as s,\n    s.data.budget.months as m,\n    m.categories as c", "extra_ctes_injected": true, "extra_ctes": []}, "model.providence.stg_map_budget_account": {"database": "mrzzy", "schema": "public", "name": "stg_map_budget_account", "resource_type": "model", "package_name": "providence", "path": "staging/native/stg_map_budget_account.sql", "original_file_path": "models/staging/native/stg_map_budget_account.sql", "unique_id": "model.providence.stg_map_budget_account", "fqn": ["providence", "staging", "native", "stg_map_budget_account"], "alias": "stg_map_budget_account", "checksum": {"name": "sha256", "checksum": "5335e362db5b8f95c45897a66a8dc3157bc30b8c1a09c3f9ed1554d287b92b42"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Manually crafted mapping between YNAB Budget Account & a Vendor Account.", "columns": {"id": {"name": "id", "description": "Surrogate key for the Account mapping", "meta": {}, "data_type": null, "quote": null, "tags": []}, "budget_account_id": {"name": "budget_account_id", "description": "YNAB Budget Account ID to associate with the Vendor Account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor": {"name": "vendor", "description": "Name of the Vendor hosting the Vendor Account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor_id": {"name": "vendor_id", "description": "Vendor assigned ID to the Account associated with the YNAB Budget Account.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "providence://models/staging/native/models.yml", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "view"}, "created_at": 1684070076.7466047, "relation_name": "\"mrzzy\".\"public\".\"stg_map_budget_account\"", "raw_code": "--\n-- Providence\n-- Transforms\n-- DBT Staging: YNAB Budget Account Mapping\n--\nselect\n    {{ dbt_utils.generate_surrogate_key([\"budget_account_id\", \"vendor\", \"vendor_id\"]) }}\n    as \"id\",\n    cast(budget_account_id as varchar) as budget_account_id,\n    cast(vendor as varchar) as vendor,\n    cast(vendor_id as varchar) as vendor_id\nfrom {{ source(\"mapping\", \"map_account\") }}", "language": "sql", "refs": [], "sources": [["mapping", "map_account"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["source.providence.mapping.map_account"]}, "compiled_path": "target/compiled/providence/models/staging/native/stg_map_budget_account.sql", "compiled": true, "compiled_code": "--\n-- Providence\n-- Transforms\n-- DBT Staging: YNAB Budget Account Mapping\n--\nselect\n    \n    \nmd5(cast(coalesce(cast(budget_account_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(vendor as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(vendor_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT))\n    as \"id\",\n    cast(budget_account_id as varchar) as budget_account_id,\n    cast(vendor as varchar) as vendor,\n    cast(vendor_id as varchar) as vendor_id\nfrom \"mrzzy\".\"public\".\"map_account\"", "extra_ctes_injected": true, "extra_ctes": []}, "model.providence.stg_map_bank_card": {"database": "mrzzy", "schema": "public", "name": "stg_map_bank_card", "resource_type": "model", "package_name": "providence", "path": "staging/native/stg_map_bank_card.sql", "original_file_path": "models/staging/native/stg_map_bank_card.sql", "unique_id": "model.providence.stg_map_bank_card", "fqn": ["providence", "staging", "native", "stg_map_bank_card"], "alias": "stg_map_bank_card", "checksum": {"name": "sha256", "checksum": "ced6608bf88579a709cd9d052e3218711088fc550149f838767bb649f14b8df5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Manually crafted mapping between a SimplyGo Bank Card & a Vendor Account.", "columns": {"id": {"name": "id", "description": "Surrogate key for the Bank Card mapping", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bank_card_id": {"name": "bank_card_id", "description": "Bank Card ID to associate with the Vendor Account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor": {"name": "vendor", "description": "Name of the Vendor hosting the Vendor Account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor_id": {"name": "vendor_id", "description": "Vendor assigned ID to the Account to associate with the Bank Card.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "providence://models/staging/native/models.yml", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "view"}, "created_at": 1684070076.7492075, "relation_name": "\"mrzzy\".\"public\".\"stg_map_bank_card\"", "raw_code": "--\n-- Providence\n-- Transforms\n-- DBT Staging: Bank Card-Account Mapping\n--\nselect\n\n    {{ dbt_utils.generate_surrogate_key([\"bank_card_id\", \"vendor\", \"vendor_id\"]) }}\n    as \"id\",\n    cast(bank_card_id as varchar) as bank_card_id,\n    cast(vendor as varchar) as vendor,\n    cast(vendor_id as varchar) as vendor_id\nfrom {{ source(\"mapping\", \"map_bank_card\") }}", "language": "sql", "refs": [], "sources": [["mapping", "map_bank_card"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["source.providence.mapping.map_bank_card"]}, "compiled_path": "target/compiled/providence/models/staging/native/stg_map_bank_card.sql", "compiled": true, "compiled_code": "--\n-- Providence\n-- Transforms\n-- DBT Staging: Bank Card-Account Mapping\n--\nselect\n\n    \n    \nmd5(cast(coalesce(cast(bank_card_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(vendor as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(vendor_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT))\n    as \"id\",\n    cast(bank_card_id as varchar) as bank_card_id,\n    cast(vendor as varchar) as vendor,\n    cast(vendor_id as varchar) as vendor_id\nfrom \"mrzzy\".\"public\".\"map_bank_card\"", "extra_ctes_injected": true, "extra_ctes": []}, "model.providence.mart_finance_dashboard": {"database": "mrzzy", "schema": "public", "name": "mart_finance_dashboard", "resource_type": "model", "package_name": "providence", "path": "marts/finance_dashboard/mart_finance_dashboard.sql", "original_file_path": "models/marts/finance_dashboard/mart_finance_dashboard.sql", "unique_id": "model.providence.mart_finance_dashboard", "fqn": ["providence", "marts", "finance_dashboard", "mart_finance_dashboard"], "alias": "mart_finance_dashboard", "checksum": {"name": "sha256", "checksum": "2fe118072f8f658c25e47cb5d2224cf5c23d0d15c879f0490ea20a4b5f5d6f16"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "One Big Table of Accounting Transactions for populating the Finance Dashboard.", "columns": {"year_month": {"name": "year_month", "description": "Year-month when the Transaction was made.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "year_month_week": {"name": "year_month_week", "description": "Year-month-week when the Transaction was made.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_amount": {"name": "transaction_amount", "description": "Amount transacted in the Transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cash_amount": {"name": "cash_amount", "description": "Amount transacted in the Transactions on cash-like Accounts only.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Date when the Transaction was made.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_description": {"name": "transaction_description", "description": "User assigned description to the Transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_is_transfer": {"name": "transaction_is_transfer", "description": "Whether the Transaction records a trnasfer between accounts.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_clearing_status": {"name": "transaction_clearing_status", "description": "Reconciliation status of the Transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_is_cash": {"name": "account_is_cash", "description": "Whether the asset tracked by the Account has cash-like liquidity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "budget_category_group_id": {"name": "budget_category_group_id", "description": "ID of the Budget Category Group assigned to the Transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "budget_category_group": {"name": "budget_category_group", "description": "Name of the Budget Category Group assigned to the Transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "budget_category": {"name": "budget_category", "description": "Name of the Budget Category assigned to the Transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "budget_is_expense": {"name": "budget_is_expense", "description": "Whether the a Expense Budget Category was assigned to the Transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payee_name": {"name": "payee_name", "description": "Name of the Payee involved in the Transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spending": {"name": "spending", "description": "Amount spent in the Transaction as a negative value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_unaccounted": {"name": "is_unaccounted", "description": "Whether the spending is considered to be unaccounted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "income": {"name": "income", "description": "Amount gained in the Transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_passive": {"name": "is_passive", "description": "Whether the income is considered to be passively generated.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "providence://models/marts/finance_dashboard/models.yml", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1684070076.792564, "relation_name": "\"mrzzy\".\"public\".\"mart_finance_dashboard\"", "raw_code": "--\n-- Providence\n-- Transforms\n-- DBT Marts: Finance Dashboard\n--\nselect\n    d.year_month,\n    d.year_month_week,\n    -- transaction\n    t.amount as transaction_amount,\n    t.date_id as transaction_date,\n    t.description as transaction_description,\n    t.clearing_status as transaction_clearing_status,\n    a.is_cash as account_is_cash,\n    c.category_group_id as budget_category_group_id,\n    -- account\n    (case when a.is_cash then t.amount else 0 end) as cash_amount,\n    -- category\n    t.transfer_account_id is not null as transaction_is_transfer,\n    coalesce(c.category_group, 'Unknown Category Group') as budget_category_group,\n    coalesce(c.name, 'Unknown Category') as budget_category,\n    coalesce(c.is_expense, false) as budget_is_expense,\n    -- payee\n    coalesce(p.name, 'Unknown Payee') as payee_name,\n    -- spending\n    (\n        case\n            when t.amount < 0 and t.transfer_account_id is null and a.is_cash\n            then t.amount\n            else 0\n        end\n    ) as spending,\n    coalesce(p.is_unaccounted, false) as is_unaccounted,\n    -- income\n    (\n        case\n            when t.amount > 0 and t.transfer_account_id is null and a.is_cash\n            then t.amount\n            else 0\n        end\n    ) as income,\n    coalesce(p.is_passive, false) as is_passive\nfrom {{ ref(\"fact_accounting_transaction\") }} as t\nleft join {{ ref(\"dim_account\") }} as a on a.id = t.account_id\nleft join {{ ref(\"dim_date\") }} as d on d.id = t.date_id\nleft join {{ ref(\"dim_budget_category\") }} as c on c.id = t.category_id\nleft join {{ ref(\"dim_payee\") }} as p on p.id = t.payee_id", "language": "sql", "refs": [["fact_accounting_transaction"], ["dim_account"], ["dim_date"], ["dim_budget_category"], ["dim_payee"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.providence.fact_accounting_transaction", "model.providence.dim_account", "model.providence.dim_date", "model.providence.dim_budget_category", "model.providence.dim_payee"]}, "compiled_path": "target/compiled/providence/models/marts/finance_dashboard/mart_finance_dashboard.sql", "compiled": true, "compiled_code": "--\n-- Providence\n-- Transforms\n-- DBT Marts: Finance Dashboard\n--\nselect\n    d.year_month,\n    d.year_month_week,\n    -- transaction\n    t.amount as transaction_amount,\n    t.date_id as transaction_date,\n    t.description as transaction_description,\n    t.clearing_status as transaction_clearing_status,\n    a.is_cash as account_is_cash,\n    c.category_group_id as budget_category_group_id,\n    -- account\n    (case when a.is_cash then t.amount else 0 end) as cash_amount,\n    -- category\n    t.transfer_account_id is not null as transaction_is_transfer,\n    coalesce(c.category_group, 'Unknown Category Group') as budget_category_group,\n    coalesce(c.name, 'Unknown Category') as budget_category,\n    coalesce(c.is_expense, false) as budget_is_expense,\n    -- payee\n    coalesce(p.name, 'Unknown Payee') as payee_name,\n    -- spending\n    (\n        case\n            when t.amount < 0 and t.transfer_account_id is null and a.is_cash\n            then t.amount\n            else 0\n        end\n    ) as spending,\n    coalesce(p.is_unaccounted, false) as is_unaccounted,\n    -- income\n    (\n        case\n            when t.amount > 0 and t.transfer_account_id is null and a.is_cash\n            then t.amount\n            else 0\n        end\n    ) as income,\n    coalesce(p.is_passive, false) as is_passive\nfrom \"mrzzy\".\"public\".\"fact_accounting_transaction\" as t\nleft join \"mrzzy\".\"public\".\"dim_account\" as a on a.id = t.account_id\nleft join \"mrzzy\".\"public\".\"dim_date\" as d on d.id = t.date_id\nleft join \"mrzzy\".\"public\".\"dim_budget_category\" as c on c.id = t.category_id\nleft join \"mrzzy\".\"public\".\"dim_payee\" as p on p.id = t.payee_id", "extra_ctes_injected": true, "extra_ctes": []}, "model.providence.mart_finance_dashboard_cash_flow": {"database": "mrzzy", "schema": "public", "name": "mart_finance_dashboard_cash_flow", "resource_type": "model", "package_name": "providence", "path": "marts/finance_dashboard/mart_finance_dashboard_cash_flow.sql", "original_file_path": "models/marts/finance_dashboard/mart_finance_dashboard_cash_flow.sql", "unique_id": "model.providence.mart_finance_dashboard_cash_flow", "fqn": ["providence", "marts", "finance_dashboard", "mart_finance_dashboard_cash_flow"], "alias": "mart_finance_dashboard_cash_flow", "checksum": {"name": "sha256", "checksum": "7c446dfaa32f5aa03035b4bca70d6ba65d66eb319566ec47e5fa7ebbbe9fbd14"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Cash flow adjacency list for rendering Sankey Diagram in Finance Dashboard.", "columns": {"year_month": {"name": "year_month", "description": "Year-month the sankey diagram is visualising.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "src": {"name": "src", "description": "Name of the source node in the sankey diagram link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dest": {"name": "dest", "description": "Name of the destination node in the sankey diagram link.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Width of the link between source & destination nodes.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "providence://models/marts/finance_dashboard/models.yml", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1684070076.7953558, "relation_name": "\"mrzzy\".\"public\".\"mart_finance_dashboard_cash_flow\"", "raw_code": "--\n-- Providence\n-- Transforms\n-- DBT Marts: Finance Dashboard: Cash Flow for Sankey Diagram\n--\nwith\n    statistics as (\n        select\n            year_month,\n            sum(income) as total_income,\n            abs(sum(spending)) as total_spending\n        from {{ ref(\"mart_finance_dashboard\") }}\n        group by 1\n    ),\n\n    income_payees as (\n        select year_month, payee_name as src, 'Income' as dest, sum(income) as amount\n        from {{ ref(\"mart_finance_dashboard\") }}\n        group by 1, 2, 3\n    ),\n\n    spending_contributions as (\n        -- income's contribution to spending\n        select\n            year_month,\n            'Income' as src,\n            'Spending' as dest,\n            least(total_spending, total_income) as amount\n        from statistics\n        union all\n        -- saving's contribution to spending\n        select\n            year_month,\n            'Spent Savings' as src,\n            'Spending' as dest,\n            greatest(total_spending - total_income, 0) as amount\n        from statistics\n    ),\n\n    income_savings as (\n        -- income's contribution to savings\n        select\n            year_month,\n            'Income' as src,\n            'Savings' as amount,\n            greatest(total_income - total_spending, 0) as amount\n        from statistics\n    ),\n\n    spending_groups as (\n        select\n            year_month,\n            'Spending' as src,\n            budget_category_group as dest,\n            abs(sum(spending)) as amount\n        from {{ ref(\"mart_finance_dashboard\") }}\n        group by 1, 2, 3\n    ),\n\n    savings_categories as (\n        -- savings used as investment capital\n        select\n            year_month,\n            'Savings' as src,\n            'Investment' as dest,\n            -- only tabulate deductions (amount < 0) made for investment\n            abs(sum(least(transaction_amount, 0))) as amount\n        from {{ ref(\"mart_finance_dashboard\") }}\n        where\n            -- Investment Capital group\n            budget_category_group_id = '4b8aa46d-bed8-4dba-bee5-d438640d2d9d'\n            and account_is_cash\n            and transaction_is_transfer\n        group by 1, 2, 3\n        union all\n        -- savings saved as cash\n        select\n            year_month,\n            'Savings' as src,\n            'Cash' as dest,\n            sum(transaction_amount) as amount\n        from {{ ref(\"mart_finance_dashboard\") }}\n        where account_is_cash\n        group by 1, 2, 3\n    )\n\n-- compile src-dest columns for sankey diagram:\n-- income payees \\ spent savings \\  /> savings-> savings categories\n-- income payees -> income -> -------- spending -> spending category groups\nselect *\nfrom\n    (\n        select *\n        from income_payees\n        union all\n        select *\n        from spending_contributions\n        union all\n        select *\n        from income_savings\n        union all\n        select *\n        from spending_groups\n        union all\n        select *\n        from savings_categories\n    )\nwhere amount > 0", "language": "sql", "refs": [["mart_finance_dashboard"], ["mart_finance_dashboard"], ["mart_finance_dashboard"], ["mart_finance_dashboard"], ["mart_finance_dashboard"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.providence.mart_finance_dashboard", "model.providence.mart_finance_dashboard", "model.providence.mart_finance_dashboard", "model.providence.mart_finance_dashboard", "model.providence.mart_finance_dashboard"]}, "compiled_path": "target/compiled/providence/models/marts/finance_dashboard/mart_finance_dashboard_cash_flow.sql", "compiled": true, "compiled_code": "--\n-- Providence\n-- Transforms\n-- DBT Marts: Finance Dashboard: Cash Flow for Sankey Diagram\n--\nwith\n    statistics as (\n        select\n            year_month,\n            sum(income) as total_income,\n            abs(sum(spending)) as total_spending\n        from \"mrzzy\".\"public\".\"mart_finance_dashboard\"\n        group by 1\n    ),\n\n    income_payees as (\n        select year_month, payee_name as src, 'Income' as dest, sum(income) as amount\n        from \"mrzzy\".\"public\".\"mart_finance_dashboard\"\n        group by 1, 2, 3\n    ),\n\n    spending_contributions as (\n        -- income's contribution to spending\n        select\n            year_month,\n            'Income' as src,\n            'Spending' as dest,\n            least(total_spending, total_income) as amount\n        from statistics\n        union all\n        -- saving's contribution to spending\n        select\n            year_month,\n            'Spent Savings' as src,\n            'Spending' as dest,\n            greatest(total_spending - total_income, 0) as amount\n        from statistics\n    ),\n\n    income_savings as (\n        -- income's contribution to savings\n        select\n            year_month,\n            'Income' as src,\n            'Savings' as amount,\n            greatest(total_income - total_spending, 0) as amount\n        from statistics\n    ),\n\n    spending_groups as (\n        select\n            year_month,\n            'Spending' as src,\n            budget_category_group as dest,\n            abs(sum(spending)) as amount\n        from \"mrzzy\".\"public\".\"mart_finance_dashboard\"\n        group by 1, 2, 3\n    ),\n\n    savings_categories as (\n        -- savings used as investment capital\n        select\n            year_month,\n            'Savings' as src,\n            'Investment' as dest,\n            -- only tabulate deductions (amount < 0) made for investment\n            abs(sum(least(transaction_amount, 0))) as amount\n        from \"mrzzy\".\"public\".\"mart_finance_dashboard\"\n        where\n            -- Investment Capital group\n            budget_category_group_id = '4b8aa46d-bed8-4dba-bee5-d438640d2d9d'\n            and account_is_cash\n            and transaction_is_transfer\n        group by 1, 2, 3\n        union all\n        -- savings saved as cash\n        select\n            year_month,\n            'Savings' as src,\n            'Cash' as dest,\n            sum(transaction_amount) as amount\n        from \"mrzzy\".\"public\".\"mart_finance_dashboard\"\n        where account_is_cash\n        group by 1, 2, 3\n    )\n\n-- compile src-dest columns for sankey diagram:\n-- income payees \\ spent savings \\  /> savings-> savings categories\n-- income payees -> income -> -------- spending -> spending category groups\nselect *\nfrom\n    (\n        select *\n        from income_payees\n        union all\n        select *\n        from spending_contributions\n        union all\n        select *\n        from income_savings\n        union all\n        select *\n        from spending_groups\n        union all\n        select *\n        from savings_categories\n    )\nwhere amount > 0", "extra_ctes_injected": true, "extra_ctes": []}, "model.providence.mart_finance_dashboard_uncleared": {"database": "mrzzy", "schema": "public", "name": "mart_finance_dashboard_uncleared", "resource_type": "model", "package_name": "providence", "path": "marts/finance_dashboard/mart_finance_dashboard_uncleared.sql", "original_file_path": "models/marts/finance_dashboard/mart_finance_dashboard_uncleared.sql", "unique_id": "model.providence.mart_finance_dashboard_uncleared", "fqn": ["providence", "marts", "finance_dashboard", "mart_finance_dashboard_uncleared"], "alias": "mart_finance_dashboard_uncleared", "checksum": {"name": "sha256", "checksum": "6407ff6edc954722bd9bcbeaea3cac541237e7be0ee4391a244436e1364f45ff"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Uncleared Transactions for populating the Finance Dashboard.", "columns": {"transaction_date": {"name": "transaction_date", "description": "Date when the Uncleared Transaction was made.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_description": {"name": "transaction_description", "description": "User assigned description to the Uncleared Transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_amount": {"name": "transaction_amount", "description": "Amount the Uncleared Transaction is worth.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "in_accounting": {"name": "in_accounting", "description": "Whether the Uncleared Transaction is accounted for as an emoji", "meta": {}, "data_type": null, "quote": null, "tags": []}, "in_vendor": {"name": "in_vendor", "description": "Whether the Uncleared Transaction is present in the vendor account (eg. bank account) as an emoji", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "providence://models/marts/finance_dashboard/models.yml", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1684070076.7983332, "relation_name": "\"mrzzy\".\"public\".\"mart_finance_dashboard_uncleared\"", "raw_code": "--\n-- Providence\n-- Transforms\n-- DBT Marts: Finance Dashboard: Uncleared Transactions\n--\nwith\n    -- uncleared accounting transactions\n    unreconciled_accounting as (\n        -- full transactions\n        select id, date_id, account_id, description, amount\n        from {{ ref(\"fact_accounting_transaction\") }}\n        where clearing_status = 'uncleared' and super_id is null\n        union all\n        -- split transactions composed of multiple subtransactions\n        -- each split transaction will be 1 transaction on the vendor account side\n        -- group subtransactions into split transactions better matching by amount.\n        select\n            t.id,\n            t.\"date\" as date_id,\n            t.account_id,\n            t.description,\n            sum(t.amount) as amount\n        from {{ ref(\"int_unique_transaction\") }} as t\n        inner join\n            (\n                select distinct super_id from {{ ref(\"fact_accounting_transaction\") }}\n            ) as s\n            on s.super_id = t.id\n        where t.clearing_status = 'uncleared'\n        group by t.id, t.\"date\", t.account_id, t.description\n    ),\n\n    -- unreconciled vendor transactions:\n    -- any transaction since account was last reconciled.\n    unreconciled_vendor as (\n        select t.id, t.date_id, t.account_id, t.description, t.amount\n        from {{ ref(\"fact_vendor_transaction\") }} as t\n        left join {{ ref(\"dim_account\") }} as a on a.id = t.account_id\n        where t.date_id > a.last_reconciled_at\n    )\n\nselect\n    coalesce(a.date_id, v.date_id) as transaction_date,\n    coalesce(a.description, v.description) as transaction_description,\n    coalesce(a.amount, v.amount) as transaction_amount,\n    (case when a.id is not null then '\u2714\ufe0f' else '\u274c' end) as in_accounting,\n    (case when v.id is not null then '\u2714\ufe0f' else '\u274c' end) as in_vendor\n-- join possible matching transactions by amount\nfrom unreconciled_accounting as a\nfull join\n    unreconciled_vendor as v on a.account_id = v.account_id and a.amount = v.amount", "language": "sql", "refs": [["fact_accounting_transaction"], ["int_unique_transaction"], ["fact_accounting_transaction"], ["fact_vendor_transaction"], ["dim_account"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.providence.fact_accounting_transaction", "model.providence.int_unique_transaction", "model.providence.fact_accounting_transaction", "model.providence.fact_vendor_transaction", "model.providence.dim_account"]}, "compiled_path": "target/compiled/providence/models/marts/finance_dashboard/mart_finance_dashboard_uncleared.sql", "compiled": true, "compiled_code": "--\n-- Providence\n-- Transforms\n-- DBT Marts: Finance Dashboard: Uncleared Transactions\n--\nwith\n     __dbt__cte__int_unique_transaction as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Accounting Transactions\n--\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by scraped_on desc\n            ) as n_row\n        from \"mrzzy\".\"public\".\"stg_ynab_transaction\"\n    )\nwhere n_row = 1\n    )\nwhere is_deleted = false\n),-- uncleared accounting transactions\n    unreconciled_accounting as (\n        -- full transactions\n        select id, date_id, account_id, description, amount\n        from \"mrzzy\".\"public\".\"fact_accounting_transaction\"\n        where clearing_status = 'uncleared' and super_id is null\n        union all\n        -- split transactions composed of multiple subtransactions\n        -- each split transaction will be 1 transaction on the vendor account side\n        -- group subtransactions into split transactions better matching by amount.\n        select\n            t.id,\n            t.\"date\" as date_id,\n            t.account_id,\n            t.description,\n            sum(t.amount) as amount\n        from __dbt__cte__int_unique_transaction as t\n        inner join\n            (\n                select distinct super_id from \"mrzzy\".\"public\".\"fact_accounting_transaction\"\n            ) as s\n            on s.super_id = t.id\n        where t.clearing_status = 'uncleared'\n        group by t.id, t.\"date\", t.account_id, t.description\n    ),\n\n    -- unreconciled vendor transactions:\n    -- any transaction since account was last reconciled.\n    unreconciled_vendor as (\n        select t.id, t.date_id, t.account_id, t.description, t.amount\n        from \"mrzzy\".\"public\".\"fact_vendor_transaction\" as t\n        left join \"mrzzy\".\"public\".\"dim_account\" as a on a.id = t.account_id\n        where t.date_id > a.last_reconciled_at\n    )\n\nselect\n    coalesce(a.date_id, v.date_id) as transaction_date,\n    coalesce(a.description, v.description) as transaction_description,\n    coalesce(a.amount, v.amount) as transaction_amount,\n    (case when a.id is not null then '\u2714\ufe0f' else '\u274c' end) as in_accounting,\n    (case when v.id is not null then '\u2714\ufe0f' else '\u274c' end) as in_vendor\n-- join possible matching transactions by amount\nfrom unreconciled_accounting as a\nfull join\n    unreconciled_vendor as v on a.account_id = v.account_id and a.amount = v.amount", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_transaction", "sql": " __dbt__cte__int_unique_transaction as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Accounting Transactions\n--\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by scraped_on desc\n            ) as n_row\n        from \"mrzzy\".\"public\".\"stg_ynab_transaction\"\n    )\nwhere n_row = 1\n    )\nwhere is_deleted = false\n)"}]}, "model.providence.mart_ynab_sink": {"database": "mrzzy", "schema": "public", "name": "mart_ynab_sink", "resource_type": "model", "package_name": "providence", "path": "marts/ynab_sink/mart_ynab_sink.sql", "original_file_path": "models/marts/ynab_sink/mart_ynab_sink.sql", "unique_id": "model.providence.mart_ynab_sink", "fqn": ["providence", "marts", "ynab_sink", "mart_ynab_sink"], "alias": "mart_ynab_sink", "checksum": {"name": "sha256", "checksum": "aaf345ac342d2617c6cfb5cfa9605e7c78768eab73e95efb0278b3472771aa1c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Compile Transactions to be written to YNAB with the YNAB Sink.", "columns": {"import_id": {"name": "import_id", "description": "Unique Import ID to assign to the Transaction used by YNAB to deduplicate imports. Must be 36 characters or less.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "YNAB Budget Account ID to assign to the Transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Amount transacted in the transaction in YNAB milliunits as an integer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payee_id": {"name": "payee_id", "description": "YNAB Payee ID to assign to the Transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category_id": {"name": "category_id", "description": "YNAB assigned Budget Category ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "memo": {"name": "memo", "description": "Description to assign to the Transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cleared": {"name": "cleared", "description": "Reconciliation status of this Transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "approved": {"name": "approved", "description": "Whether the Transaction is approved.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "flag_color": {"name": "flag_color", "description": "Optional. Flag color to assign to the Transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "split_id": {"name": "split_id", "description": "Optional. If set Transactions with the same split ID should be created in YNAB as subtransactions in the same parent Split Transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "split_payee_id": {"name": "split_payee_id", "description": "YNAB Payee ID to assign to the parent Split Transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "split_memo": {"name": "split_memo", "description": "Description to assign to the parent Split Transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "providence://models/marts/ynab_sink/models.yml", "build_path": null, "deferred": false, "unrendered_config": {"bind": false, "materialized": "table"}, "created_at": 1684070076.879421, "relation_name": "\"mrzzy\".\"public\".\"mart_ynab_sink\"", "raw_code": "--\n-- Providence\n-- Transforms\n-- DBT Marts: YNAB Sink\n--\n-- public transport trips yet to be accounted for.\nselect\n    t.account_id,\n    t.travel_date_id as \"date\",\n    t.updated_at,\n    -- ynab expresses amounts in milliunits: $1 = 1000 milliunits\n    cast(- t.cost_sgd * 1000 as int) as amount,\n    -- SG Gov: Land Transport Authority\n    '0b849f31-3e30-4a00-8b49-053a8365133f' as payee_id,\n    -- Public Transport budget category\n    '8efad1f9-ef85-45e4-a85e-74f0207dc2c1' as category_id,\n    'uncleared' as cleared,\n    false as approved,\n    null as flag_color,\n    '0b849f31-3e30-4a00-8b49-053a8365133f' as split_payee_id,\n    t.billing_ref as split_memo,\n    -- group trips billed together in the same split_id under the same split\n    -- transaction\n    'pvd' || t.id as import_id,\n    t.source || ' -> ' || t.destination as memo,\n    -- warning: do not change, as it will break the left join below\n    'public_transport:' || t.billing_ref as split_id\nfrom {{ ref(\"fact_public_transport_trip_leg\") }} as t\nleft join {{ ref(\"fact_accounting_transaction\") }} as a on a.description = t.billing_ref\nwhere t.is_billed and a.id is null", "language": "sql", "refs": [["fact_public_transport_trip_leg"], ["fact_accounting_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.providence.fact_public_transport_trip_leg", "model.providence.fact_accounting_transaction"]}, "compiled_path": "target/compiled/providence/models/marts/ynab_sink/mart_ynab_sink.sql", "compiled": true, "compiled_code": "--\n-- Providence\n-- Transforms\n-- DBT Marts: YNAB Sink\n--\n-- public transport trips yet to be accounted for.\nselect\n    t.account_id,\n    t.travel_date_id as \"date\",\n    t.updated_at,\n    -- ynab expresses amounts in milliunits: $1 = 1000 milliunits\n    cast(- t.cost_sgd * 1000 as int) as amount,\n    -- SG Gov: Land Transport Authority\n    '0b849f31-3e30-4a00-8b49-053a8365133f' as payee_id,\n    -- Public Transport budget category\n    '8efad1f9-ef85-45e4-a85e-74f0207dc2c1' as category_id,\n    'uncleared' as cleared,\n    false as approved,\n    null as flag_color,\n    '0b849f31-3e30-4a00-8b49-053a8365133f' as split_payee_id,\n    t.billing_ref as split_memo,\n    -- group trips billed together in the same split_id under the same split\n    -- transaction\n    'pvd' || t.id as import_id,\n    t.source || ' -> ' || t.destination as memo,\n    -- warning: do not change, as it will break the left join below\n    'public_transport:' || t.billing_ref as split_id\nfrom \"mrzzy\".\"public\".\"fact_public_transport_trip_leg\" as t\nleft join \"mrzzy\".\"public\".\"fact_accounting_transaction\" as a on a.description = t.billing_ref\nwhere t.is_billed and a.id is null", "extra_ctes_injected": true, "extra_ctes": []}, "test.providence.assert_sum_bank_transaction_amount_eq_account_balance": {"database": "mrzzy", "schema": "public_dbt_test__audit", "name": "assert_sum_bank_transaction_amount_eq_account_balance", "resource_type": "test", "package_name": "providence", "path": "assert_sum_bank_transaction_amount_eq_account_balance.sql", "original_file_path": "tests/assert_sum_bank_transaction_amount_eq_account_balance.sql", "unique_id": "test.providence.assert_sum_bank_transaction_amount_eq_account_balance", "fqn": ["providence", "assert_sum_bank_transaction_amount_eq_account_balance"], "alias": "assert_sum_bank_transaction_amount_eq_account_balance", "checksum": {"name": "sha256", "checksum": "aba0c885740a688e36e049120281da4bfca316c53e376ee324bffef3a2daa482"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.6069822, "relation_name": null, "raw_code": "--\n-- Providence\n-- Transforms\n-- DBT Test: Sum of Bank Transaction amounts equate Bank Account balance\n--\nwith\n    expected_balances as (\n        select account_id, balance, processed_on\n        from\n            (\n                {{\n                    deduplicate(\n                        relation=ref(\"int_unique_enriched_bank_statement\"),\n                        partition_by=\"account_id\",\n                        order_by=\"processed_on desc\",\n                        n_row_col=\"_n_row_account\",\n                    )\n                }}\n            )\n    ),\n\n    actual_balances as (\n        select account_id, sum(amount) as balance\n        from {{ ref(\"fact_vendor_transaction\") }}\n        group by account_id\n    )\n\nselect e.balance as expected, a.balance as actual\nfrom expected_balances as e\nleft join actual_balances as a on a.account_id = e.account_id\nwhere a.balance != a.balance", "language": "sql", "refs": [["int_unique_enriched_bank_statement"], ["fact_vendor_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.providence.deduplicate"], "nodes": ["model.providence.int_unique_enriched_bank_statement", "model.providence.fact_vendor_transaction"]}, "compiled_path": "target/compiled/providence/tests/assert_sum_bank_transaction_amount_eq_account_balance.sql", "compiled": true, "compiled_code": "--\n-- Providence\n-- Transforms\n-- DBT Test: Sum of Bank Transaction amounts equate Bank Account balance\n--\nwith\n     __dbt__cte__int_unique_enriched_bank_statement as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Enriched Bank Statement\n--\nwith\n    keyed_statement as (\n        select\n            \n    \nmd5(cast(coalesce(cast(account_no as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transacted_on as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(description as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\", *\n        from \"mrzzy\".\"public\".\"stg_uob_statement\"\n    ),\n\n    unique_statement as (\n        (\n            select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by processed_on desc\n            ) as n_row\n        from keyed_statement\n    )\nwhere n_row = 1\n        )\n    )\n\n-- enrich statement with account dimension\nselect t.*, a.id as account_id\nfrom unique_statement as t\nleft join \"mrzzy\".\"public\".\"dim_account\" as a on a.vendor_id = t.account_no\n),expected_balances as (\n        select account_id, balance, processed_on\n        from\n            (\n                select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by account_id order by processed_on desc\n            ) as _n_row_account\n        from __dbt__cte__int_unique_enriched_bank_statement\n    )\nwhere _n_row_account = 1\n            )\n    ),\n\n    actual_balances as (\n        select account_id, sum(amount) as balance\n        from \"mrzzy\".\"public\".\"fact_vendor_transaction\"\n        group by account_id\n    )\n\nselect e.balance as expected, a.balance as actual\nfrom expected_balances as e\nleft join actual_balances as a on a.account_id = e.account_id\nwhere a.balance != a.balance", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_enriched_bank_statement", "sql": " __dbt__cte__int_unique_enriched_bank_statement as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Enriched Bank Statement\n--\nwith\n    keyed_statement as (\n        select\n            \n    \nmd5(cast(coalesce(cast(account_no as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transacted_on as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(description as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\", *\n        from \"mrzzy\".\"public\".\"stg_uob_statement\"\n    ),\n\n    unique_statement as (\n        (\n            select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by processed_on desc\n            ) as n_row\n        from keyed_statement\n    )\nwhere n_row = 1\n        )\n    )\n\n-- enrich statement with account dimension\nselect t.*, a.id as account_id\nfrom unique_statement as t\nleft join \"mrzzy\".\"public\".\"dim_account\" as a on a.vendor_id = t.account_no\n)"}]}, "seed.providence.ynab_payee_flag": {"database": "mrzzy", "schema": "public", "name": "ynab_payee_flag", "resource_type": "seed", "package_name": "providence", "path": "ynab_payee_flag.csv", "original_file_path": "seeds/ynab_payee_flag.csv", "unique_id": "seed.providence.ynab_payee_flag", "fqn": ["providence", "ynab_payee_flag"], "alias": "ynab_payee_flag", "checksum": {"name": "sha256", "checksum": "53de702587d34c4fdde8f7b48d0fc4b6ea9d2936a5e9025b20af5b5c863e2b9d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"payee_id": "varchar", "payee_name": "varchar", "is_unaccounted": "boolean", "is_passive": "boolean"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Flags associated transactions made with specific YNAB Payees", "columns": {"payee_id": {"name": "payee_id", "description": "ID of the associated YNAB Payee", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payee_name": {"name": "payee_name", "description": "Name of the YNAB payee for documentation purposes only. The name in the stg_ynab_payee model is considered to source of truth.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_unaccounted": {"name": "is_unaccounted", "description": "Whether transactions made with this YNAB Payee is considered unaccounted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_passive": {"name": "is_passive", "description": "Whether transactions made this YNAB Payee is considered passive income.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "providence://seeds/seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"payee_id": "varchar", "payee_name": "varchar", "is_unaccounted": "boolean", "is_passive": "boolean"}}, "created_at": 1684070076.9432323, "relation_name": "\"mrzzy\".\"public\".\"ynab_payee_flag\"", "raw_code": "", "root_path": "/home/runner/work/providence/providence/transforms/dbt", "depends_on": {"macros": []}}, "test.providence.unique_int_unique_budget_category_id.6c900d0e93": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('int_unique_budget_category')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "unique_int_unique_budget_category_id", "resource_type": "test", "package_name": "providence", "path": "unique_int_unique_budget_category_id.sql", "original_file_path": "models/intermediate/transforms/models.yml", "unique_id": "test.providence.unique_int_unique_budget_category_id.6c900d0e93", "fqn": ["providence", "intermediate", "transforms", "unique_int_unique_budget_category_id"], "alias": "unique_int_unique_budget_category_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.6888437, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_unique_budget_category"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.int_unique_budget_category"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/models.yml/unique_int_unique_budget_category_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith __dbt__cte__int_unique_budget_category as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Budget Categories\n--\nwith\n    duplicated_categories as (\n        select\n            \n    \nmd5(cast(coalesce(cast(id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(budget_month as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\",\n            id as category_id,\n            scraped_on as updated_at,\n            \"name\",\n  \"budget_id\",\n  \"category_group_id\",\n  \"goal_due\",\n  \"is_deleted\",\n  \"budget_month\",\n  \"budget_amount\",\n  \"goal_type\",\n  \"goal_amount\"\n        from \"mrzzy\".\"public\".\"stg_ynab_budget_category\"\n    )\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by updated_at desc\n            ) as n_row\n        from duplicated_categories\n    )\nwhere n_row = 1\n    )\n)select\n    id as unique_field,\n    count(*) as n_records\n\nfrom __dbt__cte__int_unique_budget_category\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_budget_category", "sql": " __dbt__cte__int_unique_budget_category as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Budget Categories\n--\nwith\n    duplicated_categories as (\n        select\n            \n    \nmd5(cast(coalesce(cast(id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(budget_month as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\",\n            id as category_id,\n            scraped_on as updated_at,\n            \"name\",\n  \"budget_id\",\n  \"category_group_id\",\n  \"goal_due\",\n  \"is_deleted\",\n  \"budget_month\",\n  \"budget_amount\",\n  \"goal_type\",\n  \"goal_amount\"\n        from \"mrzzy\".\"public\".\"stg_ynab_budget_category\"\n    )\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by updated_at desc\n            ) as n_row\n        from duplicated_categories\n    )\nwhere n_row = 1\n    )\n)"}], "column_name": "id", "file_key_name": "models.int_unique_budget_category"}, "test.providence.not_null_int_unique_budget_category_id.30b665b0b2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('int_unique_budget_category')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_int_unique_budget_category_id", "resource_type": "test", "package_name": "providence", "path": "not_null_int_unique_budget_category_id.sql", "original_file_path": "models/intermediate/transforms/models.yml", "unique_id": "test.providence.not_null_int_unique_budget_category_id.30b665b0b2", "fqn": ["providence", "intermediate", "transforms", "not_null_int_unique_budget_category_id"], "alias": "not_null_int_unique_budget_category_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.6912751, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_unique_budget_category"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.int_unique_budget_category"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/models.yml/not_null_int_unique_budget_category_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_unique_budget_category as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Budget Categories\n--\nwith\n    duplicated_categories as (\n        select\n            \n    \nmd5(cast(coalesce(cast(id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(budget_month as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\",\n            id as category_id,\n            scraped_on as updated_at,\n            \"name\",\n  \"budget_id\",\n  \"category_group_id\",\n  \"goal_due\",\n  \"is_deleted\",\n  \"budget_month\",\n  \"budget_amount\",\n  \"goal_type\",\n  \"goal_amount\"\n        from \"mrzzy\".\"public\".\"stg_ynab_budget_category\"\n    )\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by updated_at desc\n            ) as n_row\n        from duplicated_categories\n    )\nwhere n_row = 1\n    )\n)select id\nfrom __dbt__cte__int_unique_budget_category\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_budget_category", "sql": " __dbt__cte__int_unique_budget_category as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Budget Categories\n--\nwith\n    duplicated_categories as (\n        select\n            \n    \nmd5(cast(coalesce(cast(id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(budget_month as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\",\n            id as category_id,\n            scraped_on as updated_at,\n            \"name\",\n  \"budget_id\",\n  \"category_group_id\",\n  \"goal_due\",\n  \"is_deleted\",\n  \"budget_month\",\n  \"budget_amount\",\n  \"goal_type\",\n  \"goal_amount\"\n        from \"mrzzy\".\"public\".\"stg_ynab_budget_category\"\n    )\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by updated_at desc\n            ) as n_row\n        from duplicated_categories\n    )\nwhere n_row = 1\n    )\n)"}], "column_name": "id", "file_key_name": "models.int_unique_budget_category"}, "test.providence.not_null_int_unique_budget_category_budget_id.b98915ceea": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "budget_id", "model": "{{ get_where_subquery(ref('int_unique_budget_category')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_int_unique_budget_category_budget_id", "resource_type": "test", "package_name": "providence", "path": "not_null_int_unique_budget_category_budget_id.sql", "original_file_path": "models/intermediate/transforms/models.yml", "unique_id": "test.providence.not_null_int_unique_budget_category_budget_id.b98915ceea", "fqn": ["providence", "intermediate", "transforms", "not_null_int_unique_budget_category_budget_id"], "alias": "not_null_int_unique_budget_category_budget_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.6935067, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_unique_budget_category"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.int_unique_budget_category"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/models.yml/not_null_int_unique_budget_category_budget_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_unique_budget_category as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Budget Categories\n--\nwith\n    duplicated_categories as (\n        select\n            \n    \nmd5(cast(coalesce(cast(id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(budget_month as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\",\n            id as category_id,\n            scraped_on as updated_at,\n            \"name\",\n  \"budget_id\",\n  \"category_group_id\",\n  \"goal_due\",\n  \"is_deleted\",\n  \"budget_month\",\n  \"budget_amount\",\n  \"goal_type\",\n  \"goal_amount\"\n        from \"mrzzy\".\"public\".\"stg_ynab_budget_category\"\n    )\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by updated_at desc\n            ) as n_row\n        from duplicated_categories\n    )\nwhere n_row = 1\n    )\n)select budget_id\nfrom __dbt__cte__int_unique_budget_category\nwhere budget_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_budget_category", "sql": " __dbt__cte__int_unique_budget_category as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Budget Categories\n--\nwith\n    duplicated_categories as (\n        select\n            \n    \nmd5(cast(coalesce(cast(id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(budget_month as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\",\n            id as category_id,\n            scraped_on as updated_at,\n            \"name\",\n  \"budget_id\",\n  \"category_group_id\",\n  \"goal_due\",\n  \"is_deleted\",\n  \"budget_month\",\n  \"budget_amount\",\n  \"goal_type\",\n  \"goal_amount\"\n        from \"mrzzy\".\"public\".\"stg_ynab_budget_category\"\n    )\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by updated_at desc\n            ) as n_row\n        from duplicated_categories\n    )\nwhere n_row = 1\n    )\n)"}], "column_name": "budget_id", "file_key_name": "models.int_unique_budget_category"}, "test.providence.relationships_int_unique_budget_category_budget_id__id__ref_stg_ynab_budget_.908b88912b": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref(\"stg_ynab_budget\")", "field": "id", "column_name": "budget_id", "model": "{{ get_where_subquery(ref('int_unique_budget_category')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "relationships_int_unique_budget_category_budget_id__id__ref_stg_ynab_budget_", "resource_type": "test", "package_name": "providence", "path": "relationships_int_unique_budge_fa419a6eb3ac907143cd4f03f7057013.sql", "original_file_path": "models/intermediate/transforms/models.yml", "unique_id": "test.providence.relationships_int_unique_budget_category_budget_id__id__ref_stg_ynab_budget_.908b88912b", "fqn": ["providence", "intermediate", "transforms", "relationships_int_unique_budget_category_budget_id__id__ref_stg_ynab_budget_"], "alias": "relationships_int_unique_budge_fa419a6eb3ac907143cd4f03f7057013", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_int_unique_budge_fa419a6eb3ac907143cd4f03f7057013", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_int_unique_budge_fa419a6eb3ac907143cd4f03f7057013"}, "created_at": 1684070075.6957402, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_int_unique_budge_fa419a6eb3ac907143cd4f03f7057013\") }}", "language": "sql", "refs": [["stg_ynab_budget"], ["int_unique_budget_category"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_budget", "model.providence.int_unique_budget_category"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/models.yml/relationships_int_unique_budge_fa419a6eb3ac907143cd4f03f7057013.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith  __dbt__cte__int_unique_budget_category as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Budget Categories\n--\nwith\n    duplicated_categories as (\n        select\n            \n    \nmd5(cast(coalesce(cast(id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(budget_month as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\",\n            id as category_id,\n            scraped_on as updated_at,\n            \"name\",\n  \"budget_id\",\n  \"category_group_id\",\n  \"goal_due\",\n  \"is_deleted\",\n  \"budget_month\",\n  \"budget_amount\",\n  \"goal_type\",\n  \"goal_amount\"\n        from \"mrzzy\".\"public\".\"stg_ynab_budget_category\"\n    )\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by updated_at desc\n            ) as n_row\n        from duplicated_categories\n    )\nwhere n_row = 1\n    )\n),child as (\n    select budget_id as from_field\n    from __dbt__cte__int_unique_budget_category\n    where budget_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"mrzzy\".\"public\".\"stg_ynab_budget\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_budget_category", "sql": " __dbt__cte__int_unique_budget_category as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Budget Categories\n--\nwith\n    duplicated_categories as (\n        select\n            \n    \nmd5(cast(coalesce(cast(id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(budget_month as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\",\n            id as category_id,\n            scraped_on as updated_at,\n            \"name\",\n  \"budget_id\",\n  \"category_group_id\",\n  \"goal_due\",\n  \"is_deleted\",\n  \"budget_month\",\n  \"budget_amount\",\n  \"goal_type\",\n  \"goal_amount\"\n        from \"mrzzy\".\"public\".\"stg_ynab_budget_category\"\n    )\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by updated_at desc\n            ) as n_row\n        from duplicated_categories\n    )\nwhere n_row = 1\n    )\n)"}], "column_name": "budget_id", "file_key_name": "models.int_unique_budget_category"}, "test.providence.not_null_int_unique_budget_category_category_id.9ac0e3c686": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "category_id", "model": "{{ get_where_subquery(ref('int_unique_budget_category')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_int_unique_budget_category_category_id", "resource_type": "test", "package_name": "providence", "path": "not_null_int_unique_budget_category_category_id.sql", "original_file_path": "models/intermediate/transforms/models.yml", "unique_id": "test.providence.not_null_int_unique_budget_category_category_id.9ac0e3c686", "fqn": ["providence", "intermediate", "transforms", "not_null_int_unique_budget_category_category_id"], "alias": "not_null_int_unique_budget_category_category_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.709692, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_unique_budget_category"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.int_unique_budget_category"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/models.yml/not_null_int_unique_budget_category_category_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_unique_budget_category as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Budget Categories\n--\nwith\n    duplicated_categories as (\n        select\n            \n    \nmd5(cast(coalesce(cast(id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(budget_month as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\",\n            id as category_id,\n            scraped_on as updated_at,\n            \"name\",\n  \"budget_id\",\n  \"category_group_id\",\n  \"goal_due\",\n  \"is_deleted\",\n  \"budget_month\",\n  \"budget_amount\",\n  \"goal_type\",\n  \"goal_amount\"\n        from \"mrzzy\".\"public\".\"stg_ynab_budget_category\"\n    )\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by updated_at desc\n            ) as n_row\n        from duplicated_categories\n    )\nwhere n_row = 1\n    )\n)select category_id\nfrom __dbt__cte__int_unique_budget_category\nwhere category_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_budget_category", "sql": " __dbt__cte__int_unique_budget_category as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Budget Categories\n--\nwith\n    duplicated_categories as (\n        select\n            \n    \nmd5(cast(coalesce(cast(id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(budget_month as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\",\n            id as category_id,\n            scraped_on as updated_at,\n            \"name\",\n  \"budget_id\",\n  \"category_group_id\",\n  \"goal_due\",\n  \"is_deleted\",\n  \"budget_month\",\n  \"budget_amount\",\n  \"goal_type\",\n  \"goal_amount\"\n        from \"mrzzy\".\"public\".\"stg_ynab_budget_category\"\n    )\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by updated_at desc\n            ) as n_row\n        from duplicated_categories\n    )\nwhere n_row = 1\n    )\n)"}], "column_name": "category_id", "file_key_name": "models.int_unique_budget_category"}, "test.providence.not_null_int_unique_budget_category_name.782a7b0adc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('int_unique_budget_category')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_int_unique_budget_category_name", "resource_type": "test", "package_name": "providence", "path": "not_null_int_unique_budget_category_name.sql", "original_file_path": "models/intermediate/transforms/models.yml", "unique_id": "test.providence.not_null_int_unique_budget_category_name.782a7b0adc", "fqn": ["providence", "intermediate", "transforms", "not_null_int_unique_budget_category_name"], "alias": "not_null_int_unique_budget_category_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.7118564, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_unique_budget_category"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.int_unique_budget_category"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/models.yml/not_null_int_unique_budget_category_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_unique_budget_category as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Budget Categories\n--\nwith\n    duplicated_categories as (\n        select\n            \n    \nmd5(cast(coalesce(cast(id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(budget_month as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\",\n            id as category_id,\n            scraped_on as updated_at,\n            \"name\",\n  \"budget_id\",\n  \"category_group_id\",\n  \"goal_due\",\n  \"is_deleted\",\n  \"budget_month\",\n  \"budget_amount\",\n  \"goal_type\",\n  \"goal_amount\"\n        from \"mrzzy\".\"public\".\"stg_ynab_budget_category\"\n    )\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by updated_at desc\n            ) as n_row\n        from duplicated_categories\n    )\nwhere n_row = 1\n    )\n)select name\nfrom __dbt__cte__int_unique_budget_category\nwhere name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_budget_category", "sql": " __dbt__cte__int_unique_budget_category as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Budget Categories\n--\nwith\n    duplicated_categories as (\n        select\n            \n    \nmd5(cast(coalesce(cast(id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(budget_month as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\",\n            id as category_id,\n            scraped_on as updated_at,\n            \"name\",\n  \"budget_id\",\n  \"category_group_id\",\n  \"goal_due\",\n  \"is_deleted\",\n  \"budget_month\",\n  \"budget_amount\",\n  \"goal_type\",\n  \"goal_amount\"\n        from \"mrzzy\".\"public\".\"stg_ynab_budget_category\"\n    )\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by updated_at desc\n            ) as n_row\n        from duplicated_categories\n    )\nwhere n_row = 1\n    )\n)"}], "column_name": "name", "file_key_name": "models.int_unique_budget_category"}, "test.providence.not_null_int_unique_budget_category_category_group_id.d241f6f8ec": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "category_group_id", "model": "{{ get_where_subquery(ref('int_unique_budget_category')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_int_unique_budget_category_category_group_id", "resource_type": "test", "package_name": "providence", "path": "not_null_int_unique_budget_category_category_group_id.sql", "original_file_path": "models/intermediate/transforms/models.yml", "unique_id": "test.providence.not_null_int_unique_budget_category_category_group_id.d241f6f8ec", "fqn": ["providence", "intermediate", "transforms", "not_null_int_unique_budget_category_category_group_id"], "alias": "not_null_int_unique_budget_category_category_group_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.7139456, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_unique_budget_category"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.int_unique_budget_category"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/models.yml/not_null_int_unique_budget_category_category_group_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_unique_budget_category as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Budget Categories\n--\nwith\n    duplicated_categories as (\n        select\n            \n    \nmd5(cast(coalesce(cast(id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(budget_month as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\",\n            id as category_id,\n            scraped_on as updated_at,\n            \"name\",\n  \"budget_id\",\n  \"category_group_id\",\n  \"goal_due\",\n  \"is_deleted\",\n  \"budget_month\",\n  \"budget_amount\",\n  \"goal_type\",\n  \"goal_amount\"\n        from \"mrzzy\".\"public\".\"stg_ynab_budget_category\"\n    )\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by updated_at desc\n            ) as n_row\n        from duplicated_categories\n    )\nwhere n_row = 1\n    )\n)select category_group_id\nfrom __dbt__cte__int_unique_budget_category\nwhere category_group_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_budget_category", "sql": " __dbt__cte__int_unique_budget_category as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Budget Categories\n--\nwith\n    duplicated_categories as (\n        select\n            \n    \nmd5(cast(coalesce(cast(id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(budget_month as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\",\n            id as category_id,\n            scraped_on as updated_at,\n            \"name\",\n  \"budget_id\",\n  \"category_group_id\",\n  \"goal_due\",\n  \"is_deleted\",\n  \"budget_month\",\n  \"budget_amount\",\n  \"goal_type\",\n  \"goal_amount\"\n        from \"mrzzy\".\"public\".\"stg_ynab_budget_category\"\n    )\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by updated_at desc\n            ) as n_row\n        from duplicated_categories\n    )\nwhere n_row = 1\n    )\n)"}], "column_name": "category_group_id", "file_key_name": "models.int_unique_budget_category"}, "test.providence.not_null_int_unique_budget_category_is_deleted.5762ff5711": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_deleted", "model": "{{ get_where_subquery(ref('int_unique_budget_category')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_int_unique_budget_category_is_deleted", "resource_type": "test", "package_name": "providence", "path": "not_null_int_unique_budget_category_is_deleted.sql", "original_file_path": "models/intermediate/transforms/models.yml", "unique_id": "test.providence.not_null_int_unique_budget_category_is_deleted.5762ff5711", "fqn": ["providence", "intermediate", "transforms", "not_null_int_unique_budget_category_is_deleted"], "alias": "not_null_int_unique_budget_category_is_deleted", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.7160985, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_unique_budget_category"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.int_unique_budget_category"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/models.yml/not_null_int_unique_budget_category_is_deleted.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_unique_budget_category as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Budget Categories\n--\nwith\n    duplicated_categories as (\n        select\n            \n    \nmd5(cast(coalesce(cast(id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(budget_month as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\",\n            id as category_id,\n            scraped_on as updated_at,\n            \"name\",\n  \"budget_id\",\n  \"category_group_id\",\n  \"goal_due\",\n  \"is_deleted\",\n  \"budget_month\",\n  \"budget_amount\",\n  \"goal_type\",\n  \"goal_amount\"\n        from \"mrzzy\".\"public\".\"stg_ynab_budget_category\"\n    )\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by updated_at desc\n            ) as n_row\n        from duplicated_categories\n    )\nwhere n_row = 1\n    )\n)select is_deleted\nfrom __dbt__cte__int_unique_budget_category\nwhere is_deleted is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_budget_category", "sql": " __dbt__cte__int_unique_budget_category as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Budget Categories\n--\nwith\n    duplicated_categories as (\n        select\n            \n    \nmd5(cast(coalesce(cast(id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(budget_month as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\",\n            id as category_id,\n            scraped_on as updated_at,\n            \"name\",\n  \"budget_id\",\n  \"category_group_id\",\n  \"goal_due\",\n  \"is_deleted\",\n  \"budget_month\",\n  \"budget_amount\",\n  \"goal_type\",\n  \"goal_amount\"\n        from \"mrzzy\".\"public\".\"stg_ynab_budget_category\"\n    )\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by updated_at desc\n            ) as n_row\n        from duplicated_categories\n    )\nwhere n_row = 1\n    )\n)"}], "column_name": "is_deleted", "file_key_name": "models.int_unique_budget_category"}, "test.providence.not_null_int_unique_budget_category_budget_amount.e7ca554d6e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "budget_amount", "model": "{{ get_where_subquery(ref('int_unique_budget_category')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_int_unique_budget_category_budget_amount", "resource_type": "test", "package_name": "providence", "path": "not_null_int_unique_budget_category_budget_amount.sql", "original_file_path": "models/intermediate/transforms/models.yml", "unique_id": "test.providence.not_null_int_unique_budget_category_budget_amount.e7ca554d6e", "fqn": ["providence", "intermediate", "transforms", "not_null_int_unique_budget_category_budget_amount"], "alias": "not_null_int_unique_budget_category_budget_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.7185528, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_unique_budget_category"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.int_unique_budget_category"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/models.yml/not_null_int_unique_budget_category_budget_amount.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_unique_budget_category as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Budget Categories\n--\nwith\n    duplicated_categories as (\n        select\n            \n    \nmd5(cast(coalesce(cast(id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(budget_month as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\",\n            id as category_id,\n            scraped_on as updated_at,\n            \"name\",\n  \"budget_id\",\n  \"category_group_id\",\n  \"goal_due\",\n  \"is_deleted\",\n  \"budget_month\",\n  \"budget_amount\",\n  \"goal_type\",\n  \"goal_amount\"\n        from \"mrzzy\".\"public\".\"stg_ynab_budget_category\"\n    )\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by updated_at desc\n            ) as n_row\n        from duplicated_categories\n    )\nwhere n_row = 1\n    )\n)select budget_amount\nfrom __dbt__cte__int_unique_budget_category\nwhere budget_amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_budget_category", "sql": " __dbt__cte__int_unique_budget_category as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Budget Categories\n--\nwith\n    duplicated_categories as (\n        select\n            \n    \nmd5(cast(coalesce(cast(id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(budget_month as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\",\n            id as category_id,\n            scraped_on as updated_at,\n            \"name\",\n  \"budget_id\",\n  \"category_group_id\",\n  \"goal_due\",\n  \"is_deleted\",\n  \"budget_month\",\n  \"budget_amount\",\n  \"goal_type\",\n  \"goal_amount\"\n        from \"mrzzy\".\"public\".\"stg_ynab_budget_category\"\n    )\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by updated_at desc\n            ) as n_row\n        from duplicated_categories\n    )\nwhere n_row = 1\n    )\n)"}], "column_name": "budget_amount", "file_key_name": "models.int_unique_budget_category"}, "test.providence.not_null_int_unique_budget_category_budget_month.2a97219788": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "budget_month", "model": "{{ get_where_subquery(ref('int_unique_budget_category')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_int_unique_budget_category_budget_month", "resource_type": "test", "package_name": "providence", "path": "not_null_int_unique_budget_category_budget_month.sql", "original_file_path": "models/intermediate/transforms/models.yml", "unique_id": "test.providence.not_null_int_unique_budget_category_budget_month.2a97219788", "fqn": ["providence", "intermediate", "transforms", "not_null_int_unique_budget_category_budget_month"], "alias": "not_null_int_unique_budget_category_budget_month", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.7206664, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_unique_budget_category"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.int_unique_budget_category"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/models.yml/not_null_int_unique_budget_category_budget_month.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_unique_budget_category as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Budget Categories\n--\nwith\n    duplicated_categories as (\n        select\n            \n    \nmd5(cast(coalesce(cast(id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(budget_month as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\",\n            id as category_id,\n            scraped_on as updated_at,\n            \"name\",\n  \"budget_id\",\n  \"category_group_id\",\n  \"goal_due\",\n  \"is_deleted\",\n  \"budget_month\",\n  \"budget_amount\",\n  \"goal_type\",\n  \"goal_amount\"\n        from \"mrzzy\".\"public\".\"stg_ynab_budget_category\"\n    )\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by updated_at desc\n            ) as n_row\n        from duplicated_categories\n    )\nwhere n_row = 1\n    )\n)select budget_month\nfrom __dbt__cte__int_unique_budget_category\nwhere budget_month is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_budget_category", "sql": " __dbt__cte__int_unique_budget_category as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Budget Categories\n--\nwith\n    duplicated_categories as (\n        select\n            \n    \nmd5(cast(coalesce(cast(id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(budget_month as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\",\n            id as category_id,\n            scraped_on as updated_at,\n            \"name\",\n  \"budget_id\",\n  \"category_group_id\",\n  \"goal_due\",\n  \"is_deleted\",\n  \"budget_month\",\n  \"budget_amount\",\n  \"goal_type\",\n  \"goal_amount\"\n        from \"mrzzy\".\"public\".\"stg_ynab_budget_category\"\n    )\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by updated_at desc\n            ) as n_row\n        from duplicated_categories\n    )\nwhere n_row = 1\n    )\n)"}], "column_name": "budget_month", "file_key_name": "models.int_unique_budget_category"}, "test.providence.accepted_values_int_unique_budget_category_goal_type__Target_Category_Balance__Target_Category_Balance_by_Date__Monthly_Funding__Plan_Your_Spending.45e0ec7ee8": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Target Category Balance", "Target Category Balance by Date", "Monthly Funding", "Plan Your Spending"], "column_name": "goal_type", "model": "{{ get_where_subquery(ref('int_unique_budget_category')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "accepted_values_int_unique_budget_category_goal_type__Target_Category_Balance__Target_Category_Balance_by_Date__Monthly_Funding__Plan_Your_Spending", "resource_type": "test", "package_name": "providence", "path": "accepted_values_int_unique_bud_6a1827a5974575c819ae5f0cacc86b52.sql", "original_file_path": "models/intermediate/transforms/models.yml", "unique_id": "test.providence.accepted_values_int_unique_budget_category_goal_type__Target_Category_Balance__Target_Category_Balance_by_Date__Monthly_Funding__Plan_Your_Spending.45e0ec7ee8", "fqn": ["providence", "intermediate", "transforms", "accepted_values_int_unique_budget_category_goal_type__Target_Category_Balance__Target_Category_Balance_by_Date__Monthly_Funding__Plan_Your_Spending"], "alias": "accepted_values_int_unique_bud_6a1827a5974575c819ae5f0cacc86b52", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_int_unique_bud_6a1827a5974575c819ae5f0cacc86b52", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_int_unique_bud_6a1827a5974575c819ae5f0cacc86b52"}, "created_at": 1684070075.7228053, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_int_unique_bud_6a1827a5974575c819ae5f0cacc86b52\") }}", "language": "sql", "refs": [["int_unique_budget_category"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.int_unique_budget_category"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/models.yml/accepted_values_int_unique_bud_6a1827a5974575c819ae5f0cacc86b52.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith  __dbt__cte__int_unique_budget_category as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Budget Categories\n--\nwith\n    duplicated_categories as (\n        select\n            \n    \nmd5(cast(coalesce(cast(id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(budget_month as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\",\n            id as category_id,\n            scraped_on as updated_at,\n            \"name\",\n  \"budget_id\",\n  \"category_group_id\",\n  \"goal_due\",\n  \"is_deleted\",\n  \"budget_month\",\n  \"budget_amount\",\n  \"goal_type\",\n  \"goal_amount\"\n        from \"mrzzy\".\"public\".\"stg_ynab_budget_category\"\n    )\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by updated_at desc\n            ) as n_row\n        from duplicated_categories\n    )\nwhere n_row = 1\n    )\n),all_values as (\n\n    select\n        goal_type as value_field,\n        count(*) as n_records\n\n    from __dbt__cte__int_unique_budget_category\n    group by goal_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Target Category Balance','Target Category Balance by Date','Monthly Funding','Plan Your Spending'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_budget_category", "sql": " __dbt__cte__int_unique_budget_category as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Budget Categories\n--\nwith\n    duplicated_categories as (\n        select\n            \n    \nmd5(cast(coalesce(cast(id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(budget_month as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\",\n            id as category_id,\n            scraped_on as updated_at,\n            \"name\",\n  \"budget_id\",\n  \"category_group_id\",\n  \"goal_due\",\n  \"is_deleted\",\n  \"budget_month\",\n  \"budget_amount\",\n  \"goal_type\",\n  \"goal_amount\"\n        from \"mrzzy\".\"public\".\"stg_ynab_budget_category\"\n    )\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by updated_at desc\n            ) as n_row\n        from duplicated_categories\n    )\nwhere n_row = 1\n    )\n)"}], "column_name": "goal_type", "file_key_name": "models.int_unique_budget_category"}, "test.providence.not_null_int_unique_budget_category_updated_at.3f6f47730e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('int_unique_budget_category')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_int_unique_budget_category_updated_at", "resource_type": "test", "package_name": "providence", "path": "not_null_int_unique_budget_category_updated_at.sql", "original_file_path": "models/intermediate/transforms/models.yml", "unique_id": "test.providence.not_null_int_unique_budget_category_updated_at.3f6f47730e", "fqn": ["providence", "intermediate", "transforms", "not_null_int_unique_budget_category_updated_at"], "alias": "not_null_int_unique_budget_category_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.7339418, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_unique_budget_category"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.int_unique_budget_category"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/models.yml/not_null_int_unique_budget_category_updated_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_unique_budget_category as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Budget Categories\n--\nwith\n    duplicated_categories as (\n        select\n            \n    \nmd5(cast(coalesce(cast(id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(budget_month as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\",\n            id as category_id,\n            scraped_on as updated_at,\n            \"name\",\n  \"budget_id\",\n  \"category_group_id\",\n  \"goal_due\",\n  \"is_deleted\",\n  \"budget_month\",\n  \"budget_amount\",\n  \"goal_type\",\n  \"goal_amount\"\n        from \"mrzzy\".\"public\".\"stg_ynab_budget_category\"\n    )\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by updated_at desc\n            ) as n_row\n        from duplicated_categories\n    )\nwhere n_row = 1\n    )\n)select updated_at\nfrom __dbt__cte__int_unique_budget_category\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_budget_category", "sql": " __dbt__cte__int_unique_budget_category as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Budget Categories\n--\nwith\n    duplicated_categories as (\n        select\n            \n    \nmd5(cast(coalesce(cast(id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(budget_month as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\",\n            id as category_id,\n            scraped_on as updated_at,\n            \"name\",\n  \"budget_id\",\n  \"category_group_id\",\n  \"goal_due\",\n  \"is_deleted\",\n  \"budget_month\",\n  \"budget_amount\",\n  \"goal_type\",\n  \"goal_amount\"\n        from \"mrzzy\".\"public\".\"stg_ynab_budget_category\"\n    )\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by updated_at desc\n            ) as n_row\n        from duplicated_categories\n    )\nwhere n_row = 1\n    )\n)"}], "column_name": "updated_at", "file_key_name": "models.int_unique_budget_category"}, "test.providence.unique_int_unique_enriched_bank_statement_id.0b266c74fa": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('int_unique_enriched_bank_statement')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "unique_int_unique_enriched_bank_statement_id", "resource_type": "test", "package_name": "providence", "path": "unique_int_unique_enriched_bank_statement_id.sql", "original_file_path": "models/intermediate/transforms/models.yml", "unique_id": "test.providence.unique_int_unique_enriched_bank_statement_id.0b266c74fa", "fqn": ["providence", "intermediate", "transforms", "unique_int_unique_enriched_bank_statement_id"], "alias": "unique_int_unique_enriched_bank_statement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.7360687, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_unique_enriched_bank_statement"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.int_unique_enriched_bank_statement"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/models.yml/unique_int_unique_enriched_bank_statement_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith __dbt__cte__int_unique_enriched_bank_statement as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Enriched Bank Statement\n--\nwith\n    keyed_statement as (\n        select\n            \n    \nmd5(cast(coalesce(cast(account_no as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transacted_on as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(description as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\", *\n        from \"mrzzy\".\"public\".\"stg_uob_statement\"\n    ),\n\n    unique_statement as (\n        (\n            select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by processed_on desc\n            ) as n_row\n        from keyed_statement\n    )\nwhere n_row = 1\n        )\n    )\n\n-- enrich statement with account dimension\nselect t.*, a.id as account_id\nfrom unique_statement as t\nleft join \"mrzzy\".\"public\".\"dim_account\" as a on a.vendor_id = t.account_no\n)select\n    id as unique_field,\n    count(*) as n_records\n\nfrom __dbt__cte__int_unique_enriched_bank_statement\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_enriched_bank_statement", "sql": " __dbt__cte__int_unique_enriched_bank_statement as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Enriched Bank Statement\n--\nwith\n    keyed_statement as (\n        select\n            \n    \nmd5(cast(coalesce(cast(account_no as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transacted_on as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(description as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\", *\n        from \"mrzzy\".\"public\".\"stg_uob_statement\"\n    ),\n\n    unique_statement as (\n        (\n            select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by processed_on desc\n            ) as n_row\n        from keyed_statement\n    )\nwhere n_row = 1\n        )\n    )\n\n-- enrich statement with account dimension\nselect t.*, a.id as account_id\nfrom unique_statement as t\nleft join \"mrzzy\".\"public\".\"dim_account\" as a on a.vendor_id = t.account_no\n)"}], "column_name": "id", "file_key_name": "models.int_unique_enriched_bank_statement"}, "test.providence.not_null_int_unique_enriched_bank_statement_id.857bc95776": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('int_unique_enriched_bank_statement')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_int_unique_enriched_bank_statement_id", "resource_type": "test", "package_name": "providence", "path": "not_null_int_unique_enriched_bank_statement_id.sql", "original_file_path": "models/intermediate/transforms/models.yml", "unique_id": "test.providence.not_null_int_unique_enriched_bank_statement_id.857bc95776", "fqn": ["providence", "intermediate", "transforms", "not_null_int_unique_enriched_bank_statement_id"], "alias": "not_null_int_unique_enriched_bank_statement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.739046, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_unique_enriched_bank_statement"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.int_unique_enriched_bank_statement"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/models.yml/not_null_int_unique_enriched_bank_statement_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_unique_enriched_bank_statement as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Enriched Bank Statement\n--\nwith\n    keyed_statement as (\n        select\n            \n    \nmd5(cast(coalesce(cast(account_no as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transacted_on as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(description as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\", *\n        from \"mrzzy\".\"public\".\"stg_uob_statement\"\n    ),\n\n    unique_statement as (\n        (\n            select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by processed_on desc\n            ) as n_row\n        from keyed_statement\n    )\nwhere n_row = 1\n        )\n    )\n\n-- enrich statement with account dimension\nselect t.*, a.id as account_id\nfrom unique_statement as t\nleft join \"mrzzy\".\"public\".\"dim_account\" as a on a.vendor_id = t.account_no\n)select id\nfrom __dbt__cte__int_unique_enriched_bank_statement\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_enriched_bank_statement", "sql": " __dbt__cte__int_unique_enriched_bank_statement as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Enriched Bank Statement\n--\nwith\n    keyed_statement as (\n        select\n            \n    \nmd5(cast(coalesce(cast(account_no as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transacted_on as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(description as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\", *\n        from \"mrzzy\".\"public\".\"stg_uob_statement\"\n    ),\n\n    unique_statement as (\n        (\n            select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by processed_on desc\n            ) as n_row\n        from keyed_statement\n    )\nwhere n_row = 1\n        )\n    )\n\n-- enrich statement with account dimension\nselect t.*, a.id as account_id\nfrom unique_statement as t\nleft join \"mrzzy\".\"public\".\"dim_account\" as a on a.vendor_id = t.account_no\n)"}], "column_name": "id", "file_key_name": "models.int_unique_enriched_bank_statement"}, "test.providence.not_null_int_unique_enriched_bank_statement_transacted_on.6858c5f780": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "transacted_on", "model": "{{ get_where_subquery(ref('int_unique_enriched_bank_statement')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_int_unique_enriched_bank_statement_transacted_on", "resource_type": "test", "package_name": "providence", "path": "not_null_int_unique_enriched_bank_statement_transacted_on.sql", "original_file_path": "models/intermediate/transforms/models.yml", "unique_id": "test.providence.not_null_int_unique_enriched_bank_statement_transacted_on.6858c5f780", "fqn": ["providence", "intermediate", "transforms", "not_null_int_unique_enriched_bank_statement_transacted_on"], "alias": "not_null_int_unique_enriched_bank_statement_transacted_on", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.7411263, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_unique_enriched_bank_statement"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.int_unique_enriched_bank_statement"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/models.yml/not_null_int_unique_enriched_bank_statement_transacted_on.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_unique_enriched_bank_statement as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Enriched Bank Statement\n--\nwith\n    keyed_statement as (\n        select\n            \n    \nmd5(cast(coalesce(cast(account_no as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transacted_on as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(description as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\", *\n        from \"mrzzy\".\"public\".\"stg_uob_statement\"\n    ),\n\n    unique_statement as (\n        (\n            select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by processed_on desc\n            ) as n_row\n        from keyed_statement\n    )\nwhere n_row = 1\n        )\n    )\n\n-- enrich statement with account dimension\nselect t.*, a.id as account_id\nfrom unique_statement as t\nleft join \"mrzzy\".\"public\".\"dim_account\" as a on a.vendor_id = t.account_no\n)select transacted_on\nfrom __dbt__cte__int_unique_enriched_bank_statement\nwhere transacted_on is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_enriched_bank_statement", "sql": " __dbt__cte__int_unique_enriched_bank_statement as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Enriched Bank Statement\n--\nwith\n    keyed_statement as (\n        select\n            \n    \nmd5(cast(coalesce(cast(account_no as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transacted_on as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(description as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\", *\n        from \"mrzzy\".\"public\".\"stg_uob_statement\"\n    ),\n\n    unique_statement as (\n        (\n            select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by processed_on desc\n            ) as n_row\n        from keyed_statement\n    )\nwhere n_row = 1\n        )\n    )\n\n-- enrich statement with account dimension\nselect t.*, a.id as account_id\nfrom unique_statement as t\nleft join \"mrzzy\".\"public\".\"dim_account\" as a on a.vendor_id = t.account_no\n)"}], "column_name": "transacted_on", "file_key_name": "models.int_unique_enriched_bank_statement"}, "test.providence.not_null_int_unique_enriched_bank_statement_description.2b182c3f17": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "description", "model": "{{ get_where_subquery(ref('int_unique_enriched_bank_statement')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_int_unique_enriched_bank_statement_description", "resource_type": "test", "package_name": "providence", "path": "not_null_int_unique_enriched_bank_statement_description.sql", "original_file_path": "models/intermediate/transforms/models.yml", "unique_id": "test.providence.not_null_int_unique_enriched_bank_statement_description.2b182c3f17", "fqn": ["providence", "intermediate", "transforms", "not_null_int_unique_enriched_bank_statement_description"], "alias": "not_null_int_unique_enriched_bank_statement_description", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.7432191, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_unique_enriched_bank_statement"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.int_unique_enriched_bank_statement"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/models.yml/not_null_int_unique_enriched_bank_statement_description.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_unique_enriched_bank_statement as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Enriched Bank Statement\n--\nwith\n    keyed_statement as (\n        select\n            \n    \nmd5(cast(coalesce(cast(account_no as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transacted_on as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(description as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\", *\n        from \"mrzzy\".\"public\".\"stg_uob_statement\"\n    ),\n\n    unique_statement as (\n        (\n            select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by processed_on desc\n            ) as n_row\n        from keyed_statement\n    )\nwhere n_row = 1\n        )\n    )\n\n-- enrich statement with account dimension\nselect t.*, a.id as account_id\nfrom unique_statement as t\nleft join \"mrzzy\".\"public\".\"dim_account\" as a on a.vendor_id = t.account_no\n)select description\nfrom __dbt__cte__int_unique_enriched_bank_statement\nwhere description is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_enriched_bank_statement", "sql": " __dbt__cte__int_unique_enriched_bank_statement as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Enriched Bank Statement\n--\nwith\n    keyed_statement as (\n        select\n            \n    \nmd5(cast(coalesce(cast(account_no as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transacted_on as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(description as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\", *\n        from \"mrzzy\".\"public\".\"stg_uob_statement\"\n    ),\n\n    unique_statement as (\n        (\n            select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by processed_on desc\n            ) as n_row\n        from keyed_statement\n    )\nwhere n_row = 1\n        )\n    )\n\n-- enrich statement with account dimension\nselect t.*, a.id as account_id\nfrom unique_statement as t\nleft join \"mrzzy\".\"public\".\"dim_account\" as a on a.vendor_id = t.account_no\n)"}], "column_name": "description", "file_key_name": "models.int_unique_enriched_bank_statement"}, "test.providence.not_null_int_unique_enriched_bank_statement_account_no.f52fb903a9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_no", "model": "{{ get_where_subquery(ref('int_unique_enriched_bank_statement')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_int_unique_enriched_bank_statement_account_no", "resource_type": "test", "package_name": "providence", "path": "not_null_int_unique_enriched_bank_statement_account_no.sql", "original_file_path": "models/intermediate/transforms/models.yml", "unique_id": "test.providence.not_null_int_unique_enriched_bank_statement_account_no.f52fb903a9", "fqn": ["providence", "intermediate", "transforms", "not_null_int_unique_enriched_bank_statement_account_no"], "alias": "not_null_int_unique_enriched_bank_statement_account_no", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.7453303, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_unique_enriched_bank_statement"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.int_unique_enriched_bank_statement"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/models.yml/not_null_int_unique_enriched_bank_statement_account_no.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_unique_enriched_bank_statement as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Enriched Bank Statement\n--\nwith\n    keyed_statement as (\n        select\n            \n    \nmd5(cast(coalesce(cast(account_no as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transacted_on as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(description as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\", *\n        from \"mrzzy\".\"public\".\"stg_uob_statement\"\n    ),\n\n    unique_statement as (\n        (\n            select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by processed_on desc\n            ) as n_row\n        from keyed_statement\n    )\nwhere n_row = 1\n        )\n    )\n\n-- enrich statement with account dimension\nselect t.*, a.id as account_id\nfrom unique_statement as t\nleft join \"mrzzy\".\"public\".\"dim_account\" as a on a.vendor_id = t.account_no\n)select account_no\nfrom __dbt__cte__int_unique_enriched_bank_statement\nwhere account_no is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_enriched_bank_statement", "sql": " __dbt__cte__int_unique_enriched_bank_statement as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Enriched Bank Statement\n--\nwith\n    keyed_statement as (\n        select\n            \n    \nmd5(cast(coalesce(cast(account_no as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transacted_on as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(description as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\", *\n        from \"mrzzy\".\"public\".\"stg_uob_statement\"\n    ),\n\n    unique_statement as (\n        (\n            select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by processed_on desc\n            ) as n_row\n        from keyed_statement\n    )\nwhere n_row = 1\n        )\n    )\n\n-- enrich statement with account dimension\nselect t.*, a.id as account_id\nfrom unique_statement as t\nleft join \"mrzzy\".\"public\".\"dim_account\" as a on a.vendor_id = t.account_no\n)"}], "column_name": "account_no", "file_key_name": "models.int_unique_enriched_bank_statement"}, "test.providence.not_null_int_unique_enriched_bank_statement_account_id.0b1f57b3e2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('int_unique_enriched_bank_statement')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_int_unique_enriched_bank_statement_account_id", "resource_type": "test", "package_name": "providence", "path": "not_null_int_unique_enriched_bank_statement_account_id.sql", "original_file_path": "models/intermediate/transforms/models.yml", "unique_id": "test.providence.not_null_int_unique_enriched_bank_statement_account_id.0b1f57b3e2", "fqn": ["providence", "intermediate", "transforms", "not_null_int_unique_enriched_bank_statement_account_id"], "alias": "not_null_int_unique_enriched_bank_statement_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.747717, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_unique_enriched_bank_statement"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.int_unique_enriched_bank_statement"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/models.yml/not_null_int_unique_enriched_bank_statement_account_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_unique_enriched_bank_statement as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Enriched Bank Statement\n--\nwith\n    keyed_statement as (\n        select\n            \n    \nmd5(cast(coalesce(cast(account_no as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transacted_on as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(description as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\", *\n        from \"mrzzy\".\"public\".\"stg_uob_statement\"\n    ),\n\n    unique_statement as (\n        (\n            select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by processed_on desc\n            ) as n_row\n        from keyed_statement\n    )\nwhere n_row = 1\n        )\n    )\n\n-- enrich statement with account dimension\nselect t.*, a.id as account_id\nfrom unique_statement as t\nleft join \"mrzzy\".\"public\".\"dim_account\" as a on a.vendor_id = t.account_no\n)select account_id\nfrom __dbt__cte__int_unique_enriched_bank_statement\nwhere account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_enriched_bank_statement", "sql": " __dbt__cte__int_unique_enriched_bank_statement as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Enriched Bank Statement\n--\nwith\n    keyed_statement as (\n        select\n            \n    \nmd5(cast(coalesce(cast(account_no as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transacted_on as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(description as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\", *\n        from \"mrzzy\".\"public\".\"stg_uob_statement\"\n    ),\n\n    unique_statement as (\n        (\n            select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by processed_on desc\n            ) as n_row\n        from keyed_statement\n    )\nwhere n_row = 1\n        )\n    )\n\n-- enrich statement with account dimension\nselect t.*, a.id as account_id\nfrom unique_statement as t\nleft join \"mrzzy\".\"public\".\"dim_account\" as a on a.vendor_id = t.account_no\n)"}], "column_name": "account_id", "file_key_name": "models.int_unique_enriched_bank_statement"}, "test.providence.relationships_int_unique_enriched_bank_statement_account_id__id__ref_dim_account_.192e503d3c": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref(\"dim_account\")", "field": "id", "column_name": "account_id", "model": "{{ get_where_subquery(ref('int_unique_enriched_bank_statement')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "relationships_int_unique_enriched_bank_statement_account_id__id__ref_dim_account_", "resource_type": "test", "package_name": "providence", "path": "relationships_int_unique_enric_b334d6e59d4b70721595e1dcb39dde0d.sql", "original_file_path": "models/intermediate/transforms/models.yml", "unique_id": "test.providence.relationships_int_unique_enriched_bank_statement_account_id__id__ref_dim_account_.192e503d3c", "fqn": ["providence", "intermediate", "transforms", "relationships_int_unique_enriched_bank_statement_account_id__id__ref_dim_account_"], "alias": "relationships_int_unique_enric_b334d6e59d4b70721595e1dcb39dde0d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_int_unique_enric_b334d6e59d4b70721595e1dcb39dde0d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_int_unique_enric_b334d6e59d4b70721595e1dcb39dde0d"}, "created_at": 1684070075.749801, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_int_unique_enric_b334d6e59d4b70721595e1dcb39dde0d\") }}", "language": "sql", "refs": [["dim_account"], ["int_unique_enriched_bank_statement"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_account", "model.providence.int_unique_enriched_bank_statement"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/models.yml/relationships_int_unique_enric_b334d6e59d4b70721595e1dcb39dde0d.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith  __dbt__cte__int_unique_enriched_bank_statement as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Enriched Bank Statement\n--\nwith\n    keyed_statement as (\n        select\n            \n    \nmd5(cast(coalesce(cast(account_no as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transacted_on as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(description as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\", *\n        from \"mrzzy\".\"public\".\"stg_uob_statement\"\n    ),\n\n    unique_statement as (\n        (\n            select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by processed_on desc\n            ) as n_row\n        from keyed_statement\n    )\nwhere n_row = 1\n        )\n    )\n\n-- enrich statement with account dimension\nselect t.*, a.id as account_id\nfrom unique_statement as t\nleft join \"mrzzy\".\"public\".\"dim_account\" as a on a.vendor_id = t.account_no\n),child as (\n    select account_id as from_field\n    from __dbt__cte__int_unique_enriched_bank_statement\n    where account_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"mrzzy\".\"public\".\"dim_account\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_enriched_bank_statement", "sql": " __dbt__cte__int_unique_enriched_bank_statement as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Enriched Bank Statement\n--\nwith\n    keyed_statement as (\n        select\n            \n    \nmd5(cast(coalesce(cast(account_no as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transacted_on as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(description as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\", *\n        from \"mrzzy\".\"public\".\"stg_uob_statement\"\n    ),\n\n    unique_statement as (\n        (\n            select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by processed_on desc\n            ) as n_row\n        from keyed_statement\n    )\nwhere n_row = 1\n        )\n    )\n\n-- enrich statement with account dimension\nselect t.*, a.id as account_id\nfrom unique_statement as t\nleft join \"mrzzy\".\"public\".\"dim_account\" as a on a.vendor_id = t.account_no\n)"}], "column_name": "account_id", "file_key_name": "models.int_unique_enriched_bank_statement"}, "test.providence.not_null_int_unique_enriched_bank_statement_name.52c8ba8d17": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('int_unique_enriched_bank_statement')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_int_unique_enriched_bank_statement_name", "resource_type": "test", "package_name": "providence", "path": "not_null_int_unique_enriched_bank_statement_name.sql", "original_file_path": "models/intermediate/transforms/models.yml", "unique_id": "test.providence.not_null_int_unique_enriched_bank_statement_name.52c8ba8d17", "fqn": ["providence", "intermediate", "transforms", "not_null_int_unique_enriched_bank_statement_name"], "alias": "not_null_int_unique_enriched_bank_statement_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.7560523, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_unique_enriched_bank_statement"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.int_unique_enriched_bank_statement"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/models.yml/not_null_int_unique_enriched_bank_statement_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_unique_enriched_bank_statement as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Enriched Bank Statement\n--\nwith\n    keyed_statement as (\n        select\n            \n    \nmd5(cast(coalesce(cast(account_no as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transacted_on as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(description as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\", *\n        from \"mrzzy\".\"public\".\"stg_uob_statement\"\n    ),\n\n    unique_statement as (\n        (\n            select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by processed_on desc\n            ) as n_row\n        from keyed_statement\n    )\nwhere n_row = 1\n        )\n    )\n\n-- enrich statement with account dimension\nselect t.*, a.id as account_id\nfrom unique_statement as t\nleft join \"mrzzy\".\"public\".\"dim_account\" as a on a.vendor_id = t.account_no\n)select name\nfrom __dbt__cte__int_unique_enriched_bank_statement\nwhere name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_enriched_bank_statement", "sql": " __dbt__cte__int_unique_enriched_bank_statement as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Enriched Bank Statement\n--\nwith\n    keyed_statement as (\n        select\n            \n    \nmd5(cast(coalesce(cast(account_no as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transacted_on as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(description as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\", *\n        from \"mrzzy\".\"public\".\"stg_uob_statement\"\n    ),\n\n    unique_statement as (\n        (\n            select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by processed_on desc\n            ) as n_row\n        from keyed_statement\n    )\nwhere n_row = 1\n        )\n    )\n\n-- enrich statement with account dimension\nselect t.*, a.id as account_id\nfrom unique_statement as t\nleft join \"mrzzy\".\"public\".\"dim_account\" as a on a.vendor_id = t.account_no\n)"}], "column_name": "name", "file_key_name": "models.int_unique_enriched_bank_statement"}, "test.providence.not_null_int_unique_enriched_bank_statement_deposit.70eb54a69c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "deposit", "model": "{{ get_where_subquery(ref('int_unique_enriched_bank_statement')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_int_unique_enriched_bank_statement_deposit", "resource_type": "test", "package_name": "providence", "path": "not_null_int_unique_enriched_bank_statement_deposit.sql", "original_file_path": "models/intermediate/transforms/models.yml", "unique_id": "test.providence.not_null_int_unique_enriched_bank_statement_deposit.70eb54a69c", "fqn": ["providence", "intermediate", "transforms", "not_null_int_unique_enriched_bank_statement_deposit"], "alias": "not_null_int_unique_enriched_bank_statement_deposit", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.7581625, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_unique_enriched_bank_statement"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.int_unique_enriched_bank_statement"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/models.yml/not_null_int_unique_enriched_bank_statement_deposit.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_unique_enriched_bank_statement as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Enriched Bank Statement\n--\nwith\n    keyed_statement as (\n        select\n            \n    \nmd5(cast(coalesce(cast(account_no as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transacted_on as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(description as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\", *\n        from \"mrzzy\".\"public\".\"stg_uob_statement\"\n    ),\n\n    unique_statement as (\n        (\n            select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by processed_on desc\n            ) as n_row\n        from keyed_statement\n    )\nwhere n_row = 1\n        )\n    )\n\n-- enrich statement with account dimension\nselect t.*, a.id as account_id\nfrom unique_statement as t\nleft join \"mrzzy\".\"public\".\"dim_account\" as a on a.vendor_id = t.account_no\n)select deposit\nfrom __dbt__cte__int_unique_enriched_bank_statement\nwhere deposit is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_enriched_bank_statement", "sql": " __dbt__cte__int_unique_enriched_bank_statement as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Enriched Bank Statement\n--\nwith\n    keyed_statement as (\n        select\n            \n    \nmd5(cast(coalesce(cast(account_no as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transacted_on as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(description as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\", *\n        from \"mrzzy\".\"public\".\"stg_uob_statement\"\n    ),\n\n    unique_statement as (\n        (\n            select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by processed_on desc\n            ) as n_row\n        from keyed_statement\n    )\nwhere n_row = 1\n        )\n    )\n\n-- enrich statement with account dimension\nselect t.*, a.id as account_id\nfrom unique_statement as t\nleft join \"mrzzy\".\"public\".\"dim_account\" as a on a.vendor_id = t.account_no\n)"}], "column_name": "deposit", "file_key_name": "models.int_unique_enriched_bank_statement"}, "test.providence.dbt_utils_accepted_range_int_unique_enriched_bank_statement_deposit__0_0.ca148b59ce": {"test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0.0, "column_name": "deposit", "model": "{{ get_where_subquery(ref('int_unique_enriched_bank_statement')) }}"}, "namespace": "dbt_utils"}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "dbt_utils_accepted_range_int_unique_enriched_bank_statement_deposit__0_0", "resource_type": "test", "package_name": "providence", "path": "dbt_utils_accepted_range_int_u_ca0d74cf46bc123101d759f4987a5ee3.sql", "original_file_path": "models/intermediate/transforms/models.yml", "unique_id": "test.providence.dbt_utils_accepted_range_int_unique_enriched_bank_statement_deposit__0_0.ca148b59ce", "fqn": ["providence", "intermediate", "transforms", "dbt_utils_accepted_range_int_unique_enriched_bank_statement_deposit__0_0"], "alias": "dbt_utils_accepted_range_int_u_ca0d74cf46bc123101d759f4987a5ee3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_int_u_ca0d74cf46bc123101d759f4987a5ee3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_accepted_range_int_u_ca0d74cf46bc123101d759f4987a5ee3"}, "created_at": 1684070075.76028, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_accepted_range_int_u_ca0d74cf46bc123101d759f4987a5ee3\") }}", "language": "sql", "refs": [["int_unique_enriched_bank_statement"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.int_unique_enriched_bank_statement"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/models.yml/dbt_utils_accepted_range_int_u_ca0d74cf46bc123101d759f4987a5ee3.sql", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__int_unique_enriched_bank_statement as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Enriched Bank Statement\n--\nwith\n    keyed_statement as (\n        select\n            \n    \nmd5(cast(coalesce(cast(account_no as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transacted_on as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(description as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\", *\n        from \"mrzzy\".\"public\".\"stg_uob_statement\"\n    ),\n\n    unique_statement as (\n        (\n            select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by processed_on desc\n            ) as n_row\n        from keyed_statement\n    )\nwhere n_row = 1\n        )\n    )\n\n-- enrich statement with account dimension\nselect t.*, a.id as account_id\nfrom unique_statement as t\nleft join \"mrzzy\".\"public\".\"dim_account\" as a on a.vendor_id = t.account_no\n),meet_condition as(\n  select *\n  from __dbt__cte__int_unique_enriched_bank_statement\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not deposit >= 0.0\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_enriched_bank_statement", "sql": " __dbt__cte__int_unique_enriched_bank_statement as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Enriched Bank Statement\n--\nwith\n    keyed_statement as (\n        select\n            \n    \nmd5(cast(coalesce(cast(account_no as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transacted_on as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(description as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\", *\n        from \"mrzzy\".\"public\".\"stg_uob_statement\"\n    ),\n\n    unique_statement as (\n        (\n            select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by processed_on desc\n            ) as n_row\n        from keyed_statement\n    )\nwhere n_row = 1\n        )\n    )\n\n-- enrich statement with account dimension\nselect t.*, a.id as account_id\nfrom unique_statement as t\nleft join \"mrzzy\".\"public\".\"dim_account\" as a on a.vendor_id = t.account_no\n)"}], "column_name": "deposit", "file_key_name": "models.int_unique_enriched_bank_statement"}, "test.providence.not_null_int_unique_enriched_bank_statement_withdrawal.0a1bf24b4a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "withdrawal", "model": "{{ get_where_subquery(ref('int_unique_enriched_bank_statement')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_int_unique_enriched_bank_statement_withdrawal", "resource_type": "test", "package_name": "providence", "path": "not_null_int_unique_enriched_bank_statement_withdrawal.sql", "original_file_path": "models/intermediate/transforms/models.yml", "unique_id": "test.providence.not_null_int_unique_enriched_bank_statement_withdrawal.0a1bf24b4a", "fqn": ["providence", "intermediate", "transforms", "not_null_int_unique_enriched_bank_statement_withdrawal"], "alias": "not_null_int_unique_enriched_bank_statement_withdrawal", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.7703638, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_unique_enriched_bank_statement"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.int_unique_enriched_bank_statement"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/models.yml/not_null_int_unique_enriched_bank_statement_withdrawal.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_unique_enriched_bank_statement as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Enriched Bank Statement\n--\nwith\n    keyed_statement as (\n        select\n            \n    \nmd5(cast(coalesce(cast(account_no as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transacted_on as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(description as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\", *\n        from \"mrzzy\".\"public\".\"stg_uob_statement\"\n    ),\n\n    unique_statement as (\n        (\n            select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by processed_on desc\n            ) as n_row\n        from keyed_statement\n    )\nwhere n_row = 1\n        )\n    )\n\n-- enrich statement with account dimension\nselect t.*, a.id as account_id\nfrom unique_statement as t\nleft join \"mrzzy\".\"public\".\"dim_account\" as a on a.vendor_id = t.account_no\n)select withdrawal\nfrom __dbt__cte__int_unique_enriched_bank_statement\nwhere withdrawal is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_enriched_bank_statement", "sql": " __dbt__cte__int_unique_enriched_bank_statement as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Enriched Bank Statement\n--\nwith\n    keyed_statement as (\n        select\n            \n    \nmd5(cast(coalesce(cast(account_no as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transacted_on as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(description as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\", *\n        from \"mrzzy\".\"public\".\"stg_uob_statement\"\n    ),\n\n    unique_statement as (\n        (\n            select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by processed_on desc\n            ) as n_row\n        from keyed_statement\n    )\nwhere n_row = 1\n        )\n    )\n\n-- enrich statement with account dimension\nselect t.*, a.id as account_id\nfrom unique_statement as t\nleft join \"mrzzy\".\"public\".\"dim_account\" as a on a.vendor_id = t.account_no\n)"}], "column_name": "withdrawal", "file_key_name": "models.int_unique_enriched_bank_statement"}, "test.providence.dbt_utils_accepted_range_int_unique_enriched_bank_statement_withdrawal__0_0.0958cf5ba4": {"test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0.0, "column_name": "withdrawal", "model": "{{ get_where_subquery(ref('int_unique_enriched_bank_statement')) }}"}, "namespace": "dbt_utils"}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "dbt_utils_accepted_range_int_unique_enriched_bank_statement_withdrawal__0_0", "resource_type": "test", "package_name": "providence", "path": "dbt_utils_accepted_range_int_u_38a2cb2b0435faabf47a0a6cf4fc2564.sql", "original_file_path": "models/intermediate/transforms/models.yml", "unique_id": "test.providence.dbt_utils_accepted_range_int_unique_enriched_bank_statement_withdrawal__0_0.0958cf5ba4", "fqn": ["providence", "intermediate", "transforms", "dbt_utils_accepted_range_int_unique_enriched_bank_statement_withdrawal__0_0"], "alias": "dbt_utils_accepted_range_int_u_38a2cb2b0435faabf47a0a6cf4fc2564", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_int_u_38a2cb2b0435faabf47a0a6cf4fc2564", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_accepted_range_int_u_38a2cb2b0435faabf47a0a6cf4fc2564"}, "created_at": 1684070075.772524, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_accepted_range_int_u_38a2cb2b0435faabf47a0a6cf4fc2564\") }}", "language": "sql", "refs": [["int_unique_enriched_bank_statement"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.int_unique_enriched_bank_statement"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/models.yml/dbt_utils_accepted_range_int_u_38a2cb2b0435faabf47a0a6cf4fc2564.sql", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__int_unique_enriched_bank_statement as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Enriched Bank Statement\n--\nwith\n    keyed_statement as (\n        select\n            \n    \nmd5(cast(coalesce(cast(account_no as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transacted_on as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(description as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\", *\n        from \"mrzzy\".\"public\".\"stg_uob_statement\"\n    ),\n\n    unique_statement as (\n        (\n            select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by processed_on desc\n            ) as n_row\n        from keyed_statement\n    )\nwhere n_row = 1\n        )\n    )\n\n-- enrich statement with account dimension\nselect t.*, a.id as account_id\nfrom unique_statement as t\nleft join \"mrzzy\".\"public\".\"dim_account\" as a on a.vendor_id = t.account_no\n),meet_condition as(\n  select *\n  from __dbt__cte__int_unique_enriched_bank_statement\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not withdrawal >= 0.0\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_enriched_bank_statement", "sql": " __dbt__cte__int_unique_enriched_bank_statement as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Enriched Bank Statement\n--\nwith\n    keyed_statement as (\n        select\n            \n    \nmd5(cast(coalesce(cast(account_no as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transacted_on as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(description as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\", *\n        from \"mrzzy\".\"public\".\"stg_uob_statement\"\n    ),\n\n    unique_statement as (\n        (\n            select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by processed_on desc\n            ) as n_row\n        from keyed_statement\n    )\nwhere n_row = 1\n        )\n    )\n\n-- enrich statement with account dimension\nselect t.*, a.id as account_id\nfrom unique_statement as t\nleft join \"mrzzy\".\"public\".\"dim_account\" as a on a.vendor_id = t.account_no\n)"}], "column_name": "withdrawal", "file_key_name": "models.int_unique_enriched_bank_statement"}, "test.providence.not_null_int_unique_enriched_bank_statement_balance.36858c8aa9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "balance", "model": "{{ get_where_subquery(ref('int_unique_enriched_bank_statement')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_int_unique_enriched_bank_statement_balance", "resource_type": "test", "package_name": "providence", "path": "not_null_int_unique_enriched_bank_statement_balance.sql", "original_file_path": "models/intermediate/transforms/models.yml", "unique_id": "test.providence.not_null_int_unique_enriched_bank_statement_balance.36858c8aa9", "fqn": ["providence", "intermediate", "transforms", "not_null_int_unique_enriched_bank_statement_balance"], "alias": "not_null_int_unique_enriched_bank_statement_balance", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.7776902, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_unique_enriched_bank_statement"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.int_unique_enriched_bank_statement"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/models.yml/not_null_int_unique_enriched_bank_statement_balance.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_unique_enriched_bank_statement as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Enriched Bank Statement\n--\nwith\n    keyed_statement as (\n        select\n            \n    \nmd5(cast(coalesce(cast(account_no as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transacted_on as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(description as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\", *\n        from \"mrzzy\".\"public\".\"stg_uob_statement\"\n    ),\n\n    unique_statement as (\n        (\n            select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by processed_on desc\n            ) as n_row\n        from keyed_statement\n    )\nwhere n_row = 1\n        )\n    )\n\n-- enrich statement with account dimension\nselect t.*, a.id as account_id\nfrom unique_statement as t\nleft join \"mrzzy\".\"public\".\"dim_account\" as a on a.vendor_id = t.account_no\n)select balance\nfrom __dbt__cte__int_unique_enriched_bank_statement\nwhere balance is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_enriched_bank_statement", "sql": " __dbt__cte__int_unique_enriched_bank_statement as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Enriched Bank Statement\n--\nwith\n    keyed_statement as (\n        select\n            \n    \nmd5(cast(coalesce(cast(account_no as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transacted_on as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(description as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\", *\n        from \"mrzzy\".\"public\".\"stg_uob_statement\"\n    ),\n\n    unique_statement as (\n        (\n            select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by processed_on desc\n            ) as n_row\n        from keyed_statement\n    )\nwhere n_row = 1\n        )\n    )\n\n-- enrich statement with account dimension\nselect t.*, a.id as account_id\nfrom unique_statement as t\nleft join \"mrzzy\".\"public\".\"dim_account\" as a on a.vendor_id = t.account_no\n)"}], "column_name": "balance", "file_key_name": "models.int_unique_enriched_bank_statement"}, "test.providence.not_null_int_unique_enriched_bank_statement_currency_code.282a32233c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "currency_code", "model": "{{ get_where_subquery(ref('int_unique_enriched_bank_statement')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_int_unique_enriched_bank_statement_currency_code", "resource_type": "test", "package_name": "providence", "path": "not_null_int_unique_enriched_bank_statement_currency_code.sql", "original_file_path": "models/intermediate/transforms/models.yml", "unique_id": "test.providence.not_null_int_unique_enriched_bank_statement_currency_code.282a32233c", "fqn": ["providence", "intermediate", "transforms", "not_null_int_unique_enriched_bank_statement_currency_code"], "alias": "not_null_int_unique_enriched_bank_statement_currency_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.779806, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_unique_enriched_bank_statement"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.int_unique_enriched_bank_statement"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/models.yml/not_null_int_unique_enriched_bank_statement_currency_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_unique_enriched_bank_statement as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Enriched Bank Statement\n--\nwith\n    keyed_statement as (\n        select\n            \n    \nmd5(cast(coalesce(cast(account_no as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transacted_on as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(description as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\", *\n        from \"mrzzy\".\"public\".\"stg_uob_statement\"\n    ),\n\n    unique_statement as (\n        (\n            select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by processed_on desc\n            ) as n_row\n        from keyed_statement\n    )\nwhere n_row = 1\n        )\n    )\n\n-- enrich statement with account dimension\nselect t.*, a.id as account_id\nfrom unique_statement as t\nleft join \"mrzzy\".\"public\".\"dim_account\" as a on a.vendor_id = t.account_no\n)select currency_code\nfrom __dbt__cte__int_unique_enriched_bank_statement\nwhere currency_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_enriched_bank_statement", "sql": " __dbt__cte__int_unique_enriched_bank_statement as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Enriched Bank Statement\n--\nwith\n    keyed_statement as (\n        select\n            \n    \nmd5(cast(coalesce(cast(account_no as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transacted_on as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(description as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\", *\n        from \"mrzzy\".\"public\".\"stg_uob_statement\"\n    ),\n\n    unique_statement as (\n        (\n            select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by processed_on desc\n            ) as n_row\n        from keyed_statement\n    )\nwhere n_row = 1\n        )\n    )\n\n-- enrich statement with account dimension\nselect t.*, a.id as account_id\nfrom unique_statement as t\nleft join \"mrzzy\".\"public\".\"dim_account\" as a on a.vendor_id = t.account_no\n)"}], "column_name": "currency_code", "file_key_name": "models.int_unique_enriched_bank_statement"}, "test.providence.not_null_int_unique_enriched_bank_statement_statement_begin.7709bb26cc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "statement_begin", "model": "{{ get_where_subquery(ref('int_unique_enriched_bank_statement')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_int_unique_enriched_bank_statement_statement_begin", "resource_type": "test", "package_name": "providence", "path": "not_null_int_unique_enriched_bank_statement_statement_begin.sql", "original_file_path": "models/intermediate/transforms/models.yml", "unique_id": "test.providence.not_null_int_unique_enriched_bank_statement_statement_begin.7709bb26cc", "fqn": ["providence", "intermediate", "transforms", "not_null_int_unique_enriched_bank_statement_statement_begin"], "alias": "not_null_int_unique_enriched_bank_statement_statement_begin", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.782205, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_unique_enriched_bank_statement"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.int_unique_enriched_bank_statement"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/models.yml/not_null_int_unique_enriched_bank_statement_statement_begin.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_unique_enriched_bank_statement as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Enriched Bank Statement\n--\nwith\n    keyed_statement as (\n        select\n            \n    \nmd5(cast(coalesce(cast(account_no as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transacted_on as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(description as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\", *\n        from \"mrzzy\".\"public\".\"stg_uob_statement\"\n    ),\n\n    unique_statement as (\n        (\n            select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by processed_on desc\n            ) as n_row\n        from keyed_statement\n    )\nwhere n_row = 1\n        )\n    )\n\n-- enrich statement with account dimension\nselect t.*, a.id as account_id\nfrom unique_statement as t\nleft join \"mrzzy\".\"public\".\"dim_account\" as a on a.vendor_id = t.account_no\n)select statement_begin\nfrom __dbt__cte__int_unique_enriched_bank_statement\nwhere statement_begin is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_enriched_bank_statement", "sql": " __dbt__cte__int_unique_enriched_bank_statement as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Enriched Bank Statement\n--\nwith\n    keyed_statement as (\n        select\n            \n    \nmd5(cast(coalesce(cast(account_no as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transacted_on as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(description as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\", *\n        from \"mrzzy\".\"public\".\"stg_uob_statement\"\n    ),\n\n    unique_statement as (\n        (\n            select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by processed_on desc\n            ) as n_row\n        from keyed_statement\n    )\nwhere n_row = 1\n        )\n    )\n\n-- enrich statement with account dimension\nselect t.*, a.id as account_id\nfrom unique_statement as t\nleft join \"mrzzy\".\"public\".\"dim_account\" as a on a.vendor_id = t.account_no\n)"}], "column_name": "statement_begin", "file_key_name": "models.int_unique_enriched_bank_statement"}, "test.providence.not_null_int_unique_enriched_bank_statement_statement_end.ace15564ad": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "statement_end", "model": "{{ get_where_subquery(ref('int_unique_enriched_bank_statement')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_int_unique_enriched_bank_statement_statement_end", "resource_type": "test", "package_name": "providence", "path": "not_null_int_unique_enriched_bank_statement_statement_end.sql", "original_file_path": "models/intermediate/transforms/models.yml", "unique_id": "test.providence.not_null_int_unique_enriched_bank_statement_statement_end.ace15564ad", "fqn": ["providence", "intermediate", "transforms", "not_null_int_unique_enriched_bank_statement_statement_end"], "alias": "not_null_int_unique_enriched_bank_statement_statement_end", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.7843204, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_unique_enriched_bank_statement"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.int_unique_enriched_bank_statement"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/models.yml/not_null_int_unique_enriched_bank_statement_statement_end.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_unique_enriched_bank_statement as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Enriched Bank Statement\n--\nwith\n    keyed_statement as (\n        select\n            \n    \nmd5(cast(coalesce(cast(account_no as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transacted_on as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(description as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\", *\n        from \"mrzzy\".\"public\".\"stg_uob_statement\"\n    ),\n\n    unique_statement as (\n        (\n            select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by processed_on desc\n            ) as n_row\n        from keyed_statement\n    )\nwhere n_row = 1\n        )\n    )\n\n-- enrich statement with account dimension\nselect t.*, a.id as account_id\nfrom unique_statement as t\nleft join \"mrzzy\".\"public\".\"dim_account\" as a on a.vendor_id = t.account_no\n)select statement_end\nfrom __dbt__cte__int_unique_enriched_bank_statement\nwhere statement_end is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_enriched_bank_statement", "sql": " __dbt__cte__int_unique_enriched_bank_statement as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Enriched Bank Statement\n--\nwith\n    keyed_statement as (\n        select\n            \n    \nmd5(cast(coalesce(cast(account_no as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transacted_on as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(description as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\", *\n        from \"mrzzy\".\"public\".\"stg_uob_statement\"\n    ),\n\n    unique_statement as (\n        (\n            select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by processed_on desc\n            ) as n_row\n        from keyed_statement\n    )\nwhere n_row = 1\n        )\n    )\n\n-- enrich statement with account dimension\nselect t.*, a.id as account_id\nfrom unique_statement as t\nleft join \"mrzzy\".\"public\".\"dim_account\" as a on a.vendor_id = t.account_no\n)"}], "column_name": "statement_end", "file_key_name": "models.int_unique_enriched_bank_statement"}, "test.providence.not_null_int_unique_enriched_bank_statement_processed_on.6e6a0ea6ac": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "processed_on", "model": "{{ get_where_subquery(ref('int_unique_enriched_bank_statement')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_int_unique_enriched_bank_statement_processed_on", "resource_type": "test", "package_name": "providence", "path": "not_null_int_unique_enriched_bank_statement_processed_on.sql", "original_file_path": "models/intermediate/transforms/models.yml", "unique_id": "test.providence.not_null_int_unique_enriched_bank_statement_processed_on.6e6a0ea6ac", "fqn": ["providence", "intermediate", "transforms", "not_null_int_unique_enriched_bank_statement_processed_on"], "alias": "not_null_int_unique_enriched_bank_statement_processed_on", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.7864153, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_unique_enriched_bank_statement"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.int_unique_enriched_bank_statement"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/models.yml/not_null_int_unique_enriched_bank_statement_processed_on.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_unique_enriched_bank_statement as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Enriched Bank Statement\n--\nwith\n    keyed_statement as (\n        select\n            \n    \nmd5(cast(coalesce(cast(account_no as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transacted_on as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(description as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\", *\n        from \"mrzzy\".\"public\".\"stg_uob_statement\"\n    ),\n\n    unique_statement as (\n        (\n            select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by processed_on desc\n            ) as n_row\n        from keyed_statement\n    )\nwhere n_row = 1\n        )\n    )\n\n-- enrich statement with account dimension\nselect t.*, a.id as account_id\nfrom unique_statement as t\nleft join \"mrzzy\".\"public\".\"dim_account\" as a on a.vendor_id = t.account_no\n)select processed_on\nfrom __dbt__cte__int_unique_enriched_bank_statement\nwhere processed_on is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_enriched_bank_statement", "sql": " __dbt__cte__int_unique_enriched_bank_statement as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Enriched Bank Statement\n--\nwith\n    keyed_statement as (\n        select\n            \n    \nmd5(cast(coalesce(cast(account_no as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transacted_on as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(description as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\", *\n        from \"mrzzy\".\"public\".\"stg_uob_statement\"\n    ),\n\n    unique_statement as (\n        (\n            select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by processed_on desc\n            ) as n_row\n        from keyed_statement\n    )\nwhere n_row = 1\n        )\n    )\n\n-- enrich statement with account dimension\nselect t.*, a.id as account_id\nfrom unique_statement as t\nleft join \"mrzzy\".\"public\".\"dim_account\" as a on a.vendor_id = t.account_no\n)"}], "column_name": "processed_on", "file_key_name": "models.int_unique_enriched_bank_statement"}, "test.providence.dbt_utils_expression_is_true_int_unique_enriched_bank_statement_statement_begin_statement_end.e45e89334b": {"test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "statement_begin <= statement_end", "model": "{{ get_where_subquery(ref('int_unique_enriched_bank_statement')) }}"}, "namespace": "dbt_utils"}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_int_unique_enriched_bank_statement_statement_begin_statement_end", "resource_type": "test", "package_name": "providence", "path": "dbt_utils_expression_is_true_i_4b860530c60776e5d34558599d5e1a68.sql", "original_file_path": "models/intermediate/transforms/models.yml", "unique_id": "test.providence.dbt_utils_expression_is_true_int_unique_enriched_bank_statement_statement_begin_statement_end.e45e89334b", "fqn": ["providence", "intermediate", "transforms", "dbt_utils_expression_is_true_int_unique_enriched_bank_statement_statement_begin_statement_end"], "alias": "dbt_utils_expression_is_true_i_4b860530c60776e5d34558599d5e1a68", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_i_4b860530c60776e5d34558599d5e1a68", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_expression_is_true_i_4b860530c60776e5d34558599d5e1a68"}, "created_at": 1684070075.7885556, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_i_4b860530c60776e5d34558599d5e1a68\") }}", "language": "sql", "refs": [["int_unique_enriched_bank_statement"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.int_unique_enriched_bank_statement"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/models.yml/dbt_utils_expression_is_true_i_4b860530c60776e5d34558599d5e1a68.sql", "compiled": true, "compiled_code": "\n\n\n\nwith __dbt__cte__int_unique_enriched_bank_statement as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Enriched Bank Statement\n--\nwith\n    keyed_statement as (\n        select\n            \n    \nmd5(cast(coalesce(cast(account_no as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transacted_on as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(description as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\", *\n        from \"mrzzy\".\"public\".\"stg_uob_statement\"\n    ),\n\n    unique_statement as (\n        (\n            select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by processed_on desc\n            ) as n_row\n        from keyed_statement\n    )\nwhere n_row = 1\n        )\n    )\n\n-- enrich statement with account dimension\nselect t.*, a.id as account_id\nfrom unique_statement as t\nleft join \"mrzzy\".\"public\".\"dim_account\" as a on a.vendor_id = t.account_no\n)select\n    1\nfrom __dbt__cte__int_unique_enriched_bank_statement\n\nwhere not(statement_begin <= statement_end)\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_enriched_bank_statement", "sql": " __dbt__cte__int_unique_enriched_bank_statement as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Enriched Bank Statement\n--\nwith\n    keyed_statement as (\n        select\n            \n    \nmd5(cast(coalesce(cast(account_no as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transacted_on as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(description as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\", *\n        from \"mrzzy\".\"public\".\"stg_uob_statement\"\n    ),\n\n    unique_statement as (\n        (\n            select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by processed_on desc\n            ) as n_row\n        from keyed_statement\n    )\nwhere n_row = 1\n        )\n    )\n\n-- enrich statement with account dimension\nselect t.*, a.id as account_id\nfrom unique_statement as t\nleft join \"mrzzy\".\"public\".\"dim_account\" as a on a.vendor_id = t.account_no\n)"}], "column_name": null, "file_key_name": "models.int_unique_enriched_bank_statement"}, "test.providence.dbt_utils_expression_is_true_int_unique_enriched_bank_statement_statement_end_processed_on.ba42e179c9": {"test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "statement_end <= processed_on", "model": "{{ get_where_subquery(ref('int_unique_enriched_bank_statement')) }}"}, "namespace": "dbt_utils"}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_int_unique_enriched_bank_statement_statement_end_processed_on", "resource_type": "test", "package_name": "providence", "path": "dbt_utils_expression_is_true_i_7458077812dc113d6b215a2eba9ce8bf.sql", "original_file_path": "models/intermediate/transforms/models.yml", "unique_id": "test.providence.dbt_utils_expression_is_true_int_unique_enriched_bank_statement_statement_end_processed_on.ba42e179c9", "fqn": ["providence", "intermediate", "transforms", "dbt_utils_expression_is_true_int_unique_enriched_bank_statement_statement_end_processed_on"], "alias": "dbt_utils_expression_is_true_i_7458077812dc113d6b215a2eba9ce8bf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_i_7458077812dc113d6b215a2eba9ce8bf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_expression_is_true_i_7458077812dc113d6b215a2eba9ce8bf"}, "created_at": 1684070075.8006985, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_i_7458077812dc113d6b215a2eba9ce8bf\") }}", "language": "sql", "refs": [["int_unique_enriched_bank_statement"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.int_unique_enriched_bank_statement"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/models.yml/dbt_utils_expression_is_true_i_7458077812dc113d6b215a2eba9ce8bf.sql", "compiled": true, "compiled_code": "\n\n\n\nwith __dbt__cte__int_unique_enriched_bank_statement as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Enriched Bank Statement\n--\nwith\n    keyed_statement as (\n        select\n            \n    \nmd5(cast(coalesce(cast(account_no as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transacted_on as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(description as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\", *\n        from \"mrzzy\".\"public\".\"stg_uob_statement\"\n    ),\n\n    unique_statement as (\n        (\n            select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by processed_on desc\n            ) as n_row\n        from keyed_statement\n    )\nwhere n_row = 1\n        )\n    )\n\n-- enrich statement with account dimension\nselect t.*, a.id as account_id\nfrom unique_statement as t\nleft join \"mrzzy\".\"public\".\"dim_account\" as a on a.vendor_id = t.account_no\n)select\n    1\nfrom __dbt__cte__int_unique_enriched_bank_statement\n\nwhere not(statement_end <= processed_on)\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_enriched_bank_statement", "sql": " __dbt__cte__int_unique_enriched_bank_statement as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Enriched Bank Statement\n--\nwith\n    keyed_statement as (\n        select\n            \n    \nmd5(cast(coalesce(cast(account_no as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(transacted_on as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(description as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \"id\", *\n        from \"mrzzy\".\"public\".\"stg_uob_statement\"\n    ),\n\n    unique_statement as (\n        (\n            select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by processed_on desc\n            ) as n_row\n        from keyed_statement\n    )\nwhere n_row = 1\n        )\n    )\n\n-- enrich statement with account dimension\nselect t.*, a.id as account_id\nfrom unique_statement as t\nleft join \"mrzzy\".\"public\".\"dim_account\" as a on a.vendor_id = t.account_no\n)"}], "column_name": null, "file_key_name": "models.int_unique_enriched_bank_statement"}, "test.providence.not_null_int_unique_transaction_id.3961df60ec": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('int_unique_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_int_unique_transaction_id", "resource_type": "test", "package_name": "providence", "path": "not_null_int_unique_transaction_id.sql", "original_file_path": "models/intermediate/transforms/models.yml", "unique_id": "test.providence.not_null_int_unique_transaction_id.3961df60ec", "fqn": ["providence", "intermediate", "transforms", "not_null_int_unique_transaction_id"], "alias": "not_null_int_unique_transaction_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.8063002, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_unique_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.int_unique_transaction"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/models.yml/not_null_int_unique_transaction_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_unique_transaction as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Accounting Transactions\n--\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by scraped_on desc\n            ) as n_row\n        from \"mrzzy\".\"public\".\"stg_ynab_transaction\"\n    )\nwhere n_row = 1\n    )\nwhere is_deleted = false\n)select id\nfrom __dbt__cte__int_unique_transaction\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_transaction", "sql": " __dbt__cte__int_unique_transaction as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Accounting Transactions\n--\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by scraped_on desc\n            ) as n_row\n        from \"mrzzy\".\"public\".\"stg_ynab_transaction\"\n    )\nwhere n_row = 1\n    )\nwhere is_deleted = false\n)"}], "column_name": "id", "file_key_name": "models.int_unique_transaction"}, "test.providence.unique_int_unique_transaction_id.8055ebb23a": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('int_unique_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "unique_int_unique_transaction_id", "resource_type": "test", "package_name": "providence", "path": "unique_int_unique_transaction_id.sql", "original_file_path": "models/intermediate/transforms/models.yml", "unique_id": "test.providence.unique_int_unique_transaction_id.8055ebb23a", "fqn": ["providence", "intermediate", "transforms", "unique_int_unique_transaction_id"], "alias": "unique_int_unique_transaction_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.8084562, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_unique_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.int_unique_transaction"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/models.yml/unique_int_unique_transaction_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith __dbt__cte__int_unique_transaction as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Accounting Transactions\n--\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by scraped_on desc\n            ) as n_row\n        from \"mrzzy\".\"public\".\"stg_ynab_transaction\"\n    )\nwhere n_row = 1\n    )\nwhere is_deleted = false\n)select\n    id as unique_field,\n    count(*) as n_records\n\nfrom __dbt__cte__int_unique_transaction\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_transaction", "sql": " __dbt__cte__int_unique_transaction as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Accounting Transactions\n--\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by scraped_on desc\n            ) as n_row\n        from \"mrzzy\".\"public\".\"stg_ynab_transaction\"\n    )\nwhere n_row = 1\n    )\nwhere is_deleted = false\n)"}], "column_name": "id", "file_key_name": "models.int_unique_transaction"}, "test.providence.not_null_int_unique_transaction_amount.fa0cc48955": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "amount", "model": "{{ get_where_subquery(ref('int_unique_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_int_unique_transaction_amount", "resource_type": "test", "package_name": "providence", "path": "not_null_int_unique_transaction_amount.sql", "original_file_path": "models/intermediate/transforms/models.yml", "unique_id": "test.providence.not_null_int_unique_transaction_amount.fa0cc48955", "fqn": ["providence", "intermediate", "transforms", "not_null_int_unique_transaction_amount"], "alias": "not_null_int_unique_transaction_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.8109004, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_unique_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.int_unique_transaction"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/models.yml/not_null_int_unique_transaction_amount.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_unique_transaction as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Accounting Transactions\n--\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by scraped_on desc\n            ) as n_row\n        from \"mrzzy\".\"public\".\"stg_ynab_transaction\"\n    )\nwhere n_row = 1\n    )\nwhere is_deleted = false\n)select amount\nfrom __dbt__cte__int_unique_transaction\nwhere amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_transaction", "sql": " __dbt__cte__int_unique_transaction as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Accounting Transactions\n--\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by scraped_on desc\n            ) as n_row\n        from \"mrzzy\".\"public\".\"stg_ynab_transaction\"\n    )\nwhere n_row = 1\n    )\nwhere is_deleted = false\n)"}], "column_name": "amount", "file_key_name": "models.int_unique_transaction"}, "test.providence.not_null_int_unique_transaction_clearing_status.60bf364a93": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "clearing_status", "model": "{{ get_where_subquery(ref('int_unique_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_int_unique_transaction_clearing_status", "resource_type": "test", "package_name": "providence", "path": "not_null_int_unique_transaction_clearing_status.sql", "original_file_path": "models/intermediate/transforms/models.yml", "unique_id": "test.providence.not_null_int_unique_transaction_clearing_status.60bf364a93", "fqn": ["providence", "intermediate", "transforms", "not_null_int_unique_transaction_clearing_status"], "alias": "not_null_int_unique_transaction_clearing_status", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.8130133, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_unique_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.int_unique_transaction"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/models.yml/not_null_int_unique_transaction_clearing_status.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_unique_transaction as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Accounting Transactions\n--\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by scraped_on desc\n            ) as n_row\n        from \"mrzzy\".\"public\".\"stg_ynab_transaction\"\n    )\nwhere n_row = 1\n    )\nwhere is_deleted = false\n)select clearing_status\nfrom __dbt__cte__int_unique_transaction\nwhere clearing_status is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_transaction", "sql": " __dbt__cte__int_unique_transaction as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Accounting Transactions\n--\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by scraped_on desc\n            ) as n_row\n        from \"mrzzy\".\"public\".\"stg_ynab_transaction\"\n    )\nwhere n_row = 1\n    )\nwhere is_deleted = false\n)"}], "column_name": "clearing_status", "file_key_name": "models.int_unique_transaction"}, "test.providence.accepted_values_int_unique_transaction_clearing_status__cleared__uncleared__reconciled.dfe24d24da": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["cleared", "uncleared", "reconciled"], "column_name": "clearing_status", "model": "{{ get_where_subquery(ref('int_unique_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "accepted_values_int_unique_transaction_clearing_status__cleared__uncleared__reconciled", "resource_type": "test", "package_name": "providence", "path": "accepted_values_int_unique_tra_b6cea34cbf822690ab56c7bbc08c3ec3.sql", "original_file_path": "models/intermediate/transforms/models.yml", "unique_id": "test.providence.accepted_values_int_unique_transaction_clearing_status__cleared__uncleared__reconciled.dfe24d24da", "fqn": ["providence", "intermediate", "transforms", "accepted_values_int_unique_transaction_clearing_status__cleared__uncleared__reconciled"], "alias": "accepted_values_int_unique_tra_b6cea34cbf822690ab56c7bbc08c3ec3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_int_unique_tra_b6cea34cbf822690ab56c7bbc08c3ec3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_int_unique_tra_b6cea34cbf822690ab56c7bbc08c3ec3"}, "created_at": 1684070075.815156, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_int_unique_tra_b6cea34cbf822690ab56c7bbc08c3ec3\") }}", "language": "sql", "refs": [["int_unique_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.int_unique_transaction"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/models.yml/accepted_values_int_unique_tra_b6cea34cbf822690ab56c7bbc08c3ec3.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith  __dbt__cte__int_unique_transaction as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Accounting Transactions\n--\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by scraped_on desc\n            ) as n_row\n        from \"mrzzy\".\"public\".\"stg_ynab_transaction\"\n    )\nwhere n_row = 1\n    )\nwhere is_deleted = false\n),all_values as (\n\n    select\n        clearing_status as value_field,\n        count(*) as n_records\n\n    from __dbt__cte__int_unique_transaction\n    group by clearing_status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'cleared','uncleared','reconciled'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_transaction", "sql": " __dbt__cte__int_unique_transaction as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Accounting Transactions\n--\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by scraped_on desc\n            ) as n_row\n        from \"mrzzy\".\"public\".\"stg_ynab_transaction\"\n    )\nwhere n_row = 1\n    )\nwhere is_deleted = false\n)"}], "column_name": "clearing_status", "file_key_name": "models.int_unique_transaction"}, "test.providence.not_null_int_unique_transaction_is_approved.15482bf359": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_approved", "model": "{{ get_where_subquery(ref('int_unique_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_int_unique_transaction_is_approved", "resource_type": "test", "package_name": "providence", "path": "not_null_int_unique_transaction_is_approved.sql", "original_file_path": "models/intermediate/transforms/models.yml", "unique_id": "test.providence.not_null_int_unique_transaction_is_approved.15482bf359", "fqn": ["providence", "intermediate", "transforms", "not_null_int_unique_transaction_is_approved"], "alias": "not_null_int_unique_transaction_is_approved", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.8215063, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_unique_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.int_unique_transaction"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/models.yml/not_null_int_unique_transaction_is_approved.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_unique_transaction as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Accounting Transactions\n--\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by scraped_on desc\n            ) as n_row\n        from \"mrzzy\".\"public\".\"stg_ynab_transaction\"\n    )\nwhere n_row = 1\n    )\nwhere is_deleted = false\n)select is_approved\nfrom __dbt__cte__int_unique_transaction\nwhere is_approved is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_transaction", "sql": " __dbt__cte__int_unique_transaction as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Accounting Transactions\n--\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by scraped_on desc\n            ) as n_row\n        from \"mrzzy\".\"public\".\"stg_ynab_transaction\"\n    )\nwhere n_row = 1\n    )\nwhere is_deleted = false\n)"}], "column_name": "is_approved", "file_key_name": "models.int_unique_transaction"}, "test.providence.not_null_int_unique_transaction_is_deleted.5e8e178bd0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_deleted", "model": "{{ get_where_subquery(ref('int_unique_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_int_unique_transaction_is_deleted", "resource_type": "test", "package_name": "providence", "path": "not_null_int_unique_transaction_is_deleted.sql", "original_file_path": "models/intermediate/transforms/models.yml", "unique_id": "test.providence.not_null_int_unique_transaction_is_deleted.5e8e178bd0", "fqn": ["providence", "intermediate", "transforms", "not_null_int_unique_transaction_is_deleted"], "alias": "not_null_int_unique_transaction_is_deleted", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.8236377, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_unique_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.int_unique_transaction"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/models.yml/not_null_int_unique_transaction_is_deleted.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_unique_transaction as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Accounting Transactions\n--\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by scraped_on desc\n            ) as n_row\n        from \"mrzzy\".\"public\".\"stg_ynab_transaction\"\n    )\nwhere n_row = 1\n    )\nwhere is_deleted = false\n)select is_deleted\nfrom __dbt__cte__int_unique_transaction\nwhere is_deleted is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_transaction", "sql": " __dbt__cte__int_unique_transaction as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Accounting Transactions\n--\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by scraped_on desc\n            ) as n_row\n        from \"mrzzy\".\"public\".\"stg_ynab_transaction\"\n    )\nwhere n_row = 1\n    )\nwhere is_deleted = false\n)"}], "column_name": "is_deleted", "file_key_name": "models.int_unique_transaction"}, "test.providence.accepted_values_int_unique_transaction_is_deleted__False.789e301767": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": [false], "column_name": "is_deleted", "model": "{{ get_where_subquery(ref('int_unique_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "accepted_values_int_unique_transaction_is_deleted__False", "resource_type": "test", "package_name": "providence", "path": "accepted_values_int_unique_transaction_is_deleted__False.sql", "original_file_path": "models/intermediate/transforms/models.yml", "unique_id": "test.providence.accepted_values_int_unique_transaction_is_deleted__False.789e301767", "fqn": ["providence", "intermediate", "transforms", "accepted_values_int_unique_transaction_is_deleted__False"], "alias": "accepted_values_int_unique_transaction_is_deleted__False", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.825785, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_unique_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.int_unique_transaction"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/models.yml/accepted_values_int_unique_transaction_is_deleted__False.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith  __dbt__cte__int_unique_transaction as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Accounting Transactions\n--\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by scraped_on desc\n            ) as n_row\n        from \"mrzzy\".\"public\".\"stg_ynab_transaction\"\n    )\nwhere n_row = 1\n    )\nwhere is_deleted = false\n),all_values as (\n\n    select\n        is_deleted as value_field,\n        count(*) as n_records\n\n    from __dbt__cte__int_unique_transaction\n    group by is_deleted\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'False'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_transaction", "sql": " __dbt__cte__int_unique_transaction as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Accounting Transactions\n--\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by scraped_on desc\n            ) as n_row\n        from \"mrzzy\".\"public\".\"stg_ynab_transaction\"\n    )\nwhere n_row = 1\n    )\nwhere is_deleted = false\n)"}], "column_name": "is_deleted", "file_key_name": "models.int_unique_transaction"}, "test.providence.not_null_int_unique_transaction_budget_id.d1f3858f87": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "budget_id", "model": "{{ get_where_subquery(ref('int_unique_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_int_unique_transaction_budget_id", "resource_type": "test", "package_name": "providence", "path": "not_null_int_unique_transaction_budget_id.sql", "original_file_path": "models/intermediate/transforms/models.yml", "unique_id": "test.providence.not_null_int_unique_transaction_budget_id.d1f3858f87", "fqn": ["providence", "intermediate", "transforms", "not_null_int_unique_transaction_budget_id"], "alias": "not_null_int_unique_transaction_budget_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.8305583, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_unique_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.int_unique_transaction"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/models.yml/not_null_int_unique_transaction_budget_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_unique_transaction as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Accounting Transactions\n--\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by scraped_on desc\n            ) as n_row\n        from \"mrzzy\".\"public\".\"stg_ynab_transaction\"\n    )\nwhere n_row = 1\n    )\nwhere is_deleted = false\n)select budget_id\nfrom __dbt__cte__int_unique_transaction\nwhere budget_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_transaction", "sql": " __dbt__cte__int_unique_transaction as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Accounting Transactions\n--\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by scraped_on desc\n            ) as n_row\n        from \"mrzzy\".\"public\".\"stg_ynab_transaction\"\n    )\nwhere n_row = 1\n    )\nwhere is_deleted = false\n)"}], "column_name": "budget_id", "file_key_name": "models.int_unique_transaction"}, "test.providence.relationships_int_unique_transaction_budget_id__id__ref_stg_ynab_budget_.959d640562": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref(\"stg_ynab_budget\")", "field": "id", "column_name": "budget_id", "model": "{{ get_where_subquery(ref('int_unique_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "relationships_int_unique_transaction_budget_id__id__ref_stg_ynab_budget_", "resource_type": "test", "package_name": "providence", "path": "relationships_int_unique_trans_0080a4d9ee289914b672ee66e91464d6.sql", "original_file_path": "models/intermediate/transforms/models.yml", "unique_id": "test.providence.relationships_int_unique_transaction_budget_id__id__ref_stg_ynab_budget_.959d640562", "fqn": ["providence", "intermediate", "transforms", "relationships_int_unique_transaction_budget_id__id__ref_stg_ynab_budget_"], "alias": "relationships_int_unique_trans_0080a4d9ee289914b672ee66e91464d6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_int_unique_trans_0080a4d9ee289914b672ee66e91464d6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_int_unique_trans_0080a4d9ee289914b672ee66e91464d6"}, "created_at": 1684070075.8326902, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_int_unique_trans_0080a4d9ee289914b672ee66e91464d6\") }}", "language": "sql", "refs": [["stg_ynab_budget"], ["int_unique_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_budget", "model.providence.int_unique_transaction"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/models.yml/relationships_int_unique_trans_0080a4d9ee289914b672ee66e91464d6.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith  __dbt__cte__int_unique_transaction as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Accounting Transactions\n--\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by scraped_on desc\n            ) as n_row\n        from \"mrzzy\".\"public\".\"stg_ynab_transaction\"\n    )\nwhere n_row = 1\n    )\nwhere is_deleted = false\n),child as (\n    select budget_id as from_field\n    from __dbt__cte__int_unique_transaction\n    where budget_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"mrzzy\".\"public\".\"stg_ynab_budget\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_transaction", "sql": " __dbt__cte__int_unique_transaction as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Accounting Transactions\n--\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by scraped_on desc\n            ) as n_row\n        from \"mrzzy\".\"public\".\"stg_ynab_transaction\"\n    )\nwhere n_row = 1\n    )\nwhere is_deleted = false\n)"}], "column_name": "budget_id", "file_key_name": "models.int_unique_transaction"}, "test.providence.not_null_int_unique_transaction_account_id.ed556e32fe": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('int_unique_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_int_unique_transaction_account_id", "resource_type": "test", "package_name": "providence", "path": "not_null_int_unique_transaction_account_id.sql", "original_file_path": "models/intermediate/transforms/models.yml", "unique_id": "test.providence.not_null_int_unique_transaction_account_id.ed556e32fe", "fqn": ["providence", "intermediate", "transforms", "not_null_int_unique_transaction_account_id"], "alias": "not_null_int_unique_transaction_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.8389359, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_unique_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.int_unique_transaction"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/models.yml/not_null_int_unique_transaction_account_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_unique_transaction as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Accounting Transactions\n--\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by scraped_on desc\n            ) as n_row\n        from \"mrzzy\".\"public\".\"stg_ynab_transaction\"\n    )\nwhere n_row = 1\n    )\nwhere is_deleted = false\n)select account_id\nfrom __dbt__cte__int_unique_transaction\nwhere account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_transaction", "sql": " __dbt__cte__int_unique_transaction as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Accounting Transactions\n--\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by scraped_on desc\n            ) as n_row\n        from \"mrzzy\".\"public\".\"stg_ynab_transaction\"\n    )\nwhere n_row = 1\n    )\nwhere is_deleted = false\n)"}], "column_name": "account_id", "file_key_name": "models.int_unique_transaction"}, "test.providence.relationships_int_unique_transaction_account_id__id__ref_stg_ynab_account_.b8c211589f": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref(\"stg_ynab_account\")", "field": "id", "column_name": "account_id", "model": "{{ get_where_subquery(ref('int_unique_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "relationships_int_unique_transaction_account_id__id__ref_stg_ynab_account_", "resource_type": "test", "package_name": "providence", "path": "relationships_int_unique_trans_846319f7fbe9a894c62376ea7fd1d77b.sql", "original_file_path": "models/intermediate/transforms/models.yml", "unique_id": "test.providence.relationships_int_unique_transaction_account_id__id__ref_stg_ynab_account_.b8c211589f", "fqn": ["providence", "intermediate", "transforms", "relationships_int_unique_transaction_account_id__id__ref_stg_ynab_account_"], "alias": "relationships_int_unique_trans_846319f7fbe9a894c62376ea7fd1d77b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_int_unique_trans_846319f7fbe9a894c62376ea7fd1d77b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_int_unique_trans_846319f7fbe9a894c62376ea7fd1d77b"}, "created_at": 1684070075.8410702, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_int_unique_trans_846319f7fbe9a894c62376ea7fd1d77b\") }}", "language": "sql", "refs": [["stg_ynab_account"], ["int_unique_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_account", "model.providence.int_unique_transaction"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/models.yml/relationships_int_unique_trans_846319f7fbe9a894c62376ea7fd1d77b.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith  __dbt__cte__int_unique_transaction as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Accounting Transactions\n--\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by scraped_on desc\n            ) as n_row\n        from \"mrzzy\".\"public\".\"stg_ynab_transaction\"\n    )\nwhere n_row = 1\n    )\nwhere is_deleted = false\n),child as (\n    select account_id as from_field\n    from __dbt__cte__int_unique_transaction\n    where account_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"mrzzy\".\"public\".\"stg_ynab_account\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_transaction", "sql": " __dbt__cte__int_unique_transaction as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Accounting Transactions\n--\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by scraped_on desc\n            ) as n_row\n        from \"mrzzy\".\"public\".\"stg_ynab_transaction\"\n    )\nwhere n_row = 1\n    )\nwhere is_deleted = false\n)"}], "column_name": "account_id", "file_key_name": "models.int_unique_transaction"}, "test.providence.relationships_int_unique_transaction_payee_id__id__ref_stg_ynab_payee_.632982383f": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref(\"stg_ynab_payee\")", "field": "id", "column_name": "payee_id", "model": "{{ get_where_subquery(ref('int_unique_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "relationships_int_unique_transaction_payee_id__id__ref_stg_ynab_payee_", "resource_type": "test", "package_name": "providence", "path": "relationships_int_unique_trans_640707a05e9dd0531add142001e90248.sql", "original_file_path": "models/intermediate/transforms/models.yml", "unique_id": "test.providence.relationships_int_unique_transaction_payee_id__id__ref_stg_ynab_payee_.632982383f", "fqn": ["providence", "intermediate", "transforms", "relationships_int_unique_transaction_payee_id__id__ref_stg_ynab_payee_"], "alias": "relationships_int_unique_trans_640707a05e9dd0531add142001e90248", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_int_unique_trans_640707a05e9dd0531add142001e90248", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_int_unique_trans_640707a05e9dd0531add142001e90248"}, "created_at": 1684070075.8477445, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_int_unique_trans_640707a05e9dd0531add142001e90248\") }}", "language": "sql", "refs": [["stg_ynab_payee"], ["int_unique_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_payee", "model.providence.int_unique_transaction"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/models.yml/relationships_int_unique_trans_640707a05e9dd0531add142001e90248.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith  __dbt__cte__int_unique_transaction as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Accounting Transactions\n--\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by scraped_on desc\n            ) as n_row\n        from \"mrzzy\".\"public\".\"stg_ynab_transaction\"\n    )\nwhere n_row = 1\n    )\nwhere is_deleted = false\n),child as (\n    select payee_id as from_field\n    from __dbt__cte__int_unique_transaction\n    where payee_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"mrzzy\".\"public\".\"stg_ynab_payee\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_transaction", "sql": " __dbt__cte__int_unique_transaction as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Accounting Transactions\n--\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by scraped_on desc\n            ) as n_row\n        from \"mrzzy\".\"public\".\"stg_ynab_transaction\"\n    )\nwhere n_row = 1\n    )\nwhere is_deleted = false\n)"}], "column_name": "payee_id", "file_key_name": "models.int_unique_transaction"}, "test.providence.relationships_int_unique_transaction_transfer_account_id__id__ref_stg_ynab_account_.1b44f14cac": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref(\"stg_ynab_account\")", "field": "id", "column_name": "transfer_account_id", "model": "{{ get_where_subquery(ref('int_unique_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "relationships_int_unique_transaction_transfer_account_id__id__ref_stg_ynab_account_", "resource_type": "test", "package_name": "providence", "path": "relationships_int_unique_trans_6511f834c4b1bd2ce8fee8cb9ccc2d39.sql", "original_file_path": "models/intermediate/transforms/models.yml", "unique_id": "test.providence.relationships_int_unique_transaction_transfer_account_id__id__ref_stg_ynab_account_.1b44f14cac", "fqn": ["providence", "intermediate", "transforms", "relationships_int_unique_transaction_transfer_account_id__id__ref_stg_ynab_account_"], "alias": "relationships_int_unique_trans_6511f834c4b1bd2ce8fee8cb9ccc2d39", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_int_unique_trans_6511f834c4b1bd2ce8fee8cb9ccc2d39", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_int_unique_trans_6511f834c4b1bd2ce8fee8cb9ccc2d39"}, "created_at": 1684070075.8538332, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_int_unique_trans_6511f834c4b1bd2ce8fee8cb9ccc2d39\") }}", "language": "sql", "refs": [["stg_ynab_account"], ["int_unique_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_account", "model.providence.int_unique_transaction"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/models.yml/relationships_int_unique_trans_6511f834c4b1bd2ce8fee8cb9ccc2d39.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith  __dbt__cte__int_unique_transaction as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Accounting Transactions\n--\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by scraped_on desc\n            ) as n_row\n        from \"mrzzy\".\"public\".\"stg_ynab_transaction\"\n    )\nwhere n_row = 1\n    )\nwhere is_deleted = false\n),child as (\n    select transfer_account_id as from_field\n    from __dbt__cte__int_unique_transaction\n    where transfer_account_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"mrzzy\".\"public\".\"stg_ynab_account\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_transaction", "sql": " __dbt__cte__int_unique_transaction as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Accounting Transactions\n--\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by scraped_on desc\n            ) as n_row\n        from \"mrzzy\".\"public\".\"stg_ynab_transaction\"\n    )\nwhere n_row = 1\n    )\nwhere is_deleted = false\n)"}], "column_name": "transfer_account_id", "file_key_name": "models.int_unique_transaction"}, "test.providence.not_null_int_unique_transaction_date.821ad44e28": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('int_unique_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_int_unique_transaction_date", "resource_type": "test", "package_name": "providence", "path": "not_null_int_unique_transaction_date.sql", "original_file_path": "models/intermediate/transforms/models.yml", "unique_id": "test.providence.not_null_int_unique_transaction_date.821ad44e28", "fqn": ["providence", "intermediate", "transforms", "not_null_int_unique_transaction_date"], "alias": "not_null_int_unique_transaction_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.8599424, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_unique_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.int_unique_transaction"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/models.yml/not_null_int_unique_transaction_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_unique_transaction as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Accounting Transactions\n--\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by scraped_on desc\n            ) as n_row\n        from \"mrzzy\".\"public\".\"stg_ynab_transaction\"\n    )\nwhere n_row = 1\n    )\nwhere is_deleted = false\n)select date\nfrom __dbt__cte__int_unique_transaction\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_transaction", "sql": " __dbt__cte__int_unique_transaction as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Accounting Transactions\n--\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by scraped_on desc\n            ) as n_row\n        from \"mrzzy\".\"public\".\"stg_ynab_transaction\"\n    )\nwhere n_row = 1\n    )\nwhere is_deleted = false\n)"}], "column_name": "date", "file_key_name": "models.int_unique_transaction"}, "test.providence.not_null_int_unique_transaction_scraped_on.bb329b36ca": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "scraped_on", "model": "{{ get_where_subquery(ref('int_unique_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_int_unique_transaction_scraped_on", "resource_type": "test", "package_name": "providence", "path": "not_null_int_unique_transaction_scraped_on.sql", "original_file_path": "models/intermediate/transforms/models.yml", "unique_id": "test.providence.not_null_int_unique_transaction_scraped_on.bb329b36ca", "fqn": ["providence", "intermediate", "transforms", "not_null_int_unique_transaction_scraped_on"], "alias": "not_null_int_unique_transaction_scraped_on", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.8620515, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_unique_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.int_unique_transaction"]}, "compiled_path": "target/compiled/providence/models/intermediate/transforms/models.yml/not_null_int_unique_transaction_scraped_on.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_unique_transaction as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Accounting Transactions\n--\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by scraped_on desc\n            ) as n_row\n        from \"mrzzy\".\"public\".\"stg_ynab_transaction\"\n    )\nwhere n_row = 1\n    )\nwhere is_deleted = false\n)select scraped_on\nfrom __dbt__cte__int_unique_transaction\nwhere scraped_on is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.providence.int_unique_transaction", "sql": " __dbt__cte__int_unique_transaction as (\n--\n-- Providence\n-- Transforms\n-- DBT Intermediate: Unique Accounting Transactions\n--\nselect *\nfrom\n    (\n        select *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by id order by scraped_on desc\n            ) as n_row\n        from \"mrzzy\".\"public\".\"stg_ynab_transaction\"\n    )\nwhere n_row = 1\n    )\nwhere is_deleted = false\n)"}], "column_name": "scraped_on", "file_key_name": "models.int_unique_transaction"}, "test.providence.unique_dim_date_id.54c6b7737b": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('dim_date')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "unique_dim_date_id", "resource_type": "test", "package_name": "providence", "path": "unique_dim_date_id.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.unique_dim_date_id.54c6b7737b", "fqn": ["providence", "intermediate", "dim_model", "unique_dim_date_id"], "alias": "unique_dim_date_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.9251919, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_date"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_date"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/unique_dim_date_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"mrzzy\".\"public\".\"dim_date\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "id", "file_key_name": "models.dim_date"}, "test.providence.not_null_dim_date_id.49e434ad59": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('dim_date')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_dim_date_id", "resource_type": "test", "package_name": "providence", "path": "not_null_dim_date_id.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_dim_date_id.49e434ad59", "fqn": ["providence", "intermediate", "dim_model", "not_null_dim_date_id"], "alias": "not_null_dim_date_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.9275167, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_date"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_date"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_dim_date_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"mrzzy\".\"public\".\"dim_date\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "id", "file_key_name": "models.dim_date"}, "test.providence.not_null_dim_date_date.78f11e7735": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('dim_date')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_dim_date_date", "resource_type": "test", "package_name": "providence", "path": "not_null_dim_date_date.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_dim_date_date.78f11e7735", "fqn": ["providence", "intermediate", "dim_model", "not_null_dim_date_date"], "alias": "not_null_dim_date_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.9296563, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_date"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_date"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_dim_date_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom \"mrzzy\".\"public\".\"dim_date\"\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "date", "file_key_name": "models.dim_date"}, "test.providence.not_null_dim_date_day_of_month.8ae109937d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "day_of_month", "model": "{{ get_where_subquery(ref('dim_date')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_dim_date_day_of_month", "resource_type": "test", "package_name": "providence", "path": "not_null_dim_date_day_of_month.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_dim_date_day_of_month.8ae109937d", "fqn": ["providence", "intermediate", "dim_model", "not_null_dim_date_day_of_month"], "alias": "not_null_dim_date_day_of_month", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.932076, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_date"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_date"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_dim_date_day_of_month.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect day_of_month\nfrom \"mrzzy\".\"public\".\"dim_date\"\nwhere day_of_month is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "day_of_month", "file_key_name": "models.dim_date"}, "test.providence.dbt_utils_accepted_range_dim_date_day_of_month__31__1.15b4b189b7": {"test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 1, "max_value": 31, "column_name": "day_of_month", "model": "{{ get_where_subquery(ref('dim_date')) }}"}, "namespace": "dbt_utils"}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "dbt_utils_accepted_range_dim_date_day_of_month__31__1", "resource_type": "test", "package_name": "providence", "path": "dbt_utils_accepted_range_dim_date_day_of_month__31__1.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.dbt_utils_accepted_range_dim_date_day_of_month__31__1.15b4b189b7", "fqn": ["providence", "intermediate", "dim_model", "dbt_utils_accepted_range_dim_date_day_of_month__31__1"], "alias": "dbt_utils_accepted_range_dim_date_day_of_month__31__1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.9342024, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_date"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_date"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/dbt_utils_accepted_range_dim_date_day_of_month__31__1.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"mrzzy\".\"public\".\"dim_date\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not day_of_month >= 1\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not day_of_month <= 31\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "day_of_month", "file_key_name": "models.dim_date"}, "test.providence.not_null_dim_date_day_of_week.45321d6610": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "day_of_week", "model": "{{ get_where_subquery(ref('dim_date')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_dim_date_day_of_week", "resource_type": "test", "package_name": "providence", "path": "not_null_dim_date_day_of_week.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_dim_date_day_of_week.45321d6610", "fqn": ["providence", "intermediate", "dim_model", "not_null_dim_date_day_of_week"], "alias": "not_null_dim_date_day_of_week", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.9397688, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_date"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_date"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_dim_date_day_of_week.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect day_of_week\nfrom \"mrzzy\".\"public\".\"dim_date\"\nwhere day_of_week is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "day_of_week", "file_key_name": "models.dim_date"}, "test.providence.dbt_utils_accepted_range_dim_date_day_of_week__6__0.bfe7eaced3": {"test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "max_value": 6, "column_name": "day_of_week", "model": "{{ get_where_subquery(ref('dim_date')) }}"}, "namespace": "dbt_utils"}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "dbt_utils_accepted_range_dim_date_day_of_week__6__0", "resource_type": "test", "package_name": "providence", "path": "dbt_utils_accepted_range_dim_date_day_of_week__6__0.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.dbt_utils_accepted_range_dim_date_day_of_week__6__0.bfe7eaced3", "fqn": ["providence", "intermediate", "dim_model", "dbt_utils_accepted_range_dim_date_day_of_week__6__0"], "alias": "dbt_utils_accepted_range_dim_date_day_of_week__6__0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.9419007, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_date"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_date"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/dbt_utils_accepted_range_dim_date_day_of_week__6__0.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"mrzzy\".\"public\".\"dim_date\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not day_of_week >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not day_of_week <= 6\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "day_of_week", "file_key_name": "models.dim_date"}, "test.providence.not_null_dim_date_weekday_name.33b8ebe86e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "weekday_name", "model": "{{ get_where_subquery(ref('dim_date')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_dim_date_weekday_name", "resource_type": "test", "package_name": "providence", "path": "not_null_dim_date_weekday_name.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_dim_date_weekday_name.33b8ebe86e", "fqn": ["providence", "intermediate", "dim_model", "not_null_dim_date_weekday_name"], "alias": "not_null_dim_date_weekday_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.9466076, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_date"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_date"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_dim_date_weekday_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect weekday_name\nfrom \"mrzzy\".\"public\".\"dim_date\"\nwhere weekday_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "weekday_name", "file_key_name": "models.dim_date"}, "test.providence.not_null_dim_date_month_of_year.951ad9a5b5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "month_of_year", "model": "{{ get_where_subquery(ref('dim_date')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_dim_date_month_of_year", "resource_type": "test", "package_name": "providence", "path": "not_null_dim_date_month_of_year.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_dim_date_month_of_year.951ad9a5b5", "fqn": ["providence", "intermediate", "dim_model", "not_null_dim_date_month_of_year"], "alias": "not_null_dim_date_month_of_year", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.9490051, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_date"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_date"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_dim_date_month_of_year.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect month_of_year\nfrom \"mrzzy\".\"public\".\"dim_date\"\nwhere month_of_year is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "month_of_year", "file_key_name": "models.dim_date"}, "test.providence.dbt_utils_accepted_range_dim_date_month_of_year__12__1.e6a5877b18": {"test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 1, "max_value": 12, "column_name": "month_of_year", "model": "{{ get_where_subquery(ref('dim_date')) }}"}, "namespace": "dbt_utils"}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "dbt_utils_accepted_range_dim_date_month_of_year__12__1", "resource_type": "test", "package_name": "providence", "path": "dbt_utils_accepted_range_dim_date_month_of_year__12__1.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.dbt_utils_accepted_range_dim_date_month_of_year__12__1.e6a5877b18", "fqn": ["providence", "intermediate", "dim_model", "dbt_utils_accepted_range_dim_date_month_of_year__12__1"], "alias": "dbt_utils_accepted_range_dim_date_month_of_year__12__1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.9512014, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_date"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_date"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/dbt_utils_accepted_range_dim_date_month_of_year__12__1.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"mrzzy\".\"public\".\"dim_date\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not month_of_year >= 1\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not month_of_year <= 12\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "month_of_year", "file_key_name": "models.dim_date"}, "test.providence.not_null_dim_date_month_name.f33095fb66": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "month_name", "model": "{{ get_where_subquery(ref('dim_date')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_dim_date_month_name", "resource_type": "test", "package_name": "providence", "path": "not_null_dim_date_month_name.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_dim_date_month_name.f33095fb66", "fqn": ["providence", "intermediate", "dim_model", "not_null_dim_date_month_name"], "alias": "not_null_dim_date_month_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.9560678, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_date"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_date"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_dim_date_month_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect month_name\nfrom \"mrzzy\".\"public\".\"dim_date\"\nwhere month_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "month_name", "file_key_name": "models.dim_date"}, "test.providence.not_null_dim_date_month_short.0235b40229": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "month_short", "model": "{{ get_where_subquery(ref('dim_date')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_dim_date_month_short", "resource_type": "test", "package_name": "providence", "path": "not_null_dim_date_month_short.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_dim_date_month_short.0235b40229", "fqn": ["providence", "intermediate", "dim_model", "not_null_dim_date_month_short"], "alias": "not_null_dim_date_month_short", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.9581687, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_date"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_date"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_dim_date_month_short.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect month_short\nfrom \"mrzzy\".\"public\".\"dim_date\"\nwhere month_short is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "month_short", "file_key_name": "models.dim_date"}, "test.providence.not_null_dim_date_year.aac8e263ab": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "year", "model": "{{ get_where_subquery(ref('dim_date')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_dim_date_year", "resource_type": "test", "package_name": "providence", "path": "not_null_dim_date_year.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_dim_date_year.aac8e263ab", "fqn": ["providence", "intermediate", "dim_model", "not_null_dim_date_year"], "alias": "not_null_dim_date_year", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.9603105, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_date"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_date"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_dim_date_year.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect year\nfrom \"mrzzy\".\"public\".\"dim_date\"\nwhere year is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "year", "file_key_name": "models.dim_date"}, "test.providence.not_null_dim_date_is_weekend.cf6d8ca02c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_weekend", "model": "{{ get_where_subquery(ref('dim_date')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_dim_date_is_weekend", "resource_type": "test", "package_name": "providence", "path": "not_null_dim_date_is_weekend.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_dim_date_is_weekend.cf6d8ca02c", "fqn": ["providence", "intermediate", "dim_model", "not_null_dim_date_is_weekend"], "alias": "not_null_dim_date_is_weekend", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.9624677, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_date"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_date"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_dim_date_is_weekend.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect is_weekend\nfrom \"mrzzy\".\"public\".\"dim_date\"\nwhere is_weekend is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "is_weekend", "file_key_name": "models.dim_date"}, "test.providence.not_null_dim_date_updated_at.edca938145": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('dim_date')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_dim_date_updated_at", "resource_type": "test", "package_name": "providence", "path": "not_null_dim_date_updated_at.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_dim_date_updated_at.edca938145", "fqn": ["providence", "intermediate", "dim_model", "not_null_dim_date_updated_at"], "alias": "not_null_dim_date_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.964879, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_date"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_date"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_dim_date_updated_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect updated_at\nfrom \"mrzzy\".\"public\".\"dim_date\"\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "updated_at", "file_key_name": "models.dim_date"}, "test.providence.dbt_utils_expression_is_true_dim_date_len_month_short_3.860ad91e49": {"test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "len(month_short) = 3", "model": "{{ get_where_subquery(ref('dim_date')) }}"}, "namespace": "dbt_utils"}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_dim_date_len_month_short_3", "resource_type": "test", "package_name": "providence", "path": "dbt_utils_expression_is_true_dim_date_len_month_short_3.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.dbt_utils_expression_is_true_dim_date_len_month_short_3.860ad91e49", "fqn": ["providence", "intermediate", "dim_model", "dbt_utils_expression_is_true_dim_date_len_month_short_3"], "alias": "dbt_utils_expression_is_true_dim_date_len_month_short_3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.9670231, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_date"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_date"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/dbt_utils_expression_is_true_dim_date_len_month_short_3.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"mrzzy\".\"public\".\"dim_date\"\n\nwhere not(len(month_short) = 3)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.dim_date"}, "test.providence.dbt_utils_expression_is_true_dim_date_len_weekday_short_3.54c7bc245e": {"test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "len(weekday_short) = 3", "model": "{{ get_where_subquery(ref('dim_date')) }}"}, "namespace": "dbt_utils"}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_dim_date_len_weekday_short_3", "resource_type": "test", "package_name": "providence", "path": "dbt_utils_expression_is_true_dim_date_len_weekday_short_3.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.dbt_utils_expression_is_true_dim_date_len_weekday_short_3.54c7bc245e", "fqn": ["providence", "intermediate", "dim_model", "dbt_utils_expression_is_true_dim_date_len_weekday_short_3"], "alias": "dbt_utils_expression_is_true_dim_date_len_weekday_short_3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.9724226, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_date"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_date"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/dbt_utils_expression_is_true_dim_date_len_weekday_short_3.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"mrzzy\".\"public\".\"dim_date\"\n\nwhere not(len(weekday_short) = 3)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.dim_date"}, "test.providence.not_null_dim_bank_card_id.37ec70b874": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('dim_bank_card')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_dim_bank_card_id", "resource_type": "test", "package_name": "providence", "path": "not_null_dim_bank_card_id.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_dim_bank_card_id.37ec70b874", "fqn": ["providence", "intermediate", "dim_model", "not_null_dim_bank_card_id"], "alias": "not_null_dim_bank_card_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.9777877, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_bank_card"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_bank_card"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_dim_bank_card_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"mrzzy\".\"public\".\"dim_bank_card\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "id", "file_key_name": "models.dim_bank_card"}, "test.providence.unique_dim_bank_card_id.030c894cd7": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('dim_bank_card')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "unique_dim_bank_card_id", "resource_type": "test", "package_name": "providence", "path": "unique_dim_bank_card_id.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.unique_dim_bank_card_id.030c894cd7", "fqn": ["providence", "intermediate", "dim_model", "unique_dim_bank_card_id"], "alias": "unique_dim_bank_card_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.9799132, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_bank_card"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_bank_card"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/unique_dim_bank_card_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"mrzzy\".\"public\".\"dim_bank_card\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "id", "file_key_name": "models.dim_bank_card"}, "test.providence.not_null_dim_bank_card_name.f3104c4b11": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('dim_bank_card')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_dim_bank_card_name", "resource_type": "test", "package_name": "providence", "path": "not_null_dim_bank_card_name.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_dim_bank_card_name.f3104c4b11", "fqn": ["providence", "intermediate", "dim_model", "not_null_dim_bank_card_name"], "alias": "not_null_dim_bank_card_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.9819915, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_bank_card"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_bank_card"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_dim_bank_card_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"mrzzy\".\"public\".\"dim_bank_card\"\nwhere name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "name", "file_key_name": "models.dim_bank_card"}, "test.providence.not_null_dim_bank_card_updated_at.a46061ae1d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('dim_bank_card')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_dim_bank_card_updated_at", "resource_type": "test", "package_name": "providence", "path": "not_null_dim_bank_card_updated_at.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_dim_bank_card_updated_at.a46061ae1d", "fqn": ["providence", "intermediate", "dim_model", "not_null_dim_bank_card_updated_at"], "alias": "not_null_dim_bank_card_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.9841146, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_bank_card"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_bank_card"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_dim_bank_card_updated_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect updated_at\nfrom \"mrzzy\".\"public\".\"dim_bank_card\"\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "updated_at", "file_key_name": "models.dim_bank_card"}, "test.providence.not_null_fact_public_transport_trip_leg_id.11e3c6b565": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('fact_public_transport_trip_leg')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_fact_public_transport_trip_leg_id", "resource_type": "test", "package_name": "providence", "path": "not_null_fact_public_transport_trip_leg_id.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_fact_public_transport_trip_leg_id.11e3c6b565", "fqn": ["providence", "intermediate", "dim_model", "not_null_fact_public_transport_trip_leg_id"], "alias": "not_null_fact_public_transport_trip_leg_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.9865005, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_public_transport_trip_leg"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.fact_public_transport_trip_leg"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_fact_public_transport_trip_leg_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"mrzzy\".\"public\".\"fact_public_transport_trip_leg\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "id", "file_key_name": "models.fact_public_transport_trip_leg"}, "test.providence.unique_fact_public_transport_trip_leg_id.7753bf7410": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('fact_public_transport_trip_leg')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "unique_fact_public_transport_trip_leg_id", "resource_type": "test", "package_name": "providence", "path": "unique_fact_public_transport_trip_leg_id.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.unique_fact_public_transport_trip_leg_id.7753bf7410", "fqn": ["providence", "intermediate", "dim_model", "unique_fact_public_transport_trip_leg_id"], "alias": "unique_fact_public_transport_trip_leg_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.988618, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_public_transport_trip_leg"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.fact_public_transport_trip_leg"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/unique_fact_public_transport_trip_leg_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"mrzzy\".\"public\".\"fact_public_transport_trip_leg\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "id", "file_key_name": "models.fact_public_transport_trip_leg"}, "test.providence.not_null_fact_public_transport_trip_leg_traveled_on.20509891d1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "traveled_on", "model": "{{ get_where_subquery(ref('fact_public_transport_trip_leg')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_fact_public_transport_trip_leg_traveled_on", "resource_type": "test", "package_name": "providence", "path": "not_null_fact_public_transport_trip_leg_traveled_on.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_fact_public_transport_trip_leg_traveled_on.20509891d1", "fqn": ["providence", "intermediate", "dim_model", "not_null_fact_public_transport_trip_leg_traveled_on"], "alias": "not_null_fact_public_transport_trip_leg_traveled_on", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.990721, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_public_transport_trip_leg"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.fact_public_transport_trip_leg"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_fact_public_transport_trip_leg_traveled_on.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect traveled_on\nfrom \"mrzzy\".\"public\".\"fact_public_transport_trip_leg\"\nwhere traveled_on is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "traveled_on", "file_key_name": "models.fact_public_transport_trip_leg"}, "test.providence.not_null_fact_public_transport_trip_leg_travel_date_id.5aeebaf59d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "travel_date_id", "model": "{{ get_where_subquery(ref('fact_public_transport_trip_leg')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_fact_public_transport_trip_leg_travel_date_id", "resource_type": "test", "package_name": "providence", "path": "not_null_fact_public_transport_trip_leg_travel_date_id.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_fact_public_transport_trip_leg_travel_date_id.5aeebaf59d", "fqn": ["providence", "intermediate", "dim_model", "not_null_fact_public_transport_trip_leg_travel_date_id"], "alias": "not_null_fact_public_transport_trip_leg_travel_date_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070075.9928117, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_public_transport_trip_leg"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.fact_public_transport_trip_leg"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_fact_public_transport_trip_leg_travel_date_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect travel_date_id\nfrom \"mrzzy\".\"public\".\"fact_public_transport_trip_leg\"\nwhere travel_date_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "travel_date_id", "file_key_name": "models.fact_public_transport_trip_leg"}, "test.providence.relationships_fact_public_transport_trip_leg_travel_date_id__id__ref_dim_date_.c0364ad857": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref(\"dim_date\")", "field": "id", "column_name": "travel_date_id", "model": "{{ get_where_subquery(ref('fact_public_transport_trip_leg')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "relationships_fact_public_transport_trip_leg_travel_date_id__id__ref_dim_date_", "resource_type": "test", "package_name": "providence", "path": "relationships_fact_public_tran_8d760d4dfc0bd96fc6b6d6465550bc1c.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.relationships_fact_public_transport_trip_leg_travel_date_id__id__ref_dim_date_.c0364ad857", "fqn": ["providence", "intermediate", "dim_model", "relationships_fact_public_transport_trip_leg_travel_date_id__id__ref_dim_date_"], "alias": "relationships_fact_public_tran_8d760d4dfc0bd96fc6b6d6465550bc1c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fact_public_tran_8d760d4dfc0bd96fc6b6d6465550bc1c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fact_public_tran_8d760d4dfc0bd96fc6b6d6465550bc1c"}, "created_at": 1684070075.995259, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fact_public_tran_8d760d4dfc0bd96fc6b6d6465550bc1c\") }}", "language": "sql", "refs": [["dim_date"], ["fact_public_transport_trip_leg"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_date", "model.providence.fact_public_transport_trip_leg"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/relationships_fact_public_tran_8d760d4dfc0bd96fc6b6d6465550bc1c.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select travel_date_id as from_field\n    from \"mrzzy\".\"public\".\"fact_public_transport_trip_leg\"\n    where travel_date_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"mrzzy\".\"public\".\"dim_date\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "travel_date_id", "file_key_name": "models.fact_public_transport_trip_leg"}, "test.providence.not_null_fact_public_transport_trip_leg_cost_sgd.fb7f50e486": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "cost_sgd", "model": "{{ get_where_subquery(ref('fact_public_transport_trip_leg')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_fact_public_transport_trip_leg_cost_sgd", "resource_type": "test", "package_name": "providence", "path": "not_null_fact_public_transport_trip_leg_cost_sgd.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_fact_public_transport_trip_leg_cost_sgd.fb7f50e486", "fqn": ["providence", "intermediate", "dim_model", "not_null_fact_public_transport_trip_leg_cost_sgd"], "alias": "not_null_fact_public_transport_trip_leg_cost_sgd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.0015895, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_public_transport_trip_leg"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.fact_public_transport_trip_leg"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_fact_public_transport_trip_leg_cost_sgd.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cost_sgd\nfrom \"mrzzy\".\"public\".\"fact_public_transport_trip_leg\"\nwhere cost_sgd is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "cost_sgd", "file_key_name": "models.fact_public_transport_trip_leg"}, "test.providence.dbt_utils_accepted_range_fact_public_transport_trip_leg_cost_sgd__0.b499fccafb": {"test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "column_name": "cost_sgd", "model": "{{ get_where_subquery(ref('fact_public_transport_trip_leg')) }}"}, "namespace": "dbt_utils"}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "dbt_utils_accepted_range_fact_public_transport_trip_leg_cost_sgd__0", "resource_type": "test", "package_name": "providence", "path": "dbt_utils_accepted_range_fact__b0452d03da1edeba5d903e3554e82f83.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.dbt_utils_accepted_range_fact_public_transport_trip_leg_cost_sgd__0.b499fccafb", "fqn": ["providence", "intermediate", "dim_model", "dbt_utils_accepted_range_fact_public_transport_trip_leg_cost_sgd__0"], "alias": "dbt_utils_accepted_range_fact__b0452d03da1edeba5d903e3554e82f83", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_fact__b0452d03da1edeba5d903e3554e82f83", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_accepted_range_fact__b0452d03da1edeba5d903e3554e82f83"}, "created_at": 1684070076.0039997, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_accepted_range_fact__b0452d03da1edeba5d903e3554e82f83\") }}", "language": "sql", "refs": [["fact_public_transport_trip_leg"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.fact_public_transport_trip_leg"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/dbt_utils_accepted_range_fact__b0452d03da1edeba5d903e3554e82f83.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"mrzzy\".\"public\".\"fact_public_transport_trip_leg\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not cost_sgd >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "cost_sgd", "file_key_name": "models.fact_public_transport_trip_leg"}, "test.providence.not_null_fact_public_transport_trip_leg_source.e3b36ba6ac": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "source", "model": "{{ get_where_subquery(ref('fact_public_transport_trip_leg')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_fact_public_transport_trip_leg_source", "resource_type": "test", "package_name": "providence", "path": "not_null_fact_public_transport_trip_leg_source.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_fact_public_transport_trip_leg_source.e3b36ba6ac", "fqn": ["providence", "intermediate", "dim_model", "not_null_fact_public_transport_trip_leg_source"], "alias": "not_null_fact_public_transport_trip_leg_source", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.0089197, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_public_transport_trip_leg"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.fact_public_transport_trip_leg"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_fact_public_transport_trip_leg_source.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect source\nfrom \"mrzzy\".\"public\".\"fact_public_transport_trip_leg\"\nwhere source is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "source", "file_key_name": "models.fact_public_transport_trip_leg"}, "test.providence.not_null_fact_public_transport_trip_leg_destination.f0b3c0c527": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "destination", "model": "{{ get_where_subquery(ref('fact_public_transport_trip_leg')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_fact_public_transport_trip_leg_destination", "resource_type": "test", "package_name": "providence", "path": "not_null_fact_public_transport_trip_leg_destination.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_fact_public_transport_trip_leg_destination.f0b3c0c527", "fqn": ["providence", "intermediate", "dim_model", "not_null_fact_public_transport_trip_leg_destination"], "alias": "not_null_fact_public_transport_trip_leg_destination", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.0113475, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_public_transport_trip_leg"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.fact_public_transport_trip_leg"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_fact_public_transport_trip_leg_destination.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect destination\nfrom \"mrzzy\".\"public\".\"fact_public_transport_trip_leg\"\nwhere destination is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "destination", "file_key_name": "models.fact_public_transport_trip_leg"}, "test.providence.not_null_fact_public_transport_trip_leg_transport_mode.61559e0639": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "transport_mode", "model": "{{ get_where_subquery(ref('fact_public_transport_trip_leg')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_fact_public_transport_trip_leg_transport_mode", "resource_type": "test", "package_name": "providence", "path": "not_null_fact_public_transport_trip_leg_transport_mode.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_fact_public_transport_trip_leg_transport_mode.61559e0639", "fqn": ["providence", "intermediate", "dim_model", "not_null_fact_public_transport_trip_leg_transport_mode"], "alias": "not_null_fact_public_transport_trip_leg_transport_mode", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.0134475, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_public_transport_trip_leg"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.fact_public_transport_trip_leg"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_fact_public_transport_trip_leg_transport_mode.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transport_mode\nfrom \"mrzzy\".\"public\".\"fact_public_transport_trip_leg\"\nwhere transport_mode is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "transport_mode", "file_key_name": "models.fact_public_transport_trip_leg"}, "test.providence.accepted_values_fact_public_transport_trip_leg_transport_mode__Rail__Bus.d071843ebd": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Rail", "Bus"], "column_name": "transport_mode", "model": "{{ get_where_subquery(ref('fact_public_transport_trip_leg')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "accepted_values_fact_public_transport_trip_leg_transport_mode__Rail__Bus", "resource_type": "test", "package_name": "providence", "path": "accepted_values_fact_public_tr_2b840bb2cb08830268ebbd797b0d8783.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.accepted_values_fact_public_transport_trip_leg_transport_mode__Rail__Bus.d071843ebd", "fqn": ["providence", "intermediate", "dim_model", "accepted_values_fact_public_transport_trip_leg_transport_mode__Rail__Bus"], "alias": "accepted_values_fact_public_tr_2b840bb2cb08830268ebbd797b0d8783", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_fact_public_tr_2b840bb2cb08830268ebbd797b0d8783", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_fact_public_tr_2b840bb2cb08830268ebbd797b0d8783"}, "created_at": 1684070076.0155723, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_fact_public_tr_2b840bb2cb08830268ebbd797b0d8783\") }}", "language": "sql", "refs": [["fact_public_transport_trip_leg"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.fact_public_transport_trip_leg"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/accepted_values_fact_public_tr_2b840bb2cb08830268ebbd797b0d8783.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        transport_mode as value_field,\n        count(*) as n_records\n\n    from \"mrzzy\".\"public\".\"fact_public_transport_trip_leg\"\n    group by transport_mode\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Rail','Bus'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "transport_mode", "file_key_name": "models.fact_public_transport_trip_leg"}, "test.providence.not_null_fact_public_transport_trip_leg_bank_card_id.a699f6f8fe": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "bank_card_id", "model": "{{ get_where_subquery(ref('fact_public_transport_trip_leg')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_fact_public_transport_trip_leg_bank_card_id", "resource_type": "test", "package_name": "providence", "path": "not_null_fact_public_transport_trip_leg_bank_card_id.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_fact_public_transport_trip_leg_bank_card_id.a699f6f8fe", "fqn": ["providence", "intermediate", "dim_model", "not_null_fact_public_transport_trip_leg_bank_card_id"], "alias": "not_null_fact_public_transport_trip_leg_bank_card_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.0215607, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_public_transport_trip_leg"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.fact_public_transport_trip_leg"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_fact_public_transport_trip_leg_bank_card_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bank_card_id\nfrom \"mrzzy\".\"public\".\"fact_public_transport_trip_leg\"\nwhere bank_card_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "bank_card_id", "file_key_name": "models.fact_public_transport_trip_leg"}, "test.providence.relationships_fact_public_transport_trip_leg_bank_card_id__id__ref_dim_bank_card_.e54f7eda8c": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref(\"dim_bank_card\")", "field": "id", "column_name": "bank_card_id", "model": "{{ get_where_subquery(ref('fact_public_transport_trip_leg')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "relationships_fact_public_transport_trip_leg_bank_card_id__id__ref_dim_bank_card_", "resource_type": "test", "package_name": "providence", "path": "relationships_fact_public_tran_51fa38cda1d0ca9120bf627ae0a47421.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.relationships_fact_public_transport_trip_leg_bank_card_id__id__ref_dim_bank_card_.e54f7eda8c", "fqn": ["providence", "intermediate", "dim_model", "relationships_fact_public_transport_trip_leg_bank_card_id__id__ref_dim_bank_card_"], "alias": "relationships_fact_public_tran_51fa38cda1d0ca9120bf627ae0a47421", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fact_public_tran_51fa38cda1d0ca9120bf627ae0a47421", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fact_public_tran_51fa38cda1d0ca9120bf627ae0a47421"}, "created_at": 1684070076.02371, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fact_public_tran_51fa38cda1d0ca9120bf627ae0a47421\") }}", "language": "sql", "refs": [["dim_bank_card"], ["fact_public_transport_trip_leg"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_bank_card", "model.providence.fact_public_transport_trip_leg"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/relationships_fact_public_tran_51fa38cda1d0ca9120bf627ae0a47421.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select bank_card_id as from_field\n    from \"mrzzy\".\"public\".\"fact_public_transport_trip_leg\"\n    where bank_card_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"mrzzy\".\"public\".\"dim_bank_card\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "bank_card_id", "file_key_name": "models.fact_public_transport_trip_leg"}, "test.providence.not_null_fact_public_transport_trip_leg_account_id.c516df574d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('fact_public_transport_trip_leg')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_fact_public_transport_trip_leg_account_id", "resource_type": "test", "package_name": "providence", "path": "not_null_fact_public_transport_trip_leg_account_id.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_fact_public_transport_trip_leg_account_id.c516df574d", "fqn": ["providence", "intermediate", "dim_model", "not_null_fact_public_transport_trip_leg_account_id"], "alias": "not_null_fact_public_transport_trip_leg_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.0299265, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_public_transport_trip_leg"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.fact_public_transport_trip_leg"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_fact_public_transport_trip_leg_account_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom \"mrzzy\".\"public\".\"fact_public_transport_trip_leg\"\nwhere account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "account_id", "file_key_name": "models.fact_public_transport_trip_leg"}, "test.providence.relationships_fact_public_transport_trip_leg_account_id__id__ref_dim_account_.45face645f": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref(\"dim_account\")", "field": "id", "column_name": "account_id", "model": "{{ get_where_subquery(ref('fact_public_transport_trip_leg')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "relationships_fact_public_transport_trip_leg_account_id__id__ref_dim_account_", "resource_type": "test", "package_name": "providence", "path": "relationships_fact_public_tran_bccb069d7241e1574d5c3f9d267c6fc8.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.relationships_fact_public_transport_trip_leg_account_id__id__ref_dim_account_.45face645f", "fqn": ["providence", "intermediate", "dim_model", "relationships_fact_public_transport_trip_leg_account_id__id__ref_dim_account_"], "alias": "relationships_fact_public_tran_bccb069d7241e1574d5c3f9d267c6fc8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fact_public_tran_bccb069d7241e1574d5c3f9d267c6fc8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fact_public_tran_bccb069d7241e1574d5c3f9d267c6fc8"}, "created_at": 1684070076.032059, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fact_public_tran_bccb069d7241e1574d5c3f9d267c6fc8\") }}", "language": "sql", "refs": [["dim_account"], ["fact_public_transport_trip_leg"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_account", "model.providence.fact_public_transport_trip_leg"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/relationships_fact_public_tran_bccb069d7241e1574d5c3f9d267c6fc8.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select account_id as from_field\n    from \"mrzzy\".\"public\".\"fact_public_transport_trip_leg\"\n    where account_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"mrzzy\".\"public\".\"dim_account\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "account_id", "file_key_name": "models.fact_public_transport_trip_leg"}, "test.providence.not_null_fact_public_transport_trip_leg_is_billed.e7b02e4221": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_billed", "model": "{{ get_where_subquery(ref('fact_public_transport_trip_leg')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_fact_public_transport_trip_leg_is_billed", "resource_type": "test", "package_name": "providence", "path": "not_null_fact_public_transport_trip_leg_is_billed.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_fact_public_transport_trip_leg_is_billed.e7b02e4221", "fqn": ["providence", "intermediate", "dim_model", "not_null_fact_public_transport_trip_leg_is_billed"], "alias": "not_null_fact_public_transport_trip_leg_is_billed", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.038695, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_public_transport_trip_leg"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.fact_public_transport_trip_leg"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_fact_public_transport_trip_leg_is_billed.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect is_billed\nfrom \"mrzzy\".\"public\".\"fact_public_transport_trip_leg\"\nwhere is_billed is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "is_billed", "file_key_name": "models.fact_public_transport_trip_leg"}, "test.providence.not_null_fact_public_transport_trip_leg_updated_at.266160af5a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('fact_public_transport_trip_leg')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_fact_public_transport_trip_leg_updated_at", "resource_type": "test", "package_name": "providence", "path": "not_null_fact_public_transport_trip_leg_updated_at.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_fact_public_transport_trip_leg_updated_at.266160af5a", "fqn": ["providence", "intermediate", "dim_model", "not_null_fact_public_transport_trip_leg_updated_at"], "alias": "not_null_fact_public_transport_trip_leg_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.0407884, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_public_transport_trip_leg"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.fact_public_transport_trip_leg"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_fact_public_transport_trip_leg_updated_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect updated_at\nfrom \"mrzzy\".\"public\".\"fact_public_transport_trip_leg\"\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "updated_at", "file_key_name": "models.fact_public_transport_trip_leg"}, "test.providence.unique_dim_budget_id.3db1895c25": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('dim_budget')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "unique_dim_budget_id", "resource_type": "test", "package_name": "providence", "path": "unique_dim_budget_id.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.unique_dim_budget_id.3db1895c25", "fqn": ["providence", "intermediate", "dim_model", "unique_dim_budget_id"], "alias": "unique_dim_budget_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.043174, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_budget"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_budget"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/unique_dim_budget_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"mrzzy\".\"public\".\"dim_budget\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "id", "file_key_name": "models.dim_budget"}, "test.providence.not_null_dim_budget_id.eabdd80ba9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('dim_budget')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_dim_budget_id", "resource_type": "test", "package_name": "providence", "path": "not_null_dim_budget_id.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_dim_budget_id.eabdd80ba9", "fqn": ["providence", "intermediate", "dim_model", "not_null_dim_budget_id"], "alias": "not_null_dim_budget_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.0452619, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_budget"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_budget"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_dim_budget_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"mrzzy\".\"public\".\"dim_budget\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "id", "file_key_name": "models.dim_budget"}, "test.providence.not_null_dim_budget_name.9d76c5e6d9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('dim_budget')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_dim_budget_name", "resource_type": "test", "package_name": "providence", "path": "not_null_dim_budget_name.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_dim_budget_name.9d76c5e6d9", "fqn": ["providence", "intermediate", "dim_model", "not_null_dim_budget_name"], "alias": "not_null_dim_budget_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.047371, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_budget"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_budget"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_dim_budget_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"mrzzy\".\"public\".\"dim_budget\"\nwhere name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "name", "file_key_name": "models.dim_budget"}, "test.providence.not_null_dim_budget_modified_at.32d713448e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "modified_at", "model": "{{ get_where_subquery(ref('dim_budget')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_dim_budget_modified_at", "resource_type": "test", "package_name": "providence", "path": "not_null_dim_budget_modified_at.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_dim_budget_modified_at.32d713448e", "fqn": ["providence", "intermediate", "dim_model", "not_null_dim_budget_modified_at"], "alias": "not_null_dim_budget_modified_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.04947, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_budget"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_budget"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_dim_budget_modified_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect modified_at\nfrom \"mrzzy\".\"public\".\"dim_budget\"\nwhere modified_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "modified_at", "file_key_name": "models.dim_budget"}, "test.providence.not_null_dim_budget_currency_code.05cec94be1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "currency_code", "model": "{{ get_where_subquery(ref('dim_budget')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_dim_budget_currency_code", "resource_type": "test", "package_name": "providence", "path": "not_null_dim_budget_currency_code.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_dim_budget_currency_code.05cec94be1", "fqn": ["providence", "intermediate", "dim_model", "not_null_dim_budget_currency_code"], "alias": "not_null_dim_budget_currency_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.0518587, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_budget"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_budget"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_dim_budget_currency_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect currency_code\nfrom \"mrzzy\".\"public\".\"dim_budget\"\nwhere currency_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "currency_code", "file_key_name": "models.dim_budget"}, "test.providence.not_null_dim_budget_currency_symbol.392bbc29a4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "currency_symbol", "model": "{{ get_where_subquery(ref('dim_budget')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_dim_budget_currency_symbol", "resource_type": "test", "package_name": "providence", "path": "not_null_dim_budget_currency_symbol.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_dim_budget_currency_symbol.392bbc29a4", "fqn": ["providence", "intermediate", "dim_model", "not_null_dim_budget_currency_symbol"], "alias": "not_null_dim_budget_currency_symbol", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.0539484, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_budget"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_budget"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_dim_budget_currency_symbol.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect currency_symbol\nfrom \"mrzzy\".\"public\".\"dim_budget\"\nwhere currency_symbol is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "currency_symbol", "file_key_name": "models.dim_budget"}, "test.providence.not_null_dim_budget_updated_at.6ff71eb898": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('dim_budget')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_dim_budget_updated_at", "resource_type": "test", "package_name": "providence", "path": "not_null_dim_budget_updated_at.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_dim_budget_updated_at.6ff71eb898", "fqn": ["providence", "intermediate", "dim_model", "not_null_dim_budget_updated_at"], "alias": "not_null_dim_budget_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.056066, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_budget"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_budget"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_dim_budget_updated_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect updated_at\nfrom \"mrzzy\".\"public\".\"dim_budget\"\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "updated_at", "file_key_name": "models.dim_budget"}, "test.providence.dbt_utils_expression_is_true_dim_budget_len_currency_code_3.227efc4fe7": {"test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "len(currency_code) = 3", "model": "{{ get_where_subquery(ref('dim_budget')) }}"}, "namespace": "dbt_utils"}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_dim_budget_len_currency_code_3", "resource_type": "test", "package_name": "providence", "path": "dbt_utils_expression_is_true_dim_budget_len_currency_code_3.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.dbt_utils_expression_is_true_dim_budget_len_currency_code_3.227efc4fe7", "fqn": ["providence", "intermediate", "dim_model", "dbt_utils_expression_is_true_dim_budget_len_currency_code_3"], "alias": "dbt_utils_expression_is_true_dim_budget_len_currency_code_3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.0581858, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_budget"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_budget"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/dbt_utils_expression_is_true_dim_budget_len_currency_code_3.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"mrzzy\".\"public\".\"dim_budget\"\n\nwhere not(len(currency_code) = 3)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.dim_budget"}, "test.providence.not_null_dim_budget_category_id.77da7ecc72": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('dim_budget_category')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_dim_budget_category_id", "resource_type": "test", "package_name": "providence", "path": "not_null_dim_budget_category_id.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_dim_budget_category_id.77da7ecc72", "fqn": ["providence", "intermediate", "dim_model", "not_null_dim_budget_category_id"], "alias": "not_null_dim_budget_category_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.0637627, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_budget_category"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_budget_category"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_dim_budget_category_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"mrzzy\".\"public\".\"dim_budget_category\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "id", "file_key_name": "models.dim_budget_category"}, "test.providence.unique_dim_budget_category_id.efbc2bbaa5": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('dim_budget_category')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "unique_dim_budget_category_id", "resource_type": "test", "package_name": "providence", "path": "unique_dim_budget_category_id.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.unique_dim_budget_category_id.efbc2bbaa5", "fqn": ["providence", "intermediate", "dim_model", "unique_dim_budget_category_id"], "alias": "unique_dim_budget_category_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.0658562, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_budget_category"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_budget_category"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/unique_dim_budget_category_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"mrzzy\".\"public\".\"dim_budget_category\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "id", "file_key_name": "models.dim_budget_category"}, "test.providence.not_null_dim_budget_category_category_id.1064e4c951": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "category_id", "model": "{{ get_where_subquery(ref('dim_budget_category')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_dim_budget_category_category_id", "resource_type": "test", "package_name": "providence", "path": "not_null_dim_budget_category_category_id.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_dim_budget_category_category_id.1064e4c951", "fqn": ["providence", "intermediate", "dim_model", "not_null_dim_budget_category_category_id"], "alias": "not_null_dim_budget_category_category_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.068282, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_budget_category"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_budget_category"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_dim_budget_category_category_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect category_id\nfrom \"mrzzy\".\"public\".\"dim_budget_category\"\nwhere category_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "category_id", "file_key_name": "models.dim_budget_category"}, "test.providence.not_null_dim_budget_category_name.02f719e72b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('dim_budget_category')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_dim_budget_category_name", "resource_type": "test", "package_name": "providence", "path": "not_null_dim_budget_category_name.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_dim_budget_category_name.02f719e72b", "fqn": ["providence", "intermediate", "dim_model", "not_null_dim_budget_category_name"], "alias": "not_null_dim_budget_category_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.0703993, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_budget_category"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_budget_category"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_dim_budget_category_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"mrzzy\".\"public\".\"dim_budget_category\"\nwhere name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "name", "file_key_name": "models.dim_budget_category"}, "test.providence.not_null_dim_budget_category_budget_id.1b25eed24d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "budget_id", "model": "{{ get_where_subquery(ref('dim_budget_category')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_dim_budget_category_budget_id", "resource_type": "test", "package_name": "providence", "path": "not_null_dim_budget_category_budget_id.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_dim_budget_category_budget_id.1b25eed24d", "fqn": ["providence", "intermediate", "dim_model", "not_null_dim_budget_category_budget_id"], "alias": "not_null_dim_budget_category_budget_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.0725327, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_budget_category"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_budget_category"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_dim_budget_category_budget_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect budget_id\nfrom \"mrzzy\".\"public\".\"dim_budget_category\"\nwhere budget_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "budget_id", "file_key_name": "models.dim_budget_category"}, "test.providence.relationships_dim_budget_category_budget_id__id__ref_dim_budget_.e8d44a263b": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref(\"dim_budget\")", "field": "id", "column_name": "budget_id", "model": "{{ get_where_subquery(ref('dim_budget_category')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "relationships_dim_budget_category_budget_id__id__ref_dim_budget_", "resource_type": "test", "package_name": "providence", "path": "relationships_dim_budget_categ_c64b3a1b4b3baa9166eb9aff0fd8afd1.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.relationships_dim_budget_category_budget_id__id__ref_dim_budget_.e8d44a263b", "fqn": ["providence", "intermediate", "dim_model", "relationships_dim_budget_category_budget_id__id__ref_dim_budget_"], "alias": "relationships_dim_budget_categ_c64b3a1b4b3baa9166eb9aff0fd8afd1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_dim_budget_categ_c64b3a1b4b3baa9166eb9aff0fd8afd1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_dim_budget_categ_c64b3a1b4b3baa9166eb9aff0fd8afd1"}, "created_at": 1684070076.0746722, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_dim_budget_categ_c64b3a1b4b3baa9166eb9aff0fd8afd1\") }}", "language": "sql", "refs": [["dim_budget"], ["dim_budget_category"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_budget", "model.providence.dim_budget_category"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/relationships_dim_budget_categ_c64b3a1b4b3baa9166eb9aff0fd8afd1.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select budget_id as from_field\n    from \"mrzzy\".\"public\".\"dim_budget_category\"\n    where budget_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"mrzzy\".\"public\".\"dim_budget\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "budget_id", "file_key_name": "models.dim_budget_category"}, "test.providence.relationships_dim_budget_category_category_group_id__id__ref_stg_ynab_budget_category_group_.4610ab6f13": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref(\"stg_ynab_budget_category_group\")", "field": "id", "column_name": "category_group_id", "model": "{{ get_where_subquery(ref('dim_budget_category')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "relationships_dim_budget_category_category_group_id__id__ref_stg_ynab_budget_category_group_", "resource_type": "test", "package_name": "providence", "path": "relationships_dim_budget_categ_f7c4206153bec1572467ac6cb58907f7.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.relationships_dim_budget_category_category_group_id__id__ref_stg_ynab_budget_category_group_.4610ab6f13", "fqn": ["providence", "intermediate", "dim_model", "relationships_dim_budget_category_category_group_id__id__ref_stg_ynab_budget_category_group_"], "alias": "relationships_dim_budget_categ_f7c4206153bec1572467ac6cb58907f7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_dim_budget_categ_f7c4206153bec1572467ac6cb58907f7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_dim_budget_categ_f7c4206153bec1572467ac6cb58907f7"}, "created_at": 1684070076.081185, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_dim_budget_categ_f7c4206153bec1572467ac6cb58907f7\") }}", "language": "sql", "refs": [["stg_ynab_budget_category_group"], ["dim_budget_category"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_budget_category_group", "model.providence.dim_budget_category"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/relationships_dim_budget_categ_f7c4206153bec1572467ac6cb58907f7.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select category_group_id as from_field\n    from \"mrzzy\".\"public\".\"dim_budget_category\"\n    where category_group_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"mrzzy\".\"public\".\"stg_ynab_budget_category_group\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "category_group_id", "file_key_name": "models.dim_budget_category"}, "test.providence.accepted_values_dim_budget_category_goal_type__Target_Category_Balance__Target_Category_Balance_by_Date__Monthly_Funding__Plan_Your_Spending.f4e6afe66e": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Target Category Balance", "Target Category Balance by Date", "Monthly Funding", "Plan Your Spending"], "column_name": "goal_type", "model": "{{ get_where_subquery(ref('dim_budget_category')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "accepted_values_dim_budget_category_goal_type__Target_Category_Balance__Target_Category_Balance_by_Date__Monthly_Funding__Plan_Your_Spending", "resource_type": "test", "package_name": "providence", "path": "accepted_values_dim_budget_cat_8cbcc45722c28e9e1b3502f8c931dd3d.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.accepted_values_dim_budget_category_goal_type__Target_Category_Balance__Target_Category_Balance_by_Date__Monthly_Funding__Plan_Your_Spending.f4e6afe66e", "fqn": ["providence", "intermediate", "dim_model", "accepted_values_dim_budget_category_goal_type__Target_Category_Balance__Target_Category_Balance_by_Date__Monthly_Funding__Plan_Your_Spending"], "alias": "accepted_values_dim_budget_cat_8cbcc45722c28e9e1b3502f8c931dd3d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_dim_budget_cat_8cbcc45722c28e9e1b3502f8c931dd3d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_dim_budget_cat_8cbcc45722c28e9e1b3502f8c931dd3d"}, "created_at": 1684070076.0875442, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_dim_budget_cat_8cbcc45722c28e9e1b3502f8c931dd3d\") }}", "language": "sql", "refs": [["dim_budget_category"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_budget_category"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/accepted_values_dim_budget_cat_8cbcc45722c28e9e1b3502f8c931dd3d.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        goal_type as value_field,\n        count(*) as n_records\n\n    from \"mrzzy\".\"public\".\"dim_budget_category\"\n    group by goal_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Target Category Balance','Target Category Balance by Date','Monthly Funding','Plan Your Spending'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "goal_type", "file_key_name": "models.dim_budget_category"}, "test.providence.not_null_dim_budget_category_is_deleted.f8f14e0267": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_deleted", "model": "{{ get_where_subquery(ref('dim_budget_category')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_dim_budget_category_is_deleted", "resource_type": "test", "package_name": "providence", "path": "not_null_dim_budget_category_is_deleted.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_dim_budget_category_is_deleted.f8f14e0267", "fqn": ["providence", "intermediate", "dim_model", "not_null_dim_budget_category_is_deleted"], "alias": "not_null_dim_budget_category_is_deleted", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.0943446, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_budget_category"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_budget_category"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_dim_budget_category_is_deleted.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect is_deleted\nfrom \"mrzzy\".\"public\".\"dim_budget_category\"\nwhere is_deleted is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "is_deleted", "file_key_name": "models.dim_budget_category"}, "test.providence.not_null_dim_budget_category_is_expense.6dbe0ce48b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_expense", "model": "{{ get_where_subquery(ref('dim_budget_category')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_dim_budget_category_is_expense", "resource_type": "test", "package_name": "providence", "path": "not_null_dim_budget_category_is_expense.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_dim_budget_category_is_expense.6dbe0ce48b", "fqn": ["providence", "intermediate", "dim_model", "not_null_dim_budget_category_is_expense"], "alias": "not_null_dim_budget_category_is_expense", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.096464, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_budget_category"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_budget_category"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_dim_budget_category_is_expense.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect is_expense\nfrom \"mrzzy\".\"public\".\"dim_budget_category\"\nwhere is_expense is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "is_expense", "file_key_name": "models.dim_budget_category"}, "test.providence.not_null_dim_budget_category_updated_at.0346f86c7a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('dim_budget_category')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_dim_budget_category_updated_at", "resource_type": "test", "package_name": "providence", "path": "not_null_dim_budget_category_updated_at.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_dim_budget_category_updated_at.0346f86c7a", "fqn": ["providence", "intermediate", "dim_model", "not_null_dim_budget_category_updated_at"], "alias": "not_null_dim_budget_category_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.0985775, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_budget_category"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_budget_category"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_dim_budget_category_updated_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect updated_at\nfrom \"mrzzy\".\"public\".\"dim_budget_category\"\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "updated_at", "file_key_name": "models.dim_budget_category"}, "test.providence.not_null_dim_budget_category_effective_at.8d5d59207f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "effective_at", "model": "{{ get_where_subquery(ref('dim_budget_category')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_dim_budget_category_effective_at", "resource_type": "test", "package_name": "providence", "path": "not_null_dim_budget_category_effective_at.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_dim_budget_category_effective_at.8d5d59207f", "fqn": ["providence", "intermediate", "dim_model", "not_null_dim_budget_category_effective_at"], "alias": "not_null_dim_budget_category_effective_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.1010942, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_budget_category"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_budget_category"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_dim_budget_category_effective_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect effective_at\nfrom \"mrzzy\".\"public\".\"dim_budget_category\"\nwhere effective_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "effective_at", "file_key_name": "models.dim_budget_category"}, "test.providence.not_null_dim_budget_category_expired_at.c9ef0053bb": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "expired_at", "model": "{{ get_where_subquery(ref('dim_budget_category')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_dim_budget_category_expired_at", "resource_type": "test", "package_name": "providence", "path": "not_null_dim_budget_category_expired_at.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_dim_budget_category_expired_at.c9ef0053bb", "fqn": ["providence", "intermediate", "dim_model", "not_null_dim_budget_category_expired_at"], "alias": "not_null_dim_budget_category_expired_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.1032338, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_budget_category"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_budget_category"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_dim_budget_category_expired_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect expired_at\nfrom \"mrzzy\".\"public\".\"dim_budget_category\"\nwhere expired_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "expired_at", "file_key_name": "models.dim_budget_category"}, "test.providence.not_null_dim_budget_category_is_current.91170880f8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_current", "model": "{{ get_where_subquery(ref('dim_budget_category')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_dim_budget_category_is_current", "resource_type": "test", "package_name": "providence", "path": "not_null_dim_budget_category_is_current.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_dim_budget_category_is_current.91170880f8", "fqn": ["providence", "intermediate", "dim_model", "not_null_dim_budget_category_is_current"], "alias": "not_null_dim_budget_category_is_current", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.1054113, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_budget_category"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_budget_category"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_dim_budget_category_is_current.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect is_current\nfrom \"mrzzy\".\"public\".\"dim_budget_category\"\nwhere is_current is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "is_current", "file_key_name": "models.dim_budget_category"}, "test.providence.dbt_utils_expression_is_true_dim_budget_category_effective_at_expired_at.d66027b17f": {"test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "effective_at < expired_at", "model": "{{ get_where_subquery(ref('dim_budget_category')) }}"}, "namespace": "dbt_utils"}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_dim_budget_category_effective_at_expired_at", "resource_type": "test", "package_name": "providence", "path": "dbt_utils_expression_is_true_d_fe48d3a065a100e1f30f64660373b8b5.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.dbt_utils_expression_is_true_dim_budget_category_effective_at_expired_at.d66027b17f", "fqn": ["providence", "intermediate", "dim_model", "dbt_utils_expression_is_true_dim_budget_category_effective_at_expired_at"], "alias": "dbt_utils_expression_is_true_d_fe48d3a065a100e1f30f64660373b8b5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_d_fe48d3a065a100e1f30f64660373b8b5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_expression_is_true_d_fe48d3a065a100e1f30f64660373b8b5"}, "created_at": 1684070076.107566, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_d_fe48d3a065a100e1f30f64660373b8b5\") }}", "language": "sql", "refs": [["dim_budget_category"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_budget_category"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/dbt_utils_expression_is_true_d_fe48d3a065a100e1f30f64660373b8b5.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"mrzzy\".\"public\".\"dim_budget_category\"\n\nwhere not(effective_at < expired_at)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.dim_budget_category"}, "test.providence.dbt_utils_expression_is_true_dim_budget_category_not_goal_type_is_null_and_goal_amount_0_or_goal_type_is_null_and_goal_amount_0_.4a71e79beb": {"test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "not (goal_type is null and goal_amount = 0) or\n(goal_type is null and goal_amount = 0)\n", "model": "{{ get_where_subquery(ref('dim_budget_category')) }}"}, "namespace": "dbt_utils"}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_dim_budget_category_not_goal_type_is_null_and_goal_amount_0_or_goal_type_is_null_and_goal_amount_0_", "resource_type": "test", "package_name": "providence", "path": "dbt_utils_expression_is_true_d_5b21244143991d96bff8ce26d369f1b0.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.dbt_utils_expression_is_true_dim_budget_category_not_goal_type_is_null_and_goal_amount_0_or_goal_type_is_null_and_goal_amount_0_.4a71e79beb", "fqn": ["providence", "intermediate", "dim_model", "dbt_utils_expression_is_true_dim_budget_category_not_goal_type_is_null_and_goal_amount_0_or_goal_type_is_null_and_goal_amount_0_"], "alias": "dbt_utils_expression_is_true_d_5b21244143991d96bff8ce26d369f1b0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_d_5b21244143991d96bff8ce26d369f1b0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_expression_is_true_d_5b21244143991d96bff8ce26d369f1b0"}, "created_at": 1684070076.1134572, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_d_5b21244143991d96bff8ce26d369f1b0\") }}", "language": "sql", "refs": [["dim_budget_category"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_budget_category"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/dbt_utils_expression_is_true_d_5b21244143991d96bff8ce26d369f1b0.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"mrzzy\".\"public\".\"dim_budget_category\"\n\nwhere not(not (goal_type is null and goal_amount = 0) or\n(goal_type is null and goal_amount = 0))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.dim_budget_category"}, "test.providence.not_null_fact_monthly_budget_id.10882a8339": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('fact_monthly_budget')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_fact_monthly_budget_id", "resource_type": "test", "package_name": "providence", "path": "not_null_fact_monthly_budget_id.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_fact_monthly_budget_id.10882a8339", "fqn": ["providence", "intermediate", "dim_model", "not_null_fact_monthly_budget_id"], "alias": "not_null_fact_monthly_budget_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.1191437, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_monthly_budget"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.fact_monthly_budget"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_fact_monthly_budget_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"mrzzy\".\"public\".\"fact_monthly_budget\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "id", "file_key_name": "models.fact_monthly_budget"}, "test.providence.unique_fact_monthly_budget_id.9411ccab94": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('fact_monthly_budget')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "unique_fact_monthly_budget_id", "resource_type": "test", "package_name": "providence", "path": "unique_fact_monthly_budget_id.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.unique_fact_monthly_budget_id.9411ccab94", "fqn": ["providence", "intermediate", "dim_model", "unique_fact_monthly_budget_id"], "alias": "unique_fact_monthly_budget_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.1212382, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_monthly_budget"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.fact_monthly_budget"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/unique_fact_monthly_budget_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"mrzzy\".\"public\".\"fact_monthly_budget\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "id", "file_key_name": "models.fact_monthly_budget"}, "test.providence.not_null_fact_monthly_budget_month_date_id.15a822a005": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "month_date_id", "model": "{{ get_where_subquery(ref('fact_monthly_budget')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_fact_monthly_budget_month_date_id", "resource_type": "test", "package_name": "providence", "path": "not_null_fact_monthly_budget_month_date_id.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_fact_monthly_budget_month_date_id.15a822a005", "fqn": ["providence", "intermediate", "dim_model", "not_null_fact_monthly_budget_month_date_id"], "alias": "not_null_fact_monthly_budget_month_date_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.1233788, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_monthly_budget"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.fact_monthly_budget"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_fact_monthly_budget_month_date_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect month_date_id\nfrom \"mrzzy\".\"public\".\"fact_monthly_budget\"\nwhere month_date_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "month_date_id", "file_key_name": "models.fact_monthly_budget"}, "test.providence.relationships_fact_monthly_budget_month_date_id__id__ref_dim_date_.8ccdca7d0c": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref(\"dim_date\")", "field": "id", "column_name": "month_date_id", "model": "{{ get_where_subquery(ref('fact_monthly_budget')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "relationships_fact_monthly_budget_month_date_id__id__ref_dim_date_", "resource_type": "test", "package_name": "providence", "path": "relationships_fact_monthly_bud_b98889765df27d6a666bdd65765ec20f.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.relationships_fact_monthly_budget_month_date_id__id__ref_dim_date_.8ccdca7d0c", "fqn": ["providence", "intermediate", "dim_model", "relationships_fact_monthly_budget_month_date_id__id__ref_dim_date_"], "alias": "relationships_fact_monthly_bud_b98889765df27d6a666bdd65765ec20f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fact_monthly_bud_b98889765df27d6a666bdd65765ec20f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fact_monthly_bud_b98889765df27d6a666bdd65765ec20f"}, "created_at": 1684070076.1257904, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fact_monthly_bud_b98889765df27d6a666bdd65765ec20f\") }}", "language": "sql", "refs": [["dim_date"], ["fact_monthly_budget"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_date", "model.providence.fact_monthly_budget"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/relationships_fact_monthly_bud_b98889765df27d6a666bdd65765ec20f.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select month_date_id as from_field\n    from \"mrzzy\".\"public\".\"fact_monthly_budget\"\n    where month_date_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"mrzzy\".\"public\".\"dim_date\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "month_date_id", "file_key_name": "models.fact_monthly_budget"}, "test.providence.not_null_fact_monthly_budget_budget_id.da8421df1a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "budget_id", "model": "{{ get_where_subquery(ref('fact_monthly_budget')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_fact_monthly_budget_budget_id", "resource_type": "test", "package_name": "providence", "path": "not_null_fact_monthly_budget_budget_id.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_fact_monthly_budget_budget_id.da8421df1a", "fqn": ["providence", "intermediate", "dim_model", "not_null_fact_monthly_budget_budget_id"], "alias": "not_null_fact_monthly_budget_budget_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.1324706, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_monthly_budget"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.fact_monthly_budget"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_fact_monthly_budget_budget_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect budget_id\nfrom \"mrzzy\".\"public\".\"fact_monthly_budget\"\nwhere budget_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "budget_id", "file_key_name": "models.fact_monthly_budget"}, "test.providence.relationships_fact_monthly_budget_budget_id__id__ref_dim_budget_.0d161cb61b": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref(\"dim_budget\")", "field": "id", "column_name": "budget_id", "model": "{{ get_where_subquery(ref('fact_monthly_budget')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "relationships_fact_monthly_budget_budget_id__id__ref_dim_budget_", "resource_type": "test", "package_name": "providence", "path": "relationships_fact_monthly_bud_0e4b90160ded2d8b2475b9cfe6fd7f8a.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.relationships_fact_monthly_budget_budget_id__id__ref_dim_budget_.0d161cb61b", "fqn": ["providence", "intermediate", "dim_model", "relationships_fact_monthly_budget_budget_id__id__ref_dim_budget_"], "alias": "relationships_fact_monthly_bud_0e4b90160ded2d8b2475b9cfe6fd7f8a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fact_monthly_bud_0e4b90160ded2d8b2475b9cfe6fd7f8a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fact_monthly_bud_0e4b90160ded2d8b2475b9cfe6fd7f8a"}, "created_at": 1684070076.1345851, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fact_monthly_bud_0e4b90160ded2d8b2475b9cfe6fd7f8a\") }}", "language": "sql", "refs": [["dim_budget"], ["fact_monthly_budget"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_budget", "model.providence.fact_monthly_budget"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/relationships_fact_monthly_bud_0e4b90160ded2d8b2475b9cfe6fd7f8a.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select budget_id as from_field\n    from \"mrzzy\".\"public\".\"fact_monthly_budget\"\n    where budget_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"mrzzy\".\"public\".\"dim_budget\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "budget_id", "file_key_name": "models.fact_monthly_budget"}, "test.providence.not_null_fact_monthly_budget_category_id.8a82ce7473": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "category_id", "model": "{{ get_where_subquery(ref('fact_monthly_budget')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_fact_monthly_budget_category_id", "resource_type": "test", "package_name": "providence", "path": "not_null_fact_monthly_budget_category_id.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_fact_monthly_budget_category_id.8a82ce7473", "fqn": ["providence", "intermediate", "dim_model", "not_null_fact_monthly_budget_category_id"], "alias": "not_null_fact_monthly_budget_category_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.1407166, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_monthly_budget"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.fact_monthly_budget"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_fact_monthly_budget_category_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect category_id\nfrom \"mrzzy\".\"public\".\"fact_monthly_budget\"\nwhere category_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "category_id", "file_key_name": "models.fact_monthly_budget"}, "test.providence.relationships_fact_monthly_budget_category_id__id__ref_dim_budget_category_.621c0ef023": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref(\"dim_budget_category\")", "field": "id", "column_name": "category_id", "model": "{{ get_where_subquery(ref('fact_monthly_budget')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "relationships_fact_monthly_budget_category_id__id__ref_dim_budget_category_", "resource_type": "test", "package_name": "providence", "path": "relationships_fact_monthly_bud_aa1e0c13c3fe8ff181f52324258050ed.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.relationships_fact_monthly_budget_category_id__id__ref_dim_budget_category_.621c0ef023", "fqn": ["providence", "intermediate", "dim_model", "relationships_fact_monthly_budget_category_id__id__ref_dim_budget_category_"], "alias": "relationships_fact_monthly_bud_aa1e0c13c3fe8ff181f52324258050ed", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fact_monthly_bud_aa1e0c13c3fe8ff181f52324258050ed", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fact_monthly_bud_aa1e0c13c3fe8ff181f52324258050ed"}, "created_at": 1684070076.1428375, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fact_monthly_bud_aa1e0c13c3fe8ff181f52324258050ed\") }}", "language": "sql", "refs": [["dim_budget_category"], ["fact_monthly_budget"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_budget_category", "model.providence.fact_monthly_budget"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/relationships_fact_monthly_bud_aa1e0c13c3fe8ff181f52324258050ed.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select category_id as from_field\n    from \"mrzzy\".\"public\".\"fact_monthly_budget\"\n    where category_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"mrzzy\".\"public\".\"dim_budget_category\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "category_id", "file_key_name": "models.fact_monthly_budget"}, "test.providence.not_null_fact_monthly_budget_amount.ea62317861": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "amount", "model": "{{ get_where_subquery(ref('fact_monthly_budget')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_fact_monthly_budget_amount", "resource_type": "test", "package_name": "providence", "path": "not_null_fact_monthly_budget_amount.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_fact_monthly_budget_amount.ea62317861", "fqn": ["providence", "intermediate", "dim_model", "not_null_fact_monthly_budget_amount"], "alias": "not_null_fact_monthly_budget_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.1489952, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_monthly_budget"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.fact_monthly_budget"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_fact_monthly_budget_amount.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect amount\nfrom \"mrzzy\".\"public\".\"fact_monthly_budget\"\nwhere amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "amount", "file_key_name": "models.fact_monthly_budget"}, "test.providence.not_null_fact_monthly_budget_updated_at.019c96409d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('fact_monthly_budget')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_fact_monthly_budget_updated_at", "resource_type": "test", "package_name": "providence", "path": "not_null_fact_monthly_budget_updated_at.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_fact_monthly_budget_updated_at.019c96409d", "fqn": ["providence", "intermediate", "dim_model", "not_null_fact_monthly_budget_updated_at"], "alias": "not_null_fact_monthly_budget_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.151134, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_monthly_budget"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.fact_monthly_budget"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_fact_monthly_budget_updated_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect updated_at\nfrom \"mrzzy\".\"public\".\"fact_monthly_budget\"\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "updated_at", "file_key_name": "models.fact_monthly_budget"}, "test.providence.unique_dim_payee_id.1b302dbda3": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('dim_payee')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "unique_dim_payee_id", "resource_type": "test", "package_name": "providence", "path": "unique_dim_payee_id.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.unique_dim_payee_id.1b302dbda3", "fqn": ["providence", "intermediate", "dim_model", "unique_dim_payee_id"], "alias": "unique_dim_payee_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.1532252, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_payee"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_payee"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/unique_dim_payee_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"mrzzy\".\"public\".\"dim_payee\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "id", "file_key_name": "models.dim_payee"}, "test.providence.not_null_dim_payee_id.5bb6244959": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('dim_payee')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_dim_payee_id", "resource_type": "test", "package_name": "providence", "path": "not_null_dim_payee_id.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_dim_payee_id.5bb6244959", "fqn": ["providence", "intermediate", "dim_model", "not_null_dim_payee_id"], "alias": "not_null_dim_payee_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.1556435, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_payee"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_payee"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_dim_payee_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"mrzzy\".\"public\".\"dim_payee\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "id", "file_key_name": "models.dim_payee"}, "test.providence.not_null_dim_payee_name.0471202f5e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('dim_payee')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_dim_payee_name", "resource_type": "test", "package_name": "providence", "path": "not_null_dim_payee_name.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_dim_payee_name.0471202f5e", "fqn": ["providence", "intermediate", "dim_model", "not_null_dim_payee_name"], "alias": "not_null_dim_payee_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.1577244, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_payee"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_payee"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_dim_payee_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"mrzzy\".\"public\".\"dim_payee\"\nwhere name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "name", "file_key_name": "models.dim_payee"}, "test.providence.relationships_dim_payee_transfer_account_id__id__ref_dim_account_.e25f5dbae6": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref(\"dim_account\")", "field": "id", "column_name": "transfer_account_id", "model": "{{ get_where_subquery(ref('dim_payee')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "relationships_dim_payee_transfer_account_id__id__ref_dim_account_", "resource_type": "test", "package_name": "providence", "path": "relationships_dim_payee_fc44d447fdd98f94acb7743f659c415c.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.relationships_dim_payee_transfer_account_id__id__ref_dim_account_.e25f5dbae6", "fqn": ["providence", "intermediate", "dim_model", "relationships_dim_payee_transfer_account_id__id__ref_dim_account_"], "alias": "relationships_dim_payee_fc44d447fdd98f94acb7743f659c415c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_dim_payee_fc44d447fdd98f94acb7743f659c415c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_dim_payee_fc44d447fdd98f94acb7743f659c415c"}, "created_at": 1684070076.159843, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_dim_payee_fc44d447fdd98f94acb7743f659c415c\") }}", "language": "sql", "refs": [["dim_account"], ["dim_payee"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_account", "model.providence.dim_payee"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/relationships_dim_payee_fc44d447fdd98f94acb7743f659c415c.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select transfer_account_id as from_field\n    from \"mrzzy\".\"public\".\"dim_payee\"\n    where transfer_account_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"mrzzy\".\"public\".\"dim_account\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "transfer_account_id", "file_key_name": "models.dim_payee"}, "test.providence.not_null_dim_payee_updated_at.f6242bcd60": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('dim_payee')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_dim_payee_updated_at", "resource_type": "test", "package_name": "providence", "path": "not_null_dim_payee_updated_at.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_dim_payee_updated_at.f6242bcd60", "fqn": ["providence", "intermediate", "dim_model", "not_null_dim_payee_updated_at"], "alias": "not_null_dim_payee_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.166112, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_payee"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_payee"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_dim_payee_updated_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect updated_at\nfrom \"mrzzy\".\"public\".\"dim_payee\"\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "updated_at", "file_key_name": "models.dim_payee"}, "test.providence.not_null_dim_payee_is_unaccounted.6d3f15be34": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_unaccounted", "model": "{{ get_where_subquery(ref('dim_payee')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_dim_payee_is_unaccounted", "resource_type": "test", "package_name": "providence", "path": "not_null_dim_payee_is_unaccounted.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_dim_payee_is_unaccounted.6d3f15be34", "fqn": ["providence", "intermediate", "dim_model", "not_null_dim_payee_is_unaccounted"], "alias": "not_null_dim_payee_is_unaccounted", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.1682231, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_payee"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_payee"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_dim_payee_is_unaccounted.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect is_unaccounted\nfrom \"mrzzy\".\"public\".\"dim_payee\"\nwhere is_unaccounted is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "is_unaccounted", "file_key_name": "models.dim_payee"}, "test.providence.not_null_dim_payee_is_passive.6c619654a1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_passive", "model": "{{ get_where_subquery(ref('dim_payee')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_dim_payee_is_passive", "resource_type": "test", "package_name": "providence", "path": "not_null_dim_payee_is_passive.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_dim_payee_is_passive.6c619654a1", "fqn": ["providence", "intermediate", "dim_model", "not_null_dim_payee_is_passive"], "alias": "not_null_dim_payee_is_passive", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.1703174, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_payee"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_payee"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_dim_payee_is_passive.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect is_passive\nfrom \"mrzzy\".\"public\".\"dim_payee\"\nwhere is_passive is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "is_passive", "file_key_name": "models.dim_payee"}, "test.providence.not_null_dim_account_id.c525515029": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('dim_account')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_dim_account_id", "resource_type": "test", "package_name": "providence", "path": "not_null_dim_account_id.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_dim_account_id.c525515029", "fqn": ["providence", "intermediate", "dim_model", "not_null_dim_account_id"], "alias": "not_null_dim_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.1727114, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_account"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_account"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_dim_account_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"mrzzy\".\"public\".\"dim_account\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "id", "file_key_name": "models.dim_account"}, "test.providence.unique_dim_account_id.03098a72cc": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('dim_account')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "unique_dim_account_id", "resource_type": "test", "package_name": "providence", "path": "unique_dim_account_id.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.unique_dim_account_id.03098a72cc", "fqn": ["providence", "intermediate", "dim_model", "unique_dim_account_id"], "alias": "unique_dim_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.174807, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_account"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_account"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/unique_dim_account_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"mrzzy\".\"public\".\"dim_account\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "id", "file_key_name": "models.dim_account"}, "test.providence.not_null_dim_account_name.69795079a1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('dim_account')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_dim_account_name", "resource_type": "test", "package_name": "providence", "path": "not_null_dim_account_name.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_dim_account_name.69795079a1", "fqn": ["providence", "intermediate", "dim_model", "not_null_dim_account_name"], "alias": "not_null_dim_account_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.1769066, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_account"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_account"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_dim_account_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"mrzzy\".\"public\".\"dim_account\"\nwhere name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "name", "file_key_name": "models.dim_account"}, "test.providence.not_null_dim_account_is_closed.4aefd67aa2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_closed", "model": "{{ get_where_subquery(ref('dim_account')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_dim_account_is_closed", "resource_type": "test", "package_name": "providence", "path": "not_null_dim_account_is_closed.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_dim_account_is_closed.4aefd67aa2", "fqn": ["providence", "intermediate", "dim_model", "not_null_dim_account_is_closed"], "alias": "not_null_dim_account_is_closed", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.179071, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_account"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_account"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_dim_account_is_closed.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect is_closed\nfrom \"mrzzy\".\"public\".\"dim_account\"\nwhere is_closed is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "is_closed", "file_key_name": "models.dim_account"}, "test.providence.not_null_dim_account_is_deleted.249d707245": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_deleted", "model": "{{ get_where_subquery(ref('dim_account')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_dim_account_is_deleted", "resource_type": "test", "package_name": "providence", "path": "not_null_dim_account_is_deleted.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_dim_account_is_deleted.249d707245", "fqn": ["providence", "intermediate", "dim_model", "not_null_dim_account_is_deleted"], "alias": "not_null_dim_account_is_deleted", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.1814566, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_account"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_account"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_dim_account_is_deleted.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect is_deleted\nfrom \"mrzzy\".\"public\".\"dim_account\"\nwhere is_deleted is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "is_deleted", "file_key_name": "models.dim_account"}, "test.providence.not_null_dim_account_is_cash.ac783ea59a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_cash", "model": "{{ get_where_subquery(ref('dim_account')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_dim_account_is_cash", "resource_type": "test", "package_name": "providence", "path": "not_null_dim_account_is_cash.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_dim_account_is_cash.ac783ea59a", "fqn": ["providence", "intermediate", "dim_model", "not_null_dim_account_is_cash"], "alias": "not_null_dim_account_is_cash", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.183572, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_account"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_account"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_dim_account_is_cash.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect is_cash\nfrom \"mrzzy\".\"public\".\"dim_account\"\nwhere is_cash is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "is_cash", "file_key_name": "models.dim_account"}, "test.providence.not_null_dim_account_budget_type.73ae332c56": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "budget_type", "model": "{{ get_where_subquery(ref('dim_account')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_dim_account_budget_type", "resource_type": "test", "package_name": "providence", "path": "not_null_dim_account_budget_type.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_dim_account_budget_type.73ae332c56", "fqn": ["providence", "intermediate", "dim_model", "not_null_dim_account_budget_type"], "alias": "not_null_dim_account_budget_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.185652, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_account"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_account"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_dim_account_budget_type.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect budget_type\nfrom \"mrzzy\".\"public\".\"dim_account\"\nwhere budget_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "budget_type", "file_key_name": "models.dim_account"}, "test.providence.accepted_values_dim_account_budget_type__checking__savings__cash__creditCard__lineOfCredit__otherAsset__otherLiability__mortgage__autoLoan__studentLoan__personalLoan__medicalDebt__otherDebt.6e20bce7f1": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["checking", "savings", "cash", "creditCard", "lineOfCredit", "otherAsset", "otherLiability", "mortgage", "autoLoan", "studentLoan", "personalLoan", "medicalDebt", "otherDebt"], "column_name": "budget_type", "model": "{{ get_where_subquery(ref('dim_account')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "accepted_values_dim_account_budget_type__checking__savings__cash__creditCard__lineOfCredit__otherAsset__otherLiability__mortgage__autoLoan__studentLoan__personalLoan__medicalDebt__otherDebt", "resource_type": "test", "package_name": "providence", "path": "accepted_values_dim_account_640838f55fa8a6b3226dfc4f4e384bfc.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.accepted_values_dim_account_budget_type__checking__savings__cash__creditCard__lineOfCredit__otherAsset__otherLiability__mortgage__autoLoan__studentLoan__personalLoan__medicalDebt__otherDebt.6e20bce7f1", "fqn": ["providence", "intermediate", "dim_model", "accepted_values_dim_account_budget_type__checking__savings__cash__creditCard__lineOfCredit__otherAsset__otherLiability__mortgage__autoLoan__studentLoan__personalLoan__medicalDebt__otherDebt"], "alias": "accepted_values_dim_account_640838f55fa8a6b3226dfc4f4e384bfc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_dim_account_640838f55fa8a6b3226dfc4f4e384bfc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_dim_account_640838f55fa8a6b3226dfc4f4e384bfc"}, "created_at": 1684070076.1878095, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_dim_account_640838f55fa8a6b3226dfc4f4e384bfc\") }}", "language": "sql", "refs": [["dim_account"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_account"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/accepted_values_dim_account_640838f55fa8a6b3226dfc4f4e384bfc.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        budget_type as value_field,\n        count(*) as n_records\n\n    from \"mrzzy\".\"public\".\"dim_account\"\n    group by budget_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'checking','savings','cash','creditCard','lineOfCredit','otherAsset','otherLiability','mortgage','autoLoan','studentLoan','personalLoan','medicalDebt','otherDebt'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "budget_type", "file_key_name": "models.dim_account"}, "test.providence.not_null_dim_account_updated_at.525779dd6b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('dim_account')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_dim_account_updated_at", "resource_type": "test", "package_name": "providence", "path": "not_null_dim_account_updated_at.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_dim_account_updated_at.525779dd6b", "fqn": ["providence", "intermediate", "dim_model", "not_null_dim_account_updated_at"], "alias": "not_null_dim_account_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.198771, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_account"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_account"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_dim_account_updated_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect updated_at\nfrom \"mrzzy\".\"public\".\"dim_account\"\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "updated_at", "file_key_name": "models.dim_account"}, "test.providence.dbt_utils_expression_is_true_dim_account__vendor_id_is_null_and_vendor_type_is_null_and_vendor_id_is_null_or_not_vendor_id_is_null_and_vendor_type_is_null_and_vendor_id_is_null_.0b5ef6ac94": {"test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "(vendor_id is null and vendor_type is null and vendor_id is null) or\nnot (vendor_id is null and vendor_type is null and vendor_id is null)\n", "model": "{{ get_where_subquery(ref('dim_account')) }}"}, "namespace": "dbt_utils"}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_dim_account__vendor_id_is_null_and_vendor_type_is_null_and_vendor_id_is_null_or_not_vendor_id_is_null_and_vendor_type_is_null_and_vendor_id_is_null_", "resource_type": "test", "package_name": "providence", "path": "dbt_utils_expression_is_true_d_b6a9b64d7dde8a87a651bdf583147a43.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.dbt_utils_expression_is_true_dim_account__vendor_id_is_null_and_vendor_type_is_null_and_vendor_id_is_null_or_not_vendor_id_is_null_and_vendor_type_is_null_and_vendor_id_is_null_.0b5ef6ac94", "fqn": ["providence", "intermediate", "dim_model", "dbt_utils_expression_is_true_dim_account__vendor_id_is_null_and_vendor_type_is_null_and_vendor_id_is_null_or_not_vendor_id_is_null_and_vendor_type_is_null_and_vendor_id_is_null_"], "alias": "dbt_utils_expression_is_true_d_b6a9b64d7dde8a87a651bdf583147a43", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_d_b6a9b64d7dde8a87a651bdf583147a43", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_expression_is_true_d_b6a9b64d7dde8a87a651bdf583147a43"}, "created_at": 1684070076.2008796, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_d_b6a9b64d7dde8a87a651bdf583147a43\") }}", "language": "sql", "refs": [["dim_account"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_account"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/dbt_utils_expression_is_true_d_b6a9b64d7dde8a87a651bdf583147a43.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"mrzzy\".\"public\".\"dim_account\"\n\nwhere not((vendor_id is null and vendor_type is null and vendor_id is null) or\nnot (vendor_id is null and vendor_type is null and vendor_id is null))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.dim_account"}, "test.providence.not_null_fact_accounting_transaction_id.3dbfbe0498": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('fact_accounting_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_fact_accounting_transaction_id", "resource_type": "test", "package_name": "providence", "path": "not_null_fact_accounting_transaction_id.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_fact_accounting_transaction_id.3dbfbe0498", "fqn": ["providence", "intermediate", "dim_model", "not_null_fact_accounting_transaction_id"], "alias": "not_null_fact_accounting_transaction_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.2066612, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_accounting_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.fact_accounting_transaction"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_fact_accounting_transaction_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"mrzzy\".\"public\".\"fact_accounting_transaction\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "id", "file_key_name": "models.fact_accounting_transaction"}, "test.providence.unique_fact_accounting_transaction_id.abe672c4c0": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('fact_accounting_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "unique_fact_accounting_transaction_id", "resource_type": "test", "package_name": "providence", "path": "unique_fact_accounting_transaction_id.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.unique_fact_accounting_transaction_id.abe672c4c0", "fqn": ["providence", "intermediate", "dim_model", "unique_fact_accounting_transaction_id"], "alias": "unique_fact_accounting_transaction_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.2087588, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_accounting_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.fact_accounting_transaction"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/unique_fact_accounting_transaction_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"mrzzy\".\"public\".\"fact_accounting_transaction\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "id", "file_key_name": "models.fact_accounting_transaction"}, "test.providence.relationships_fact_accounting_transaction_super_id__id__ref_stg_ynab_transaction_.80e6b77b9c": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref(\"stg_ynab_transaction\")", "field": "id", "column_name": "super_id", "model": "{{ get_where_subquery(ref('fact_accounting_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "relationships_fact_accounting_transaction_super_id__id__ref_stg_ynab_transaction_", "resource_type": "test", "package_name": "providence", "path": "relationships_fact_accounting__60336e8f5a61cbc0359858dc7794b25f.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.relationships_fact_accounting_transaction_super_id__id__ref_stg_ynab_transaction_.80e6b77b9c", "fqn": ["providence", "intermediate", "dim_model", "relationships_fact_accounting_transaction_super_id__id__ref_stg_ynab_transaction_"], "alias": "relationships_fact_accounting__60336e8f5a61cbc0359858dc7794b25f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fact_accounting__60336e8f5a61cbc0359858dc7794b25f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fact_accounting__60336e8f5a61cbc0359858dc7794b25f"}, "created_at": 1684070076.2111812, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fact_accounting__60336e8f5a61cbc0359858dc7794b25f\") }}", "language": "sql", "refs": [["stg_ynab_transaction"], ["fact_accounting_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_transaction", "model.providence.fact_accounting_transaction"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/relationships_fact_accounting__60336e8f5a61cbc0359858dc7794b25f.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select super_id as from_field\n    from \"mrzzy\".\"public\".\"fact_accounting_transaction\"\n    where super_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"mrzzy\".\"public\".\"stg_ynab_transaction\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "super_id", "file_key_name": "models.fact_accounting_transaction"}, "test.providence.not_null_fact_accounting_transaction_amount.f3893c8d61": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "amount", "model": "{{ get_where_subquery(ref('fact_accounting_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_fact_accounting_transaction_amount", "resource_type": "test", "package_name": "providence", "path": "not_null_fact_accounting_transaction_amount.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_fact_accounting_transaction_amount.f3893c8d61", "fqn": ["providence", "intermediate", "dim_model", "not_null_fact_accounting_transaction_amount"], "alias": "not_null_fact_accounting_transaction_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.2171512, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_accounting_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.fact_accounting_transaction"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_fact_accounting_transaction_amount.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect amount\nfrom \"mrzzy\".\"public\".\"fact_accounting_transaction\"\nwhere amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "amount", "file_key_name": "models.fact_accounting_transaction"}, "test.providence.not_null_fact_accounting_transaction_clearing_status.cad5f8ec19": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "clearing_status", "model": "{{ get_where_subquery(ref('fact_accounting_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_fact_accounting_transaction_clearing_status", "resource_type": "test", "package_name": "providence", "path": "not_null_fact_accounting_transaction_clearing_status.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_fact_accounting_transaction_clearing_status.cad5f8ec19", "fqn": ["providence", "intermediate", "dim_model", "not_null_fact_accounting_transaction_clearing_status"], "alias": "not_null_fact_accounting_transaction_clearing_status", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.219561, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_accounting_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.fact_accounting_transaction"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_fact_accounting_transaction_clearing_status.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect clearing_status\nfrom \"mrzzy\".\"public\".\"fact_accounting_transaction\"\nwhere clearing_status is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "clearing_status", "file_key_name": "models.fact_accounting_transaction"}, "test.providence.accepted_values_fact_accounting_transaction_clearing_status__cleared__uncleared__reconciled.0ee9b01241": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["cleared", "uncleared", "reconciled"], "column_name": "clearing_status", "model": "{{ get_where_subquery(ref('fact_accounting_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "accepted_values_fact_accounting_transaction_clearing_status__cleared__uncleared__reconciled", "resource_type": "test", "package_name": "providence", "path": "accepted_values_fact_accountin_e6e7106bfbc17c81c847c8f109bb3e3c.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.accepted_values_fact_accounting_transaction_clearing_status__cleared__uncleared__reconciled.0ee9b01241", "fqn": ["providence", "intermediate", "dim_model", "accepted_values_fact_accounting_transaction_clearing_status__cleared__uncleared__reconciled"], "alias": "accepted_values_fact_accountin_e6e7106bfbc17c81c847c8f109bb3e3c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_fact_accountin_e6e7106bfbc17c81c847c8f109bb3e3c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_fact_accountin_e6e7106bfbc17c81c847c8f109bb3e3c"}, "created_at": 1684070076.2216592, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_fact_accountin_e6e7106bfbc17c81c847c8f109bb3e3c\") }}", "language": "sql", "refs": [["fact_accounting_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.fact_accounting_transaction"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/accepted_values_fact_accountin_e6e7106bfbc17c81c847c8f109bb3e3c.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        clearing_status as value_field,\n        count(*) as n_records\n\n    from \"mrzzy\".\"public\".\"fact_accounting_transaction\"\n    group by clearing_status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'cleared','uncleared','reconciled'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "clearing_status", "file_key_name": "models.fact_accounting_transaction"}, "test.providence.not_null_fact_accounting_transaction_is_approved.612d410c7d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_approved", "model": "{{ get_where_subquery(ref('fact_accounting_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_fact_accounting_transaction_is_approved", "resource_type": "test", "package_name": "providence", "path": "not_null_fact_accounting_transaction_is_approved.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_fact_accounting_transaction_is_approved.612d410c7d", "fqn": ["providence", "intermediate", "dim_model", "not_null_fact_accounting_transaction_is_approved"], "alias": "not_null_fact_accounting_transaction_is_approved", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.2284515, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_accounting_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.fact_accounting_transaction"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_fact_accounting_transaction_is_approved.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect is_approved\nfrom \"mrzzy\".\"public\".\"fact_accounting_transaction\"\nwhere is_approved is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "is_approved", "file_key_name": "models.fact_accounting_transaction"}, "test.providence.not_null_fact_accounting_transaction_budget_id.f23909fedb": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "budget_id", "model": "{{ get_where_subquery(ref('fact_accounting_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_fact_accounting_transaction_budget_id", "resource_type": "test", "package_name": "providence", "path": "not_null_fact_accounting_transaction_budget_id.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_fact_accounting_transaction_budget_id.f23909fedb", "fqn": ["providence", "intermediate", "dim_model", "not_null_fact_accounting_transaction_budget_id"], "alias": "not_null_fact_accounting_transaction_budget_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.2305298, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_accounting_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.fact_accounting_transaction"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_fact_accounting_transaction_budget_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect budget_id\nfrom \"mrzzy\".\"public\".\"fact_accounting_transaction\"\nwhere budget_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "budget_id", "file_key_name": "models.fact_accounting_transaction"}, "test.providence.relationships_fact_accounting_transaction_budget_id__id__ref_dim_budget_.6fbd836a5a": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref(\"dim_budget\")", "field": "id", "column_name": "budget_id", "model": "{{ get_where_subquery(ref('fact_accounting_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "relationships_fact_accounting_transaction_budget_id__id__ref_dim_budget_", "resource_type": "test", "package_name": "providence", "path": "relationships_fact_accounting__d8d2e513955c7fa784f79c906ebd36cf.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.relationships_fact_accounting_transaction_budget_id__id__ref_dim_budget_.6fbd836a5a", "fqn": ["providence", "intermediate", "dim_model", "relationships_fact_accounting_transaction_budget_id__id__ref_dim_budget_"], "alias": "relationships_fact_accounting__d8d2e513955c7fa784f79c906ebd36cf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fact_accounting__d8d2e513955c7fa784f79c906ebd36cf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fact_accounting__d8d2e513955c7fa784f79c906ebd36cf"}, "created_at": 1684070076.232639, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fact_accounting__d8d2e513955c7fa784f79c906ebd36cf\") }}", "language": "sql", "refs": [["dim_budget"], ["fact_accounting_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_budget", "model.providence.fact_accounting_transaction"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/relationships_fact_accounting__d8d2e513955c7fa784f79c906ebd36cf.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select budget_id as from_field\n    from \"mrzzy\".\"public\".\"fact_accounting_transaction\"\n    where budget_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"mrzzy\".\"public\".\"dim_budget\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "budget_id", "file_key_name": "models.fact_accounting_transaction"}, "test.providence.not_null_fact_accounting_transaction_account_id.3f40475ab6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('fact_accounting_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_fact_accounting_transaction_account_id", "resource_type": "test", "package_name": "providence", "path": "not_null_fact_accounting_transaction_account_id.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_fact_accounting_transaction_account_id.3f40475ab6", "fqn": ["providence", "intermediate", "dim_model", "not_null_fact_accounting_transaction_account_id"], "alias": "not_null_fact_accounting_transaction_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.2388227, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_accounting_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.fact_accounting_transaction"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_fact_accounting_transaction_account_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom \"mrzzy\".\"public\".\"fact_accounting_transaction\"\nwhere account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "account_id", "file_key_name": "models.fact_accounting_transaction"}, "test.providence.relationships_fact_accounting_transaction_account_id__id__ref_dim_account_.ac11c53d5e": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref(\"dim_account\")", "field": "id", "column_name": "account_id", "model": "{{ get_where_subquery(ref('fact_accounting_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "relationships_fact_accounting_transaction_account_id__id__ref_dim_account_", "resource_type": "test", "package_name": "providence", "path": "relationships_fact_accounting__208500cacb60e5ce63f7dd175631a9c5.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.relationships_fact_accounting_transaction_account_id__id__ref_dim_account_.ac11c53d5e", "fqn": ["providence", "intermediate", "dim_model", "relationships_fact_accounting_transaction_account_id__id__ref_dim_account_"], "alias": "relationships_fact_accounting__208500cacb60e5ce63f7dd175631a9c5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fact_accounting__208500cacb60e5ce63f7dd175631a9c5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fact_accounting__208500cacb60e5ce63f7dd175631a9c5"}, "created_at": 1684070076.2409267, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fact_accounting__208500cacb60e5ce63f7dd175631a9c5\") }}", "language": "sql", "refs": [["dim_account"], ["fact_accounting_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_account", "model.providence.fact_accounting_transaction"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/relationships_fact_accounting__208500cacb60e5ce63f7dd175631a9c5.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select account_id as from_field\n    from \"mrzzy\".\"public\".\"fact_accounting_transaction\"\n    where account_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"mrzzy\".\"public\".\"dim_account\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "account_id", "file_key_name": "models.fact_accounting_transaction"}, "test.providence.relationships_fact_accounting_transaction_category_id__id__ref_dim_budget_category_.30e27b814d": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref(\"dim_budget_category\")", "field": "id", "column_name": "category_id", "model": "{{ get_where_subquery(ref('fact_accounting_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "relationships_fact_accounting_transaction_category_id__id__ref_dim_budget_category_", "resource_type": "test", "package_name": "providence", "path": "relationships_fact_accounting__609182466e4d990054f0abf89ced7448.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.relationships_fact_accounting_transaction_category_id__id__ref_dim_budget_category_.30e27b814d", "fqn": ["providence", "intermediate", "dim_model", "relationships_fact_accounting_transaction_category_id__id__ref_dim_budget_category_"], "alias": "relationships_fact_accounting__609182466e4d990054f0abf89ced7448", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fact_accounting__609182466e4d990054f0abf89ced7448", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fact_accounting__609182466e4d990054f0abf89ced7448"}, "created_at": 1684070076.2471228, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fact_accounting__609182466e4d990054f0abf89ced7448\") }}", "language": "sql", "refs": [["dim_budget_category"], ["fact_accounting_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_budget_category", "model.providence.fact_accounting_transaction"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/relationships_fact_accounting__609182466e4d990054f0abf89ced7448.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select category_id as from_field\n    from \"mrzzy\".\"public\".\"fact_accounting_transaction\"\n    where category_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"mrzzy\".\"public\".\"dim_budget_category\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "category_id", "file_key_name": "models.fact_accounting_transaction"}, "test.providence.relationships_fact_accounting_transaction_payee_id__id__ref_dim_payee_.9c6ca5ae6d": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref(\"dim_payee\")", "field": "id", "column_name": "payee_id", "model": "{{ get_where_subquery(ref('fact_accounting_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "relationships_fact_accounting_transaction_payee_id__id__ref_dim_payee_", "resource_type": "test", "package_name": "providence", "path": "relationships_fact_accounting__24644a426e2efd741d14e226fe537ef2.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.relationships_fact_accounting_transaction_payee_id__id__ref_dim_payee_.9c6ca5ae6d", "fqn": ["providence", "intermediate", "dim_model", "relationships_fact_accounting_transaction_payee_id__id__ref_dim_payee_"], "alias": "relationships_fact_accounting__24644a426e2efd741d14e226fe537ef2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fact_accounting__24644a426e2efd741d14e226fe537ef2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fact_accounting__24644a426e2efd741d14e226fe537ef2"}, "created_at": 1684070076.2532773, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fact_accounting__24644a426e2efd741d14e226fe537ef2\") }}", "language": "sql", "refs": [["dim_payee"], ["fact_accounting_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_payee", "model.providence.fact_accounting_transaction"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/relationships_fact_accounting__24644a426e2efd741d14e226fe537ef2.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select payee_id as from_field\n    from \"mrzzy\".\"public\".\"fact_accounting_transaction\"\n    where payee_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"mrzzy\".\"public\".\"dim_payee\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "payee_id", "file_key_name": "models.fact_accounting_transaction"}, "test.providence.relationships_fact_accounting_transaction_transfer_account_id__id__ref_dim_account_.18c7cb303c": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref(\"dim_account\")", "field": "id", "column_name": "transfer_account_id", "model": "{{ get_where_subquery(ref('fact_accounting_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "relationships_fact_accounting_transaction_transfer_account_id__id__ref_dim_account_", "resource_type": "test", "package_name": "providence", "path": "relationships_fact_accounting__0b9d8d91ede3b99350bf1131bff71b5a.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.relationships_fact_accounting_transaction_transfer_account_id__id__ref_dim_account_.18c7cb303c", "fqn": ["providence", "intermediate", "dim_model", "relationships_fact_accounting_transaction_transfer_account_id__id__ref_dim_account_"], "alias": "relationships_fact_accounting__0b9d8d91ede3b99350bf1131bff71b5a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fact_accounting__0b9d8d91ede3b99350bf1131bff71b5a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fact_accounting__0b9d8d91ede3b99350bf1131bff71b5a"}, "created_at": 1684070076.2594647, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fact_accounting__0b9d8d91ede3b99350bf1131bff71b5a\") }}", "language": "sql", "refs": [["dim_account"], ["fact_accounting_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_account", "model.providence.fact_accounting_transaction"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/relationships_fact_accounting__0b9d8d91ede3b99350bf1131bff71b5a.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select transfer_account_id as from_field\n    from \"mrzzy\".\"public\".\"fact_accounting_transaction\"\n    where transfer_account_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"mrzzy\".\"public\".\"dim_account\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "transfer_account_id", "file_key_name": "models.fact_accounting_transaction"}, "test.providence.not_null_fact_accounting_transaction_date_id.99234ccbf5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_id", "model": "{{ get_where_subquery(ref('fact_accounting_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_fact_accounting_transaction_date_id", "resource_type": "test", "package_name": "providence", "path": "not_null_fact_accounting_transaction_date_id.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_fact_accounting_transaction_date_id.99234ccbf5", "fqn": ["providence", "intermediate", "dim_model", "not_null_fact_accounting_transaction_date_id"], "alias": "not_null_fact_accounting_transaction_date_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.2656372, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_accounting_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.fact_accounting_transaction"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_fact_accounting_transaction_date_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date_id\nfrom \"mrzzy\".\"public\".\"fact_accounting_transaction\"\nwhere date_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "date_id", "file_key_name": "models.fact_accounting_transaction"}, "test.providence.relationships_fact_accounting_transaction_date_id__id__ref_dim_date_.187c6e8831": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref(\"dim_date\")", "field": "id", "column_name": "date_id", "model": "{{ get_where_subquery(ref('fact_accounting_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "relationships_fact_accounting_transaction_date_id__id__ref_dim_date_", "resource_type": "test", "package_name": "providence", "path": "relationships_fact_accounting__8fc920b9da5241317d7fb7b6ac6b9e06.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.relationships_fact_accounting_transaction_date_id__id__ref_dim_date_.187c6e8831", "fqn": ["providence", "intermediate", "dim_model", "relationships_fact_accounting_transaction_date_id__id__ref_dim_date_"], "alias": "relationships_fact_accounting__8fc920b9da5241317d7fb7b6ac6b9e06", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fact_accounting__8fc920b9da5241317d7fb7b6ac6b9e06", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fact_accounting__8fc920b9da5241317d7fb7b6ac6b9e06"}, "created_at": 1684070076.2677867, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fact_accounting__8fc920b9da5241317d7fb7b6ac6b9e06\") }}", "language": "sql", "refs": [["dim_date"], ["fact_accounting_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_date", "model.providence.fact_accounting_transaction"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/relationships_fact_accounting__8fc920b9da5241317d7fb7b6ac6b9e06.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select date_id as from_field\n    from \"mrzzy\".\"public\".\"fact_accounting_transaction\"\n    where date_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"mrzzy\".\"public\".\"dim_date\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "date_id", "file_key_name": "models.fact_accounting_transaction"}, "test.providence.not_null_fact_accounting_transaction_updated_at.aa62b60ad2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('fact_accounting_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_fact_accounting_transaction_updated_at", "resource_type": "test", "package_name": "providence", "path": "not_null_fact_accounting_transaction_updated_at.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_fact_accounting_transaction_updated_at.aa62b60ad2", "fqn": ["providence", "intermediate", "dim_model", "not_null_fact_accounting_transaction_updated_at"], "alias": "not_null_fact_accounting_transaction_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.2739277, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_accounting_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.fact_accounting_transaction"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_fact_accounting_transaction_updated_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect updated_at\nfrom \"mrzzy\".\"public\".\"fact_accounting_transaction\"\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "updated_at", "file_key_name": "models.fact_accounting_transaction"}, "test.providence.unique_fact_vendor_transaction_id.65aee356e1": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('fact_vendor_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "unique_fact_vendor_transaction_id", "resource_type": "test", "package_name": "providence", "path": "unique_fact_vendor_transaction_id.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.unique_fact_vendor_transaction_id.65aee356e1", "fqn": ["providence", "intermediate", "dim_model", "unique_fact_vendor_transaction_id"], "alias": "unique_fact_vendor_transaction_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.2760575, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_vendor_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.fact_vendor_transaction"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/unique_fact_vendor_transaction_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"mrzzy\".\"public\".\"fact_vendor_transaction\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "id", "file_key_name": "models.fact_vendor_transaction"}, "test.providence.not_null_fact_vendor_transaction_id.d6eb69ec40": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('fact_vendor_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_fact_vendor_transaction_id", "resource_type": "test", "package_name": "providence", "path": "not_null_fact_vendor_transaction_id.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_fact_vendor_transaction_id.d6eb69ec40", "fqn": ["providence", "intermediate", "dim_model", "not_null_fact_vendor_transaction_id"], "alias": "not_null_fact_vendor_transaction_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.2781339, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_vendor_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.fact_vendor_transaction"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_fact_vendor_transaction_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"mrzzy\".\"public\".\"fact_vendor_transaction\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "id", "file_key_name": "models.fact_vendor_transaction"}, "test.providence.not_null_fact_vendor_transaction_description.3362e304ff": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "description", "model": "{{ get_where_subquery(ref('fact_vendor_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_fact_vendor_transaction_description", "resource_type": "test", "package_name": "providence", "path": "not_null_fact_vendor_transaction_description.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_fact_vendor_transaction_description.3362e304ff", "fqn": ["providence", "intermediate", "dim_model", "not_null_fact_vendor_transaction_description"], "alias": "not_null_fact_vendor_transaction_description", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.2805305, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_vendor_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.fact_vendor_transaction"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_fact_vendor_transaction_description.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect description\nfrom \"mrzzy\".\"public\".\"fact_vendor_transaction\"\nwhere description is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "description", "file_key_name": "models.fact_vendor_transaction"}, "test.providence.not_null_fact_vendor_transaction_date_id.0908222b76": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_id", "model": "{{ get_where_subquery(ref('fact_vendor_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_fact_vendor_transaction_date_id", "resource_type": "test", "package_name": "providence", "path": "not_null_fact_vendor_transaction_date_id.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_fact_vendor_transaction_date_id.0908222b76", "fqn": ["providence", "intermediate", "dim_model", "not_null_fact_vendor_transaction_date_id"], "alias": "not_null_fact_vendor_transaction_date_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.2826626, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_vendor_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.fact_vendor_transaction"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_fact_vendor_transaction_date_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date_id\nfrom \"mrzzy\".\"public\".\"fact_vendor_transaction\"\nwhere date_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "date_id", "file_key_name": "models.fact_vendor_transaction"}, "test.providence.relationships_fact_vendor_transaction_date_id__id__ref_dim_date_.9733ab2ab4": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref(\"dim_date\")", "field": "id", "column_name": "date_id", "model": "{{ get_where_subquery(ref('fact_vendor_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "relationships_fact_vendor_transaction_date_id__id__ref_dim_date_", "resource_type": "test", "package_name": "providence", "path": "relationships_fact_vendor_tran_0b5368269c1a3ba40ea6990f0916decc.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.relationships_fact_vendor_transaction_date_id__id__ref_dim_date_.9733ab2ab4", "fqn": ["providence", "intermediate", "dim_model", "relationships_fact_vendor_transaction_date_id__id__ref_dim_date_"], "alias": "relationships_fact_vendor_tran_0b5368269c1a3ba40ea6990f0916decc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fact_vendor_tran_0b5368269c1a3ba40ea6990f0916decc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fact_vendor_tran_0b5368269c1a3ba40ea6990f0916decc"}, "created_at": 1684070076.2847738, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fact_vendor_tran_0b5368269c1a3ba40ea6990f0916decc\") }}", "language": "sql", "refs": [["dim_date"], ["fact_vendor_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_date", "model.providence.fact_vendor_transaction"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/relationships_fact_vendor_tran_0b5368269c1a3ba40ea6990f0916decc.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select date_id as from_field\n    from \"mrzzy\".\"public\".\"fact_vendor_transaction\"\n    where date_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"mrzzy\".\"public\".\"dim_date\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "date_id", "file_key_name": "models.fact_vendor_transaction"}, "test.providence.not_null_fact_vendor_transaction_account_id.ea995f0f67": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('fact_vendor_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_fact_vendor_transaction_account_id", "resource_type": "test", "package_name": "providence", "path": "not_null_fact_vendor_transaction_account_id.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_fact_vendor_transaction_account_id.ea995f0f67", "fqn": ["providence", "intermediate", "dim_model", "not_null_fact_vendor_transaction_account_id"], "alias": "not_null_fact_vendor_transaction_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.2909591, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_vendor_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.fact_vendor_transaction"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_fact_vendor_transaction_account_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom \"mrzzy\".\"public\".\"fact_vendor_transaction\"\nwhere account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "account_id", "file_key_name": "models.fact_vendor_transaction"}, "test.providence.relationships_fact_vendor_transaction_account_id__id__ref_dim_account_.9bab398a5f": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref(\"dim_account\")", "field": "id", "column_name": "account_id", "model": "{{ get_where_subquery(ref('fact_vendor_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "relationships_fact_vendor_transaction_account_id__id__ref_dim_account_", "resource_type": "test", "package_name": "providence", "path": "relationships_fact_vendor_tran_b0ce809273226088a1b75c7b669d7ecd.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.relationships_fact_vendor_transaction_account_id__id__ref_dim_account_.9bab398a5f", "fqn": ["providence", "intermediate", "dim_model", "relationships_fact_vendor_transaction_account_id__id__ref_dim_account_"], "alias": "relationships_fact_vendor_tran_b0ce809273226088a1b75c7b669d7ecd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fact_vendor_tran_b0ce809273226088a1b75c7b669d7ecd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fact_vendor_tran_b0ce809273226088a1b75c7b669d7ecd"}, "created_at": 1684070076.2930708, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fact_vendor_tran_b0ce809273226088a1b75c7b669d7ecd\") }}", "language": "sql", "refs": [["dim_account"], ["fact_vendor_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_account", "model.providence.fact_vendor_transaction"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/relationships_fact_vendor_tran_b0ce809273226088a1b75c7b669d7ecd.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select account_id as from_field\n    from \"mrzzy\".\"public\".\"fact_vendor_transaction\"\n    where account_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"mrzzy\".\"public\".\"dim_account\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "account_id", "file_key_name": "models.fact_vendor_transaction"}, "test.providence.not_null_fact_vendor_transaction_amount.c1ca65fe5a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "amount", "model": "{{ get_where_subquery(ref('fact_vendor_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_fact_vendor_transaction_amount", "resource_type": "test", "package_name": "providence", "path": "not_null_fact_vendor_transaction_amount.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_fact_vendor_transaction_amount.c1ca65fe5a", "fqn": ["providence", "intermediate", "dim_model", "not_null_fact_vendor_transaction_amount"], "alias": "not_null_fact_vendor_transaction_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.2992716, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_vendor_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.fact_vendor_transaction"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_fact_vendor_transaction_amount.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect amount\nfrom \"mrzzy\".\"public\".\"fact_vendor_transaction\"\nwhere amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "amount", "file_key_name": "models.fact_vendor_transaction"}, "test.providence.not_null_fact_vendor_transaction_updated_at.264f91d0c8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('fact_vendor_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_fact_vendor_transaction_updated_at", "resource_type": "test", "package_name": "providence", "path": "not_null_fact_vendor_transaction_updated_at.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_fact_vendor_transaction_updated_at.264f91d0c8", "fqn": ["providence", "intermediate", "dim_model", "not_null_fact_vendor_transaction_updated_at"], "alias": "not_null_fact_vendor_transaction_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.3013632, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_vendor_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.fact_vendor_transaction"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_fact_vendor_transaction_updated_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect updated_at\nfrom \"mrzzy\".\"public\".\"fact_vendor_transaction\"\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "updated_at", "file_key_name": "models.fact_vendor_transaction"}, "test.providence.unique_fact_bank_statement_id.397aebff0f": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('fact_bank_statement')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "unique_fact_bank_statement_id", "resource_type": "test", "package_name": "providence", "path": "unique_fact_bank_statement_id.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.unique_fact_bank_statement_id.397aebff0f", "fqn": ["providence", "intermediate", "dim_model", "unique_fact_bank_statement_id"], "alias": "unique_fact_bank_statement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.3034613, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_bank_statement"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.fact_bank_statement"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/unique_fact_bank_statement_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"mrzzy\".\"public\".\"fact_bank_statement\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "id", "file_key_name": "models.fact_bank_statement"}, "test.providence.not_null_fact_bank_statement_id.2d02dd086a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('fact_bank_statement')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_fact_bank_statement_id", "resource_type": "test", "package_name": "providence", "path": "not_null_fact_bank_statement_id.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_fact_bank_statement_id.2d02dd086a", "fqn": ["providence", "intermediate", "dim_model", "not_null_fact_bank_statement_id"], "alias": "not_null_fact_bank_statement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.3058329, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_bank_statement"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.fact_bank_statement"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_fact_bank_statement_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"mrzzy\".\"public\".\"fact_bank_statement\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "id", "file_key_name": "models.fact_bank_statement"}, "test.providence.not_null_fact_bank_statement_begin_date_id.9a523d8288": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "begin_date_id", "model": "{{ get_where_subquery(ref('fact_bank_statement')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_fact_bank_statement_begin_date_id", "resource_type": "test", "package_name": "providence", "path": "not_null_fact_bank_statement_begin_date_id.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_fact_bank_statement_begin_date_id.9a523d8288", "fqn": ["providence", "intermediate", "dim_model", "not_null_fact_bank_statement_begin_date_id"], "alias": "not_null_fact_bank_statement_begin_date_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.307942, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_bank_statement"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.fact_bank_statement"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_fact_bank_statement_begin_date_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect begin_date_id\nfrom \"mrzzy\".\"public\".\"fact_bank_statement\"\nwhere begin_date_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "begin_date_id", "file_key_name": "models.fact_bank_statement"}, "test.providence.relationships_fact_bank_statement_begin_date_id__id__ref_dim_date_.60ddefb0f2": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref(\"dim_date\")", "field": "id", "column_name": "begin_date_id", "model": "{{ get_where_subquery(ref('fact_bank_statement')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "relationships_fact_bank_statement_begin_date_id__id__ref_dim_date_", "resource_type": "test", "package_name": "providence", "path": "relationships_fact_bank_statem_bdf3399f7a9fecd35cd90d2db676b48a.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.relationships_fact_bank_statement_begin_date_id__id__ref_dim_date_.60ddefb0f2", "fqn": ["providence", "intermediate", "dim_model", "relationships_fact_bank_statement_begin_date_id__id__ref_dim_date_"], "alias": "relationships_fact_bank_statem_bdf3399f7a9fecd35cd90d2db676b48a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fact_bank_statem_bdf3399f7a9fecd35cd90d2db676b48a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fact_bank_statem_bdf3399f7a9fecd35cd90d2db676b48a"}, "created_at": 1684070076.3100119, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fact_bank_statem_bdf3399f7a9fecd35cd90d2db676b48a\") }}", "language": "sql", "refs": [["dim_date"], ["fact_bank_statement"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_date", "model.providence.fact_bank_statement"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/relationships_fact_bank_statem_bdf3399f7a9fecd35cd90d2db676b48a.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select begin_date_id as from_field\n    from \"mrzzy\".\"public\".\"fact_bank_statement\"\n    where begin_date_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"mrzzy\".\"public\".\"dim_date\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "begin_date_id", "file_key_name": "models.fact_bank_statement"}, "test.providence.not_null_fact_bank_statement_end_date_id.4b8a538677": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "end_date_id", "model": "{{ get_where_subquery(ref('fact_bank_statement')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_fact_bank_statement_end_date_id", "resource_type": "test", "package_name": "providence", "path": "not_null_fact_bank_statement_end_date_id.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_fact_bank_statement_end_date_id.4b8a538677", "fqn": ["providence", "intermediate", "dim_model", "not_null_fact_bank_statement_end_date_id"], "alias": "not_null_fact_bank_statement_end_date_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.316322, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_bank_statement"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.fact_bank_statement"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_fact_bank_statement_end_date_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect end_date_id\nfrom \"mrzzy\".\"public\".\"fact_bank_statement\"\nwhere end_date_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "end_date_id", "file_key_name": "models.fact_bank_statement"}, "test.providence.relationships_fact_bank_statement_end_date_id__id__ref_dim_date_.169ccb9dca": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref(\"dim_date\")", "field": "id", "column_name": "end_date_id", "model": "{{ get_where_subquery(ref('fact_bank_statement')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "relationships_fact_bank_statement_end_date_id__id__ref_dim_date_", "resource_type": "test", "package_name": "providence", "path": "relationships_fact_bank_statem_94ad8d302235791bb962553641217b36.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.relationships_fact_bank_statement_end_date_id__id__ref_dim_date_.169ccb9dca", "fqn": ["providence", "intermediate", "dim_model", "relationships_fact_bank_statement_end_date_id__id__ref_dim_date_"], "alias": "relationships_fact_bank_statem_94ad8d302235791bb962553641217b36", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fact_bank_statem_94ad8d302235791bb962553641217b36", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fact_bank_statem_94ad8d302235791bb962553641217b36"}, "created_at": 1684070076.3184302, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fact_bank_statem_94ad8d302235791bb962553641217b36\") }}", "language": "sql", "refs": [["dim_date"], ["fact_bank_statement"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_date", "model.providence.fact_bank_statement"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/relationships_fact_bank_statem_94ad8d302235791bb962553641217b36.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select end_date_id as from_field\n    from \"mrzzy\".\"public\".\"fact_bank_statement\"\n    where end_date_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"mrzzy\".\"public\".\"dim_date\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "end_date_id", "file_key_name": "models.fact_bank_statement"}, "test.providence.not_null_fact_bank_statement_account_id.b3a3b1b348": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('fact_bank_statement')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_fact_bank_statement_account_id", "resource_type": "test", "package_name": "providence", "path": "not_null_fact_bank_statement_account_id.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_fact_bank_statement_account_id.b3a3b1b348", "fqn": ["providence", "intermediate", "dim_model", "not_null_fact_bank_statement_account_id"], "alias": "not_null_fact_bank_statement_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.3252368, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_bank_statement"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.fact_bank_statement"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_fact_bank_statement_account_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom \"mrzzy\".\"public\".\"fact_bank_statement\"\nwhere account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "account_id", "file_key_name": "models.fact_bank_statement"}, "test.providence.relationships_fact_bank_statement_account_id__id__ref_dim_account_.97a7e5c36b": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref(\"dim_account\")", "field": "id", "column_name": "account_id", "model": "{{ get_where_subquery(ref('fact_bank_statement')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "relationships_fact_bank_statement_account_id__id__ref_dim_account_", "resource_type": "test", "package_name": "providence", "path": "relationships_fact_bank_statem_cf34187b2ed97e6b2565313148012568.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.relationships_fact_bank_statement_account_id__id__ref_dim_account_.97a7e5c36b", "fqn": ["providence", "intermediate", "dim_model", "relationships_fact_bank_statement_account_id__id__ref_dim_account_"], "alias": "relationships_fact_bank_statem_cf34187b2ed97e6b2565313148012568", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fact_bank_statem_cf34187b2ed97e6b2565313148012568", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fact_bank_statem_cf34187b2ed97e6b2565313148012568"}, "created_at": 1684070076.327347, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fact_bank_statem_cf34187b2ed97e6b2565313148012568\") }}", "language": "sql", "refs": [["dim_account"], ["fact_bank_statement"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.dim_account", "model.providence.fact_bank_statement"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/relationships_fact_bank_statem_cf34187b2ed97e6b2565313148012568.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select account_id as from_field\n    from \"mrzzy\".\"public\".\"fact_bank_statement\"\n    where account_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"mrzzy\".\"public\".\"dim_account\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "account_id", "file_key_name": "models.fact_bank_statement"}, "test.providence.not_null_fact_bank_statement_balance.7aedfd2ee7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "balance", "model": "{{ get_where_subquery(ref('fact_bank_statement')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_fact_bank_statement_balance", "resource_type": "test", "package_name": "providence", "path": "not_null_fact_bank_statement_balance.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_fact_bank_statement_balance.7aedfd2ee7", "fqn": ["providence", "intermediate", "dim_model", "not_null_fact_bank_statement_balance"], "alias": "not_null_fact_bank_statement_balance", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.3333955, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_bank_statement"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.fact_bank_statement"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_fact_bank_statement_balance.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect balance\nfrom \"mrzzy\".\"public\".\"fact_bank_statement\"\nwhere balance is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "balance", "file_key_name": "models.fact_bank_statement"}, "test.providence.not_null_fact_bank_statement_updated_at.a742b62ac0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('fact_bank_statement')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_fact_bank_statement_updated_at", "resource_type": "test", "package_name": "providence", "path": "not_null_fact_bank_statement_updated_at.sql", "original_file_path": "models/intermediate/dim_model/models.yml", "unique_id": "test.providence.not_null_fact_bank_statement_updated_at.a742b62ac0", "fqn": ["providence", "intermediate", "dim_model", "not_null_fact_bank_statement_updated_at"], "alias": "not_null_fact_bank_statement_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.3354797, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fact_bank_statement"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.fact_bank_statement"]}, "compiled_path": "target/compiled/providence/models/intermediate/dim_model/models.yml/not_null_fact_bank_statement_updated_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect updated_at\nfrom \"mrzzy\".\"public\".\"fact_bank_statement\"\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "updated_at", "file_key_name": "models.fact_bank_statement"}, "test.providence.not_null_stg_uob_statement_transacted_on.a78d4cf63d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "transacted_on", "model": "{{ get_where_subquery(ref('stg_uob_statement')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_uob_statement_transacted_on", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_uob_statement_transacted_on.sql", "original_file_path": "models/staging/spectrum/uob/models.yml", "unique_id": "test.providence.not_null_stg_uob_statement_transacted_on.a78d4cf63d", "fqn": ["providence", "staging", "spectrum", "uob", "not_null_stg_uob_statement_transacted_on"], "alias": "not_null_stg_uob_statement_transacted_on", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.344229, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_uob_statement"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_uob_statement"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/uob/models.yml/not_null_stg_uob_statement_transacted_on.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transacted_on\nfrom \"mrzzy\".\"public\".\"stg_uob_statement\"\nwhere transacted_on is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "transacted_on", "file_key_name": "models.stg_uob_statement"}, "test.providence.not_null_stg_uob_statement_description.f3790cced4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "description", "model": "{{ get_where_subquery(ref('stg_uob_statement')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_uob_statement_description", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_uob_statement_description.sql", "original_file_path": "models/staging/spectrum/uob/models.yml", "unique_id": "test.providence.not_null_stg_uob_statement_description.f3790cced4", "fqn": ["providence", "staging", "spectrum", "uob", "not_null_stg_uob_statement_description"], "alias": "not_null_stg_uob_statement_description", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.3465657, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_uob_statement"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_uob_statement"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/uob/models.yml/not_null_stg_uob_statement_description.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect description\nfrom \"mrzzy\".\"public\".\"stg_uob_statement\"\nwhere description is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "description", "file_key_name": "models.stg_uob_statement"}, "test.providence.not_null_stg_uob_statement_account_no.9685b8d186": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_no", "model": "{{ get_where_subquery(ref('stg_uob_statement')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_uob_statement_account_no", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_uob_statement_account_no.sql", "original_file_path": "models/staging/spectrum/uob/models.yml", "unique_id": "test.providence.not_null_stg_uob_statement_account_no.9685b8d186", "fqn": ["providence", "staging", "spectrum", "uob", "not_null_stg_uob_statement_account_no"], "alias": "not_null_stg_uob_statement_account_no", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.3486438, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_uob_statement"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_uob_statement"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/uob/models.yml/not_null_stg_uob_statement_account_no.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_no\nfrom \"mrzzy\".\"public\".\"stg_uob_statement\"\nwhere account_no is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "account_no", "file_key_name": "models.stg_uob_statement"}, "test.providence.not_null_stg_uob_statement_name.f5d0e412c5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('stg_uob_statement')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_uob_statement_name", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_uob_statement_name.sql", "original_file_path": "models/staging/spectrum/uob/models.yml", "unique_id": "test.providence.not_null_stg_uob_statement_name.f5d0e412c5", "fqn": ["providence", "staging", "spectrum", "uob", "not_null_stg_uob_statement_name"], "alias": "not_null_stg_uob_statement_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.3507493, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_uob_statement"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_uob_statement"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/uob/models.yml/not_null_stg_uob_statement_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"mrzzy\".\"public\".\"stg_uob_statement\"\nwhere name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "name", "file_key_name": "models.stg_uob_statement"}, "test.providence.not_null_stg_uob_statement_deposit.2b4b0881bc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "deposit", "model": "{{ get_where_subquery(ref('stg_uob_statement')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_uob_statement_deposit", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_uob_statement_deposit.sql", "original_file_path": "models/staging/spectrum/uob/models.yml", "unique_id": "test.providence.not_null_stg_uob_statement_deposit.2b4b0881bc", "fqn": ["providence", "staging", "spectrum", "uob", "not_null_stg_uob_statement_deposit"], "alias": "not_null_stg_uob_statement_deposit", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.3528874, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_uob_statement"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_uob_statement"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/uob/models.yml/not_null_stg_uob_statement_deposit.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect deposit\nfrom \"mrzzy\".\"public\".\"stg_uob_statement\"\nwhere deposit is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "deposit", "file_key_name": "models.stg_uob_statement"}, "test.providence.dbt_utils_accepted_range_stg_uob_statement_deposit__0_0.170b30f425": {"test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0.0, "column_name": "deposit", "model": "{{ get_where_subquery(ref('stg_uob_statement')) }}"}, "namespace": "dbt_utils"}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "dbt_utils_accepted_range_stg_uob_statement_deposit__0_0", "resource_type": "test", "package_name": "providence", "path": "dbt_utils_accepted_range_stg_uob_statement_deposit__0_0.sql", "original_file_path": "models/staging/spectrum/uob/models.yml", "unique_id": "test.providence.dbt_utils_accepted_range_stg_uob_statement_deposit__0_0.170b30f425", "fqn": ["providence", "staging", "spectrum", "uob", "dbt_utils_accepted_range_stg_uob_statement_deposit__0_0"], "alias": "dbt_utils_accepted_range_stg_uob_statement_deposit__0_0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.355323, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_uob_statement"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_uob_statement"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/uob/models.yml/dbt_utils_accepted_range_stg_uob_statement_deposit__0_0.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"mrzzy\".\"public\".\"stg_uob_statement\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not deposit >= 0.0\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "deposit", "file_key_name": "models.stg_uob_statement"}, "test.providence.not_null_stg_uob_statement_withdrawal.c8f860e586": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "withdrawal", "model": "{{ get_where_subquery(ref('stg_uob_statement')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_uob_statement_withdrawal", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_uob_statement_withdrawal.sql", "original_file_path": "models/staging/spectrum/uob/models.yml", "unique_id": "test.providence.not_null_stg_uob_statement_withdrawal.c8f860e586", "fqn": ["providence", "staging", "spectrum", "uob", "not_null_stg_uob_statement_withdrawal"], "alias": "not_null_stg_uob_statement_withdrawal", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.3599505, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_uob_statement"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_uob_statement"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/uob/models.yml/not_null_stg_uob_statement_withdrawal.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect withdrawal\nfrom \"mrzzy\".\"public\".\"stg_uob_statement\"\nwhere withdrawal is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "withdrawal", "file_key_name": "models.stg_uob_statement"}, "test.providence.dbt_utils_accepted_range_stg_uob_statement_withdrawal__0_0.f91fe316bd": {"test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0.0, "column_name": "withdrawal", "model": "{{ get_where_subquery(ref('stg_uob_statement')) }}"}, "namespace": "dbt_utils"}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "dbt_utils_accepted_range_stg_uob_statement_withdrawal__0_0", "resource_type": "test", "package_name": "providence", "path": "dbt_utils_accepted_range_stg_uob_statement_withdrawal__0_0.sql", "original_file_path": "models/staging/spectrum/uob/models.yml", "unique_id": "test.providence.dbt_utils_accepted_range_stg_uob_statement_withdrawal__0_0.f91fe316bd", "fqn": ["providence", "staging", "spectrum", "uob", "dbt_utils_accepted_range_stg_uob_statement_withdrawal__0_0"], "alias": "dbt_utils_accepted_range_stg_uob_statement_withdrawal__0_0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.362363, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_uob_statement"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_uob_statement"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/uob/models.yml/dbt_utils_accepted_range_stg_uob_statement_withdrawal__0_0.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"mrzzy\".\"public\".\"stg_uob_statement\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not withdrawal >= 0.0\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "withdrawal", "file_key_name": "models.stg_uob_statement"}, "test.providence.not_null_stg_uob_statement_balance.82c010a26e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "balance", "model": "{{ get_where_subquery(ref('stg_uob_statement')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_uob_statement_balance", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_uob_statement_balance.sql", "original_file_path": "models/staging/spectrum/uob/models.yml", "unique_id": "test.providence.not_null_stg_uob_statement_balance.82c010a26e", "fqn": ["providence", "staging", "spectrum", "uob", "not_null_stg_uob_statement_balance"], "alias": "not_null_stg_uob_statement_balance", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.3669317, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_uob_statement"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_uob_statement"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/uob/models.yml/not_null_stg_uob_statement_balance.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect balance\nfrom \"mrzzy\".\"public\".\"stg_uob_statement\"\nwhere balance is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "balance", "file_key_name": "models.stg_uob_statement"}, "test.providence.not_null_stg_uob_statement_currency_code.c08da85da5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "currency_code", "model": "{{ get_where_subquery(ref('stg_uob_statement')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_uob_statement_currency_code", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_uob_statement_currency_code.sql", "original_file_path": "models/staging/spectrum/uob/models.yml", "unique_id": "test.providence.not_null_stg_uob_statement_currency_code.c08da85da5", "fqn": ["providence", "staging", "spectrum", "uob", "not_null_stg_uob_statement_currency_code"], "alias": "not_null_stg_uob_statement_currency_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.3693, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_uob_statement"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_uob_statement"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/uob/models.yml/not_null_stg_uob_statement_currency_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect currency_code\nfrom \"mrzzy\".\"public\".\"stg_uob_statement\"\nwhere currency_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "currency_code", "file_key_name": "models.stg_uob_statement"}, "test.providence.not_null_stg_uob_statement_statement_begin.81f0d2c02d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "statement_begin", "model": "{{ get_where_subquery(ref('stg_uob_statement')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_uob_statement_statement_begin", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_uob_statement_statement_begin.sql", "original_file_path": "models/staging/spectrum/uob/models.yml", "unique_id": "test.providence.not_null_stg_uob_statement_statement_begin.81f0d2c02d", "fqn": ["providence", "staging", "spectrum", "uob", "not_null_stg_uob_statement_statement_begin"], "alias": "not_null_stg_uob_statement_statement_begin", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.3714435, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_uob_statement"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_uob_statement"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/uob/models.yml/not_null_stg_uob_statement_statement_begin.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect statement_begin\nfrom \"mrzzy\".\"public\".\"stg_uob_statement\"\nwhere statement_begin is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "statement_begin", "file_key_name": "models.stg_uob_statement"}, "test.providence.not_null_stg_uob_statement_statement_end.e47cd50840": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "statement_end", "model": "{{ get_where_subquery(ref('stg_uob_statement')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_uob_statement_statement_end", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_uob_statement_statement_end.sql", "original_file_path": "models/staging/spectrum/uob/models.yml", "unique_id": "test.providence.not_null_stg_uob_statement_statement_end.e47cd50840", "fqn": ["providence", "staging", "spectrum", "uob", "not_null_stg_uob_statement_statement_end"], "alias": "not_null_stg_uob_statement_statement_end", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.3735268, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_uob_statement"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_uob_statement"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/uob/models.yml/not_null_stg_uob_statement_statement_end.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect statement_end\nfrom \"mrzzy\".\"public\".\"stg_uob_statement\"\nwhere statement_end is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "statement_end", "file_key_name": "models.stg_uob_statement"}, "test.providence.not_null_stg_uob_statement_processed_on.3e0942bd9a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "processed_on", "model": "{{ get_where_subquery(ref('stg_uob_statement')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_uob_statement_processed_on", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_uob_statement_processed_on.sql", "original_file_path": "models/staging/spectrum/uob/models.yml", "unique_id": "test.providence.not_null_stg_uob_statement_processed_on.3e0942bd9a", "fqn": ["providence", "staging", "spectrum", "uob", "not_null_stg_uob_statement_processed_on"], "alias": "not_null_stg_uob_statement_processed_on", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.3756151, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_uob_statement"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_uob_statement"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/uob/models.yml/not_null_stg_uob_statement_processed_on.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect processed_on\nfrom \"mrzzy\".\"public\".\"stg_uob_statement\"\nwhere processed_on is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "processed_on", "file_key_name": "models.stg_uob_statement"}, "test.providence.dbt_utils_expression_is_true_stg_uob_statement_statement_begin_statement_end.50f9a436ec": {"test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "statement_begin <= statement_end", "model": "{{ get_where_subquery(ref('stg_uob_statement')) }}"}, "namespace": "dbt_utils"}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_uob_statement_statement_begin_statement_end", "resource_type": "test", "package_name": "providence", "path": "dbt_utils_expression_is_true_s_3550efd31c035ea79413d4208d5edb64.sql", "original_file_path": "models/staging/spectrum/uob/models.yml", "unique_id": "test.providence.dbt_utils_expression_is_true_stg_uob_statement_statement_begin_statement_end.50f9a436ec", "fqn": ["providence", "staging", "spectrum", "uob", "dbt_utils_expression_is_true_stg_uob_statement_statement_begin_statement_end"], "alias": "dbt_utils_expression_is_true_s_3550efd31c035ea79413d4208d5edb64", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_3550efd31c035ea79413d4208d5edb64", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_expression_is_true_s_3550efd31c035ea79413d4208d5edb64"}, "created_at": 1684070076.3780632, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_s_3550efd31c035ea79413d4208d5edb64\") }}", "language": "sql", "refs": [["stg_uob_statement"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_uob_statement"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/uob/models.yml/dbt_utils_expression_is_true_s_3550efd31c035ea79413d4208d5edb64.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"mrzzy\".\"public\".\"stg_uob_statement\"\n\nwhere not(statement_begin <= statement_end)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.stg_uob_statement"}, "test.providence.dbt_utils_expression_is_true_stg_uob_statement_statement_end_processed_on.3e8211e730": {"test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "statement_end <= processed_on", "model": "{{ get_where_subquery(ref('stg_uob_statement')) }}"}, "namespace": "dbt_utils"}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_uob_statement_statement_end_processed_on", "resource_type": "test", "package_name": "providence", "path": "dbt_utils_expression_is_true_s_03b08d7de1017d511f2584a345e2bea4.sql", "original_file_path": "models/staging/spectrum/uob/models.yml", "unique_id": "test.providence.dbt_utils_expression_is_true_stg_uob_statement_statement_end_processed_on.3e8211e730", "fqn": ["providence", "staging", "spectrum", "uob", "dbt_utils_expression_is_true_stg_uob_statement_statement_end_processed_on"], "alias": "dbt_utils_expression_is_true_s_03b08d7de1017d511f2584a345e2bea4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_03b08d7de1017d511f2584a345e2bea4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_expression_is_true_s_03b08d7de1017d511f2584a345e2bea4"}, "created_at": 1684070076.3834755, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_s_03b08d7de1017d511f2584a345e2bea4\") }}", "language": "sql", "refs": [["stg_uob_statement"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_uob_statement"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/uob/models.yml/dbt_utils_expression_is_true_s_03b08d7de1017d511f2584a345e2bea4.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"mrzzy\".\"public\".\"stg_uob_statement\"\n\nwhere not(statement_end <= processed_on)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.stg_uob_statement"}, "test.providence.not_null_stg_simplygo_card_id.86b8c84d20": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_simplygo_card')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_simplygo_card_id", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_simplygo_card_id.sql", "original_file_path": "models/staging/spectrum/simplygo/models.yml", "unique_id": "test.providence.not_null_stg_simplygo_card_id.86b8c84d20", "fqn": ["providence", "staging", "spectrum", "simplygo", "not_null_stg_simplygo_card_id"], "alias": "not_null_stg_simplygo_card_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.4121559, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_simplygo_card"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_simplygo_card"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/simplygo/models.yml/not_null_stg_simplygo_card_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"mrzzy\".\"public\".\"stg_simplygo_card\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "id", "file_key_name": "models.stg_simplygo_card"}, "test.providence.not_null_stg_simplygo_card_name.e0e9dd015c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('stg_simplygo_card')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_simplygo_card_name", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_simplygo_card_name.sql", "original_file_path": "models/staging/spectrum/simplygo/models.yml", "unique_id": "test.providence.not_null_stg_simplygo_card_name.e0e9dd015c", "fqn": ["providence", "staging", "spectrum", "simplygo", "not_null_stg_simplygo_card_name"], "alias": "not_null_stg_simplygo_card_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.414951, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_simplygo_card"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_simplygo_card"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/simplygo/models.yml/not_null_stg_simplygo_card_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"mrzzy\".\"public\".\"stg_simplygo_card\"\nwhere name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "name", "file_key_name": "models.stg_simplygo_card"}, "test.providence.not_null_stg_simplygo_card_scraped_on.f93674f0a8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "scraped_on", "model": "{{ get_where_subquery(ref('stg_simplygo_card')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_simplygo_card_scraped_on", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_simplygo_card_scraped_on.sql", "original_file_path": "models/staging/spectrum/simplygo/models.yml", "unique_id": "test.providence.not_null_stg_simplygo_card_scraped_on.f93674f0a8", "fqn": ["providence", "staging", "spectrum", "simplygo", "not_null_stg_simplygo_card_scraped_on"], "alias": "not_null_stg_simplygo_card_scraped_on", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.4170969, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_simplygo_card"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_simplygo_card"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/simplygo/models.yml/not_null_stg_simplygo_card_scraped_on.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect scraped_on\nfrom \"mrzzy\".\"public\".\"stg_simplygo_card\"\nwhere scraped_on is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "scraped_on", "file_key_name": "models.stg_simplygo_card"}, "test.providence.not_null_stg_simplygo_trip_leg_traveled_on.87229fc8d2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "traveled_on", "model": "{{ get_where_subquery(ref('stg_simplygo_trip_leg')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_simplygo_trip_leg_traveled_on", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_simplygo_trip_leg_traveled_on.sql", "original_file_path": "models/staging/spectrum/simplygo/models.yml", "unique_id": "test.providence.not_null_stg_simplygo_trip_leg_traveled_on.87229fc8d2", "fqn": ["providence", "staging", "spectrum", "simplygo", "not_null_stg_simplygo_trip_leg_traveled_on"], "alias": "not_null_stg_simplygo_trip_leg_traveled_on", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.4192536, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_simplygo_trip_leg"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_simplygo_trip_leg"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/simplygo/models.yml/not_null_stg_simplygo_trip_leg_traveled_on.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect traveled_on\nfrom \"mrzzy\".\"public\".\"stg_simplygo_trip_leg\"\nwhere traveled_on is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "traveled_on", "file_key_name": "models.stg_simplygo_trip_leg"}, "test.providence.not_null_stg_simplygo_trip_leg_begin_at.291c82b7fb": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "begin_at", "model": "{{ get_where_subquery(ref('stg_simplygo_trip_leg')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_simplygo_trip_leg_begin_at", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_simplygo_trip_leg_begin_at.sql", "original_file_path": "models/staging/spectrum/simplygo/models.yml", "unique_id": "test.providence.not_null_stg_simplygo_trip_leg_begin_at.291c82b7fb", "fqn": ["providence", "staging", "spectrum", "simplygo", "not_null_stg_simplygo_trip_leg_begin_at"], "alias": "not_null_stg_simplygo_trip_leg_begin_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.4216652, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_simplygo_trip_leg"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_simplygo_trip_leg"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/simplygo/models.yml/not_null_stg_simplygo_trip_leg_begin_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect begin_at\nfrom \"mrzzy\".\"public\".\"stg_simplygo_trip_leg\"\nwhere begin_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "begin_at", "file_key_name": "models.stg_simplygo_trip_leg"}, "test.providence.not_null_stg_simplygo_trip_leg_cost_sgd.0aecf580a3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "cost_sgd", "model": "{{ get_where_subquery(ref('stg_simplygo_trip_leg')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_simplygo_trip_leg_cost_sgd", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_simplygo_trip_leg_cost_sgd.sql", "original_file_path": "models/staging/spectrum/simplygo/models.yml", "unique_id": "test.providence.not_null_stg_simplygo_trip_leg_cost_sgd.0aecf580a3", "fqn": ["providence", "staging", "spectrum", "simplygo", "not_null_stg_simplygo_trip_leg_cost_sgd"], "alias": "not_null_stg_simplygo_trip_leg_cost_sgd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.4238229, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_simplygo_trip_leg"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_simplygo_trip_leg"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/simplygo/models.yml/not_null_stg_simplygo_trip_leg_cost_sgd.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cost_sgd\nfrom \"mrzzy\".\"public\".\"stg_simplygo_trip_leg\"\nwhere cost_sgd is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "cost_sgd", "file_key_name": "models.stg_simplygo_trip_leg"}, "test.providence.dbt_utils_accepted_range_stg_simplygo_trip_leg_cost_sgd__0.c74a0dfd16": {"test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "column_name": "cost_sgd", "model": "{{ get_where_subquery(ref('stg_simplygo_trip_leg')) }}"}, "namespace": "dbt_utils"}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "dbt_utils_accepted_range_stg_simplygo_trip_leg_cost_sgd__0", "resource_type": "test", "package_name": "providence", "path": "dbt_utils_accepted_range_stg_simplygo_trip_leg_cost_sgd__0.sql", "original_file_path": "models/staging/spectrum/simplygo/models.yml", "unique_id": "test.providence.dbt_utils_accepted_range_stg_simplygo_trip_leg_cost_sgd__0.c74a0dfd16", "fqn": ["providence", "staging", "spectrum", "simplygo", "dbt_utils_accepted_range_stg_simplygo_trip_leg_cost_sgd__0"], "alias": "dbt_utils_accepted_range_stg_simplygo_trip_leg_cost_sgd__0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.4259434, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_simplygo_trip_leg"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_simplygo_trip_leg"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/simplygo/models.yml/dbt_utils_accepted_range_stg_simplygo_trip_leg_cost_sgd__0.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"mrzzy\".\"public\".\"stg_simplygo_trip_leg\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not cost_sgd >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "cost_sgd", "file_key_name": "models.stg_simplygo_trip_leg"}, "test.providence.not_null_stg_simplygo_trip_leg_source.0e49a4cb22": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "source", "model": "{{ get_where_subquery(ref('stg_simplygo_trip_leg')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_simplygo_trip_leg_source", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_simplygo_trip_leg_source.sql", "original_file_path": "models/staging/spectrum/simplygo/models.yml", "unique_id": "test.providence.not_null_stg_simplygo_trip_leg_source.0e49a4cb22", "fqn": ["providence", "staging", "spectrum", "simplygo", "not_null_stg_simplygo_trip_leg_source"], "alias": "not_null_stg_simplygo_trip_leg_source", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.431002, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_simplygo_trip_leg"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_simplygo_trip_leg"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/simplygo/models.yml/not_null_stg_simplygo_trip_leg_source.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect source\nfrom \"mrzzy\".\"public\".\"stg_simplygo_trip_leg\"\nwhere source is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "source", "file_key_name": "models.stg_simplygo_trip_leg"}, "test.providence.not_null_stg_simplygo_trip_leg_destination.9c3cffae03": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "destination", "model": "{{ get_where_subquery(ref('stg_simplygo_trip_leg')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_simplygo_trip_leg_destination", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_simplygo_trip_leg_destination.sql", "original_file_path": "models/staging/spectrum/simplygo/models.yml", "unique_id": "test.providence.not_null_stg_simplygo_trip_leg_destination.9c3cffae03", "fqn": ["providence", "staging", "spectrum", "simplygo", "not_null_stg_simplygo_trip_leg_destination"], "alias": "not_null_stg_simplygo_trip_leg_destination", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.4331138, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_simplygo_trip_leg"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_simplygo_trip_leg"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/simplygo/models.yml/not_null_stg_simplygo_trip_leg_destination.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect destination\nfrom \"mrzzy\".\"public\".\"stg_simplygo_trip_leg\"\nwhere destination is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "destination", "file_key_name": "models.stg_simplygo_trip_leg"}, "test.providence.not_null_stg_simplygo_trip_leg_transport_mode.e8cf1b7757": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "transport_mode", "model": "{{ get_where_subquery(ref('stg_simplygo_trip_leg')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_simplygo_trip_leg_transport_mode", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_simplygo_trip_leg_transport_mode.sql", "original_file_path": "models/staging/spectrum/simplygo/models.yml", "unique_id": "test.providence.not_null_stg_simplygo_trip_leg_transport_mode.e8cf1b7757", "fqn": ["providence", "staging", "spectrum", "simplygo", "not_null_stg_simplygo_trip_leg_transport_mode"], "alias": "not_null_stg_simplygo_trip_leg_transport_mode", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.4352143, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_simplygo_trip_leg"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_simplygo_trip_leg"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/simplygo/models.yml/not_null_stg_simplygo_trip_leg_transport_mode.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transport_mode\nfrom \"mrzzy\".\"public\".\"stg_simplygo_trip_leg\"\nwhere transport_mode is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "transport_mode", "file_key_name": "models.stg_simplygo_trip_leg"}, "test.providence.accepted_values_stg_simplygo_trip_leg_transport_mode__Rail__Bus.8e309c76c6": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Rail", "Bus"], "column_name": "transport_mode", "model": "{{ get_where_subquery(ref('stg_simplygo_trip_leg')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "accepted_values_stg_simplygo_trip_leg_transport_mode__Rail__Bus", "resource_type": "test", "package_name": "providence", "path": "accepted_values_stg_simplygo_trip_leg_transport_mode__Rail__Bus.sql", "original_file_path": "models/staging/spectrum/simplygo/models.yml", "unique_id": "test.providence.accepted_values_stg_simplygo_trip_leg_transport_mode__Rail__Bus.8e309c76c6", "fqn": ["providence", "staging", "spectrum", "simplygo", "accepted_values_stg_simplygo_trip_leg_transport_mode__Rail__Bus"], "alias": "accepted_values_stg_simplygo_trip_leg_transport_mode__Rail__Bus", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.437631, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_simplygo_trip_leg"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_simplygo_trip_leg"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/simplygo/models.yml/accepted_values_stg_simplygo_trip_leg_transport_mode__Rail__Bus.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        transport_mode as value_field,\n        count(*) as n_records\n\n    from \"mrzzy\".\"public\".\"stg_simplygo_trip_leg\"\n    group by transport_mode\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Rail','Bus'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "transport_mode", "file_key_name": "models.stg_simplygo_trip_leg"}, "test.providence.not_null_stg_simplygo_trip_leg_card_id.e07401f8e4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "card_id", "model": "{{ get_where_subquery(ref('stg_simplygo_trip_leg')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_simplygo_trip_leg_card_id", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_simplygo_trip_leg_card_id.sql", "original_file_path": "models/staging/spectrum/simplygo/models.yml", "unique_id": "test.providence.not_null_stg_simplygo_trip_leg_card_id.e07401f8e4", "fqn": ["providence", "staging", "spectrum", "simplygo", "not_null_stg_simplygo_trip_leg_card_id"], "alias": "not_null_stg_simplygo_trip_leg_card_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.4431083, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_simplygo_trip_leg"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_simplygo_trip_leg"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/simplygo/models.yml/not_null_stg_simplygo_trip_leg_card_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect card_id\nfrom \"mrzzy\".\"public\".\"stg_simplygo_trip_leg\"\nwhere card_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "card_id", "file_key_name": "models.stg_simplygo_trip_leg"}, "test.providence.relationships_stg_simplygo_trip_leg_card_id__id__ref_stg_simplygo_card_.b8ba3fa366": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref(\"stg_simplygo_card\")", "field": "id", "column_name": "card_id", "model": "{{ get_where_subquery(ref('stg_simplygo_trip_leg')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "relationships_stg_simplygo_trip_leg_card_id__id__ref_stg_simplygo_card_", "resource_type": "test", "package_name": "providence", "path": "relationships_stg_simplygo_tri_8f48a68c856c3d9476306cdd0215b615.sql", "original_file_path": "models/staging/spectrum/simplygo/models.yml", "unique_id": "test.providence.relationships_stg_simplygo_trip_leg_card_id__id__ref_stg_simplygo_card_.b8ba3fa366", "fqn": ["providence", "staging", "spectrum", "simplygo", "relationships_stg_simplygo_trip_leg_card_id__id__ref_stg_simplygo_card_"], "alias": "relationships_stg_simplygo_tri_8f48a68c856c3d9476306cdd0215b615", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_simplygo_tri_8f48a68c856c3d9476306cdd0215b615", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_stg_simplygo_tri_8f48a68c856c3d9476306cdd0215b615"}, "created_at": 1684070076.4455373, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_simplygo_tri_8f48a68c856c3d9476306cdd0215b615\") }}", "language": "sql", "refs": [["stg_simplygo_card"], ["stg_simplygo_trip_leg"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_simplygo_card", "model.providence.stg_simplygo_trip_leg"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/simplygo/models.yml/relationships_stg_simplygo_tri_8f48a68c856c3d9476306cdd0215b615.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select card_id as from_field\n    from \"mrzzy\".\"public\".\"stg_simplygo_trip_leg\"\n    where card_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"mrzzy\".\"public\".\"stg_simplygo_card\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "card_id", "file_key_name": "models.stg_simplygo_trip_leg"}, "test.providence.not_null_stg_simplygo_trip_leg_scraped_on.876fe1a10c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "scraped_on", "model": "{{ get_where_subquery(ref('stg_simplygo_trip_leg')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_simplygo_trip_leg_scraped_on", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_simplygo_trip_leg_scraped_on.sql", "original_file_path": "models/staging/spectrum/simplygo/models.yml", "unique_id": "test.providence.not_null_stg_simplygo_trip_leg_scraped_on.876fe1a10c", "fqn": ["providence", "staging", "spectrum", "simplygo", "not_null_stg_simplygo_trip_leg_scraped_on"], "alias": "not_null_stg_simplygo_trip_leg_scraped_on", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.4515543, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_simplygo_trip_leg"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_simplygo_trip_leg"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/simplygo/models.yml/not_null_stg_simplygo_trip_leg_scraped_on.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect scraped_on\nfrom \"mrzzy\".\"public\".\"stg_simplygo_trip_leg\"\nwhere scraped_on is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "scraped_on", "file_key_name": "models.stg_simplygo_trip_leg"}, "test.providence.not_null_stg_ynab_budget_id.19ad775a50": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_ynab_budget')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_ynab_budget_id", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_ynab_budget_id.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.not_null_stg_ynab_budget_id.19ad775a50", "fqn": ["providence", "staging", "spectrum", "ynab", "not_null_stg_ynab_budget_id"], "alias": "not_null_stg_ynab_budget_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.4922702, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_ynab_budget"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_budget"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/not_null_stg_ynab_budget_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"mrzzy\".\"public\".\"stg_ynab_budget\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "id", "file_key_name": "models.stg_ynab_budget"}, "test.providence.not_null_stg_ynab_budget_name.b0cf7f0e50": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('stg_ynab_budget')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_ynab_budget_name", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_ynab_budget_name.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.not_null_stg_ynab_budget_name.b0cf7f0e50", "fqn": ["providence", "staging", "spectrum", "ynab", "not_null_stg_ynab_budget_name"], "alias": "not_null_stg_ynab_budget_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.4947083, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_ynab_budget"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_budget"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/not_null_stg_ynab_budget_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"mrzzy\".\"public\".\"stg_ynab_budget\"\nwhere name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "name", "file_key_name": "models.stg_ynab_budget"}, "test.providence.not_null_stg_ynab_budget_modified_at.93673c612a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "modified_at", "model": "{{ get_where_subquery(ref('stg_ynab_budget')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_ynab_budget_modified_at", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_ynab_budget_modified_at.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.not_null_stg_ynab_budget_modified_at.93673c612a", "fqn": ["providence", "staging", "spectrum", "ynab", "not_null_stg_ynab_budget_modified_at"], "alias": "not_null_stg_ynab_budget_modified_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.4968672, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_ynab_budget"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_budget"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/not_null_stg_ynab_budget_modified_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect modified_at\nfrom \"mrzzy\".\"public\".\"stg_ynab_budget\"\nwhere modified_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "modified_at", "file_key_name": "models.stg_ynab_budget"}, "test.providence.not_null_stg_ynab_budget_currency_code.5274f2c06f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "currency_code", "model": "{{ get_where_subquery(ref('stg_ynab_budget')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_ynab_budget_currency_code", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_ynab_budget_currency_code.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.not_null_stg_ynab_budget_currency_code.5274f2c06f", "fqn": ["providence", "staging", "spectrum", "ynab", "not_null_stg_ynab_budget_currency_code"], "alias": "not_null_stg_ynab_budget_currency_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.499004, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_ynab_budget"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_budget"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/not_null_stg_ynab_budget_currency_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect currency_code\nfrom \"mrzzy\".\"public\".\"stg_ynab_budget\"\nwhere currency_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "currency_code", "file_key_name": "models.stg_ynab_budget"}, "test.providence.not_null_stg_ynab_budget_currency_symbol.ad3b25fbf9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "currency_symbol", "model": "{{ get_where_subquery(ref('stg_ynab_budget')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_ynab_budget_currency_symbol", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_ynab_budget_currency_symbol.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.not_null_stg_ynab_budget_currency_symbol.ad3b25fbf9", "fqn": ["providence", "staging", "spectrum", "ynab", "not_null_stg_ynab_budget_currency_symbol"], "alias": "not_null_stg_ynab_budget_currency_symbol", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.5011218, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_ynab_budget"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_budget"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/not_null_stg_ynab_budget_currency_symbol.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect currency_symbol\nfrom \"mrzzy\".\"public\".\"stg_ynab_budget\"\nwhere currency_symbol is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "currency_symbol", "file_key_name": "models.stg_ynab_budget"}, "test.providence.not_null_stg_ynab_budget_scraped_on.8cd2839ae1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "scraped_on", "model": "{{ get_where_subquery(ref('stg_ynab_budget')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_ynab_budget_scraped_on", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_ynab_budget_scraped_on.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.not_null_stg_ynab_budget_scraped_on.8cd2839ae1", "fqn": ["providence", "staging", "spectrum", "ynab", "not_null_stg_ynab_budget_scraped_on"], "alias": "not_null_stg_ynab_budget_scraped_on", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.5035303, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_ynab_budget"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_budget"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/not_null_stg_ynab_budget_scraped_on.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect scraped_on\nfrom \"mrzzy\".\"public\".\"stg_ynab_budget\"\nwhere scraped_on is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "scraped_on", "file_key_name": "models.stg_ynab_budget"}, "test.providence.not_null_stg_ynab_budget_category_id.2295c7fd05": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_ynab_budget_category')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_ynab_budget_category_id", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_ynab_budget_category_id.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.not_null_stg_ynab_budget_category_id.2295c7fd05", "fqn": ["providence", "staging", "spectrum", "ynab", "not_null_stg_ynab_budget_category_id"], "alias": "not_null_stg_ynab_budget_category_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.50563, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_ynab_budget_category"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_budget_category"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/not_null_stg_ynab_budget_category_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"mrzzy\".\"public\".\"stg_ynab_budget_category\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "id", "file_key_name": "models.stg_ynab_budget_category"}, "test.providence.not_null_stg_ynab_budget_category_name.5bb259202d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('stg_ynab_budget_category')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_ynab_budget_category_name", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_ynab_budget_category_name.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.not_null_stg_ynab_budget_category_name.5bb259202d", "fqn": ["providence", "staging", "spectrum", "ynab", "not_null_stg_ynab_budget_category_name"], "alias": "not_null_stg_ynab_budget_category_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.507732, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_ynab_budget_category"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_budget_category"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/not_null_stg_ynab_budget_category_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"mrzzy\".\"public\".\"stg_ynab_budget_category\"\nwhere name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "name", "file_key_name": "models.stg_ynab_budget_category"}, "test.providence.not_null_stg_ynab_budget_category_budget_id.890de93caf": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "budget_id", "model": "{{ get_where_subquery(ref('stg_ynab_budget_category')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_ynab_budget_category_budget_id", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_ynab_budget_category_budget_id.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.not_null_stg_ynab_budget_category_budget_id.890de93caf", "fqn": ["providence", "staging", "spectrum", "ynab", "not_null_stg_ynab_budget_category_budget_id"], "alias": "not_null_stg_ynab_budget_category_budget_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.5098083, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_ynab_budget_category"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_budget_category"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/not_null_stg_ynab_budget_category_budget_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect budget_id\nfrom \"mrzzy\".\"public\".\"stg_ynab_budget_category\"\nwhere budget_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "budget_id", "file_key_name": "models.stg_ynab_budget_category"}, "test.providence.not_null_stg_ynab_budget_category_category_group_id.3c4a91eef7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "category_group_id", "model": "{{ get_where_subquery(ref('stg_ynab_budget_category')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_ynab_budget_category_category_group_id", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_ynab_budget_category_category_group_id.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.not_null_stg_ynab_budget_category_category_group_id.3c4a91eef7", "fqn": ["providence", "staging", "spectrum", "ynab", "not_null_stg_ynab_budget_category_category_group_id"], "alias": "not_null_stg_ynab_budget_category_category_group_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.5125468, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_ynab_budget_category"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_budget_category"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/not_null_stg_ynab_budget_category_category_group_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect category_group_id\nfrom \"mrzzy\".\"public\".\"stg_ynab_budget_category\"\nwhere category_group_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "category_group_id", "file_key_name": "models.stg_ynab_budget_category"}, "test.providence.not_null_stg_ynab_budget_category_budget_amount.12e66c985c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "budget_amount", "model": "{{ get_where_subquery(ref('stg_ynab_budget_category')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_ynab_budget_category_budget_amount", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_ynab_budget_category_budget_amount.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.not_null_stg_ynab_budget_category_budget_amount.12e66c985c", "fqn": ["providence", "staging", "spectrum", "ynab", "not_null_stg_ynab_budget_category_budget_amount"], "alias": "not_null_stg_ynab_budget_category_budget_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.5146544, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_ynab_budget_category"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_budget_category"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/not_null_stg_ynab_budget_category_budget_amount.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect budget_amount\nfrom \"mrzzy\".\"public\".\"stg_ynab_budget_category\"\nwhere budget_amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "budget_amount", "file_key_name": "models.stg_ynab_budget_category"}, "test.providence.not_null_stg_ynab_budget_category_budget_month.8aa7e53510": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "budget_month", "model": "{{ get_where_subquery(ref('stg_ynab_budget_category')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_ynab_budget_category_budget_month", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_ynab_budget_category_budget_month.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.not_null_stg_ynab_budget_category_budget_month.8aa7e53510", "fqn": ["providence", "staging", "spectrum", "ynab", "not_null_stg_ynab_budget_category_budget_month"], "alias": "not_null_stg_ynab_budget_category_budget_month", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.516761, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_ynab_budget_category"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_budget_category"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/not_null_stg_ynab_budget_category_budget_month.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect budget_month\nfrom \"mrzzy\".\"public\".\"stg_ynab_budget_category\"\nwhere budget_month is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "budget_month", "file_key_name": "models.stg_ynab_budget_category"}, "test.providence.accepted_values_stg_ynab_budget_category_goal_type__Target_Category_Balance__Target_Category_Balance_by_Date__Monthly_Funding__Plan_Your_Spending.6267ac3ad8": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Target Category Balance", "Target Category Balance by Date", "Monthly Funding", "Plan Your Spending"], "column_name": "goal_type", "model": "{{ get_where_subquery(ref('stg_ynab_budget_category')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "accepted_values_stg_ynab_budget_category_goal_type__Target_Category_Balance__Target_Category_Balance_by_Date__Monthly_Funding__Plan_Your_Spending", "resource_type": "test", "package_name": "providence", "path": "accepted_values_stg_ynab_budge_df0a84814f20491e7e564e3ba8970bc0.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.accepted_values_stg_ynab_budget_category_goal_type__Target_Category_Balance__Target_Category_Balance_by_Date__Monthly_Funding__Plan_Your_Spending.6267ac3ad8", "fqn": ["providence", "staging", "spectrum", "ynab", "accepted_values_stg_ynab_budget_category_goal_type__Target_Category_Balance__Target_Category_Balance_by_Date__Monthly_Funding__Plan_Your_Spending"], "alias": "accepted_values_stg_ynab_budge_df0a84814f20491e7e564e3ba8970bc0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_stg_ynab_budge_df0a84814f20491e7e564e3ba8970bc0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_stg_ynab_budge_df0a84814f20491e7e564e3ba8970bc0"}, "created_at": 1684070076.5189128, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_stg_ynab_budge_df0a84814f20491e7e564e3ba8970bc0\") }}", "language": "sql", "refs": [["stg_ynab_budget_category"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_budget_category"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/accepted_values_stg_ynab_budge_df0a84814f20491e7e564e3ba8970bc0.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        goal_type as value_field,\n        count(*) as n_records\n\n    from \"mrzzy\".\"public\".\"stg_ynab_budget_category\"\n    group by goal_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Target Category Balance','Target Category Balance by Date','Monthly Funding','Plan Your Spending'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "goal_type", "file_key_name": "models.stg_ynab_budget_category"}, "test.providence.not_null_stg_ynab_budget_category_is_deleted.acf5b15580": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_deleted", "model": "{{ get_where_subquery(ref('stg_ynab_budget_category')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_ynab_budget_category_is_deleted", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_ynab_budget_category_is_deleted.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.not_null_stg_ynab_budget_category_is_deleted.acf5b15580", "fqn": ["providence", "staging", "spectrum", "ynab", "not_null_stg_ynab_budget_category_is_deleted"], "alias": "not_null_stg_ynab_budget_category_is_deleted", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.5259364, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_ynab_budget_category"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_budget_category"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/not_null_stg_ynab_budget_category_is_deleted.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect is_deleted\nfrom \"mrzzy\".\"public\".\"stg_ynab_budget_category\"\nwhere is_deleted is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "is_deleted", "file_key_name": "models.stg_ynab_budget_category"}, "test.providence.not_null_stg_ynab_budget_category_scraped_on.dcd1fccefe": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "scraped_on", "model": "{{ get_where_subquery(ref('stg_ynab_budget_category')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_ynab_budget_category_scraped_on", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_ynab_budget_category_scraped_on.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.not_null_stg_ynab_budget_category_scraped_on.dcd1fccefe", "fqn": ["providence", "staging", "spectrum", "ynab", "not_null_stg_ynab_budget_category_scraped_on"], "alias": "not_null_stg_ynab_budget_category_scraped_on", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.5283356, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_ynab_budget_category"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_budget_category"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/not_null_stg_ynab_budget_category_scraped_on.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect scraped_on\nfrom \"mrzzy\".\"public\".\"stg_ynab_budget_category\"\nwhere scraped_on is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "scraped_on", "file_key_name": "models.stg_ynab_budget_category"}, "test.providence.dbt_utils_expression_is_true_stg_ynab_budget_category__goal_type_is_null_and_goal_amount_0_or_not_goal_type_is_null_and_goal_amount_0_.54da2491b8": {"test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "(goal_type is null and goal_amount = 0) or\nnot (goal_type is null and goal_amount = 0)\n", "model": "{{ get_where_subquery(ref('stg_ynab_budget_category')) }}"}, "namespace": "dbt_utils"}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_ynab_budget_category__goal_type_is_null_and_goal_amount_0_or_not_goal_type_is_null_and_goal_amount_0_", "resource_type": "test", "package_name": "providence", "path": "dbt_utils_expression_is_true_s_4e8db2c6bc528ea445201d5f036200da.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.dbt_utils_expression_is_true_stg_ynab_budget_category__goal_type_is_null_and_goal_amount_0_or_not_goal_type_is_null_and_goal_amount_0_.54da2491b8", "fqn": ["providence", "staging", "spectrum", "ynab", "dbt_utils_expression_is_true_stg_ynab_budget_category__goal_type_is_null_and_goal_amount_0_or_not_goal_type_is_null_and_goal_amount_0_"], "alias": "dbt_utils_expression_is_true_s_4e8db2c6bc528ea445201d5f036200da", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_4e8db2c6bc528ea445201d5f036200da", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_expression_is_true_s_4e8db2c6bc528ea445201d5f036200da"}, "created_at": 1684070076.5304565, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_s_4e8db2c6bc528ea445201d5f036200da\") }}", "language": "sql", "refs": [["stg_ynab_budget_category"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_budget_category"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/dbt_utils_expression_is_true_s_4e8db2c6bc528ea445201d5f036200da.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"mrzzy\".\"public\".\"stg_ynab_budget_category\"\n\nwhere not((goal_type is null and goal_amount = 0) or\nnot (goal_type is null and goal_amount = 0))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.stg_ynab_budget_category"}, "test.providence.not_null_stg_ynab_budget_category_group_id.6df0e0d0a3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_ynab_budget_category_group')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_ynab_budget_category_group_id", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_ynab_budget_category_group_id.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.not_null_stg_ynab_budget_category_group_id.6df0e0d0a3", "fqn": ["providence", "staging", "spectrum", "ynab", "not_null_stg_ynab_budget_category_group_id"], "alias": "not_null_stg_ynab_budget_category_group_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.536273, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_ynab_budget_category_group"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_budget_category_group"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/not_null_stg_ynab_budget_category_group_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"mrzzy\".\"public\".\"stg_ynab_budget_category_group\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "id", "file_key_name": "models.stg_ynab_budget_category_group"}, "test.providence.not_null_stg_ynab_budget_category_group_name.12d7756d7e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('stg_ynab_budget_category_group')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_ynab_budget_category_group_name", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_ynab_budget_category_group_name.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.not_null_stg_ynab_budget_category_group_name.12d7756d7e", "fqn": ["providence", "staging", "spectrum", "ynab", "not_null_stg_ynab_budget_category_group_name"], "alias": "not_null_stg_ynab_budget_category_group_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.5383964, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_ynab_budget_category_group"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_budget_category_group"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/not_null_stg_ynab_budget_category_group_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"mrzzy\".\"public\".\"stg_ynab_budget_category_group\"\nwhere name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "name", "file_key_name": "models.stg_ynab_budget_category_group"}, "test.providence.not_null_stg_ynab_budget_category_group_is_deleted.2f5e288fd9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_deleted", "model": "{{ get_where_subquery(ref('stg_ynab_budget_category_group')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_ynab_budget_category_group_is_deleted", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_ynab_budget_category_group_is_deleted.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.not_null_stg_ynab_budget_category_group_is_deleted.2f5e288fd9", "fqn": ["providence", "staging", "spectrum", "ynab", "not_null_stg_ynab_budget_category_group_is_deleted"], "alias": "not_null_stg_ynab_budget_category_group_is_deleted", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.5404963, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_ynab_budget_category_group"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_budget_category_group"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/not_null_stg_ynab_budget_category_group_is_deleted.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect is_deleted\nfrom \"mrzzy\".\"public\".\"stg_ynab_budget_category_group\"\nwhere is_deleted is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "is_deleted", "file_key_name": "models.stg_ynab_budget_category_group"}, "test.providence.not_null_stg_ynab_budget_category_group_scraped_on.e523bbdd8d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "scraped_on", "model": "{{ get_where_subquery(ref('stg_ynab_budget_category_group')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_ynab_budget_category_group_scraped_on", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_ynab_budget_category_group_scraped_on.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.not_null_stg_ynab_budget_category_group_scraped_on.e523bbdd8d", "fqn": ["providence", "staging", "spectrum", "ynab", "not_null_stg_ynab_budget_category_group_scraped_on"], "alias": "not_null_stg_ynab_budget_category_group_scraped_on", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.5428922, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_ynab_budget_category_group"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_budget_category_group"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/not_null_stg_ynab_budget_category_group_scraped_on.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect scraped_on\nfrom \"mrzzy\".\"public\".\"stg_ynab_budget_category_group\"\nwhere scraped_on is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "scraped_on", "file_key_name": "models.stg_ynab_budget_category_group"}, "test.providence.not_null_stg_ynab_account_id.d72a2d3016": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_ynab_account')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_ynab_account_id", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_ynab_account_id.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.not_null_stg_ynab_account_id.d72a2d3016", "fqn": ["providence", "staging", "spectrum", "ynab", "not_null_stg_ynab_account_id"], "alias": "not_null_stg_ynab_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.545, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_ynab_account"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_account"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/not_null_stg_ynab_account_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"mrzzy\".\"public\".\"stg_ynab_account\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "id", "file_key_name": "models.stg_ynab_account"}, "test.providence.not_null_stg_ynab_account_name.c20bd5cb7a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('stg_ynab_account')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_ynab_account_name", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_ynab_account_name.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.not_null_stg_ynab_account_name.c20bd5cb7a", "fqn": ["providence", "staging", "spectrum", "ynab", "not_null_stg_ynab_account_name"], "alias": "not_null_stg_ynab_account_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.547121, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_ynab_account"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_account"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/not_null_stg_ynab_account_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"mrzzy\".\"public\".\"stg_ynab_account\"\nwhere name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "name", "file_key_name": "models.stg_ynab_account"}, "test.providence.not_null_stg_ynab_account_type.f5a8ae798e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "type", "model": "{{ get_where_subquery(ref('stg_ynab_account')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_ynab_account_type", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_ynab_account_type.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.not_null_stg_ynab_account_type.f5a8ae798e", "fqn": ["providence", "staging", "spectrum", "ynab", "not_null_stg_ynab_account_type"], "alias": "not_null_stg_ynab_account_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.549195, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_ynab_account"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_account"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/not_null_stg_ynab_account_type.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect type\nfrom \"mrzzy\".\"public\".\"stg_ynab_account\"\nwhere type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "type", "file_key_name": "models.stg_ynab_account"}, "test.providence.accepted_values_stg_ynab_account_type__checking__savings__cash__creditCard__lineOfCredit__otherAsset__otherLiability__mortgage__autoLoan__studentLoan__personalLoan__medicalDebt__otherDebt.c6021c65b1": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["checking", "savings", "cash", "creditCard", "lineOfCredit", "otherAsset", "otherLiability", "mortgage", "autoLoan", "studentLoan", "personalLoan", "medicalDebt", "otherDebt"], "column_name": "type", "model": "{{ get_where_subquery(ref('stg_ynab_account')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "accepted_values_stg_ynab_account_type__checking__savings__cash__creditCard__lineOfCredit__otherAsset__otherLiability__mortgage__autoLoan__studentLoan__personalLoan__medicalDebt__otherDebt", "resource_type": "test", "package_name": "providence", "path": "accepted_values_stg_ynab_accou_9058efb462e8cd37c22f49d11e54145e.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.accepted_values_stg_ynab_account_type__checking__savings__cash__creditCard__lineOfCredit__otherAsset__otherLiability__mortgage__autoLoan__studentLoan__personalLoan__medicalDebt__otherDebt.c6021c65b1", "fqn": ["providence", "staging", "spectrum", "ynab", "accepted_values_stg_ynab_account_type__checking__savings__cash__creditCard__lineOfCredit__otherAsset__otherLiability__mortgage__autoLoan__studentLoan__personalLoan__medicalDebt__otherDebt"], "alias": "accepted_values_stg_ynab_accou_9058efb462e8cd37c22f49d11e54145e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_stg_ynab_accou_9058efb462e8cd37c22f49d11e54145e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_stg_ynab_accou_9058efb462e8cd37c22f49d11e54145e"}, "created_at": 1684070076.5516186, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_stg_ynab_accou_9058efb462e8cd37c22f49d11e54145e\") }}", "language": "sql", "refs": [["stg_ynab_account"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_account"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/accepted_values_stg_ynab_accou_9058efb462e8cd37c22f49d11e54145e.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        type as value_field,\n        count(*) as n_records\n\n    from \"mrzzy\".\"public\".\"stg_ynab_account\"\n    group by type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'checking','savings','cash','creditCard','lineOfCredit','otherAsset','otherLiability','mortgage','autoLoan','studentLoan','personalLoan','medicalDebt','otherDebt'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "type", "file_key_name": "models.stg_ynab_account"}, "test.providence.not_null_stg_ynab_account_on_budget.3e48a5817a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "on_budget", "model": "{{ get_where_subquery(ref('stg_ynab_account')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_ynab_account_on_budget", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_ynab_account_on_budget.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.not_null_stg_ynab_account_on_budget.3e48a5817a", "fqn": ["providence", "staging", "spectrum", "ynab", "not_null_stg_ynab_account_on_budget"], "alias": "not_null_stg_ynab_account_on_budget", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.5622199, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_ynab_account"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_account"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/not_null_stg_ynab_account_on_budget.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect on_budget\nfrom \"mrzzy\".\"public\".\"stg_ynab_account\"\nwhere on_budget is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "on_budget", "file_key_name": "models.stg_ynab_account"}, "test.providence.not_null_stg_ynab_account_is_closed.1a37a6ca85": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_closed", "model": "{{ get_where_subquery(ref('stg_ynab_account')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_ynab_account_is_closed", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_ynab_account_is_closed.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.not_null_stg_ynab_account_is_closed.1a37a6ca85", "fqn": ["providence", "staging", "spectrum", "ynab", "not_null_stg_ynab_account_is_closed"], "alias": "not_null_stg_ynab_account_is_closed", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.5643342, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_ynab_account"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_account"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/not_null_stg_ynab_account_is_closed.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect is_closed\nfrom \"mrzzy\".\"public\".\"stg_ynab_account\"\nwhere is_closed is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "is_closed", "file_key_name": "models.stg_ynab_account"}, "test.providence.not_null_stg_ynab_account_is_deleted.790da8023f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_deleted", "model": "{{ get_where_subquery(ref('stg_ynab_account')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_ynab_account_is_deleted", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_ynab_account_is_deleted.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.not_null_stg_ynab_account_is_deleted.790da8023f", "fqn": ["providence", "staging", "spectrum", "ynab", "not_null_stg_ynab_account_is_deleted"], "alias": "not_null_stg_ynab_account_is_deleted", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.5667598, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_ynab_account"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_account"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/not_null_stg_ynab_account_is_deleted.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect is_deleted\nfrom \"mrzzy\".\"public\".\"stg_ynab_account\"\nwhere is_deleted is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "is_deleted", "file_key_name": "models.stg_ynab_account"}, "test.providence.not_null_stg_ynab_account_payee_id.d616757f19": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "payee_id", "model": "{{ get_where_subquery(ref('stg_ynab_account')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_ynab_account_payee_id", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_ynab_account_payee_id.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.not_null_stg_ynab_account_payee_id.d616757f19", "fqn": ["providence", "staging", "spectrum", "ynab", "not_null_stg_ynab_account_payee_id"], "alias": "not_null_stg_ynab_account_payee_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.5688515, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_ynab_account"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_account"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/not_null_stg_ynab_account_payee_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payee_id\nfrom \"mrzzy\".\"public\".\"stg_ynab_account\"\nwhere payee_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "payee_id", "file_key_name": "models.stg_ynab_account"}, "test.providence.relationships_stg_ynab_account_payee_id__id__ref_stg_ynab_payee_.ea7b377d50": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref(\"stg_ynab_payee\")", "field": "id", "column_name": "payee_id", "model": "{{ get_where_subquery(ref('stg_ynab_account')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "relationships_stg_ynab_account_payee_id__id__ref_stg_ynab_payee_", "resource_type": "test", "package_name": "providence", "path": "relationships_stg_ynab_account_22a87e25531c981b76e3992c476ac150.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.relationships_stg_ynab_account_payee_id__id__ref_stg_ynab_payee_.ea7b377d50", "fqn": ["providence", "staging", "spectrum", "ynab", "relationships_stg_ynab_account_payee_id__id__ref_stg_ynab_payee_"], "alias": "relationships_stg_ynab_account_22a87e25531c981b76e3992c476ac150", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_ynab_account_22a87e25531c981b76e3992c476ac150", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_stg_ynab_account_22a87e25531c981b76e3992c476ac150"}, "created_at": 1684070076.57097, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_ynab_account_22a87e25531c981b76e3992c476ac150\") }}", "language": "sql", "refs": [["stg_ynab_payee"], ["stg_ynab_account"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_payee", "model.providence.stg_ynab_account"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/relationships_stg_ynab_account_22a87e25531c981b76e3992c476ac150.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select payee_id as from_field\n    from \"mrzzy\".\"public\".\"stg_ynab_account\"\n    where payee_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"mrzzy\".\"public\".\"stg_ynab_payee\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "payee_id", "file_key_name": "models.stg_ynab_account"}, "test.providence.not_null_stg_ynab_account_scraped_on.60f3690164": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "scraped_on", "model": "{{ get_where_subquery(ref('stg_ynab_account')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_ynab_account_scraped_on", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_ynab_account_scraped_on.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.not_null_stg_ynab_account_scraped_on.60f3690164", "fqn": ["providence", "staging", "spectrum", "ynab", "not_null_stg_ynab_account_scraped_on"], "alias": "not_null_stg_ynab_account_scraped_on", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.57726, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_ynab_account"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_account"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/not_null_stg_ynab_account_scraped_on.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect scraped_on\nfrom \"mrzzy\".\"public\".\"stg_ynab_account\"\nwhere scraped_on is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "scraped_on", "file_key_name": "models.stg_ynab_account"}, "test.providence.not_null_stg_ynab_payee_id.e1b6fba8da": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_ynab_payee')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_ynab_payee_id", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_ynab_payee_id.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.not_null_stg_ynab_payee_id.e1b6fba8da", "fqn": ["providence", "staging", "spectrum", "ynab", "not_null_stg_ynab_payee_id"], "alias": "not_null_stg_ynab_payee_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.5793853, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_ynab_payee"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_payee"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/not_null_stg_ynab_payee_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"mrzzy\".\"public\".\"stg_ynab_payee\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "id", "file_key_name": "models.stg_ynab_payee"}, "test.providence.not_null_stg_ynab_payee_name.9eb4d84453": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('stg_ynab_payee')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_ynab_payee_name", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_ynab_payee_name.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.not_null_stg_ynab_payee_name.9eb4d84453", "fqn": ["providence", "staging", "spectrum", "ynab", "not_null_stg_ynab_payee_name"], "alias": "not_null_stg_ynab_payee_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.5814767, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_ynab_payee"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_payee"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/not_null_stg_ynab_payee_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"mrzzy\".\"public\".\"stg_ynab_payee\"\nwhere name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "name", "file_key_name": "models.stg_ynab_payee"}, "test.providence.relationships_stg_ynab_payee_transfer_account_id__id__ref_stg_ynab_account_.c236b848e6": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref(\"stg_ynab_account\")", "field": "id", "column_name": "transfer_account_id", "model": "{{ get_where_subquery(ref('stg_ynab_payee')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "relationships_stg_ynab_payee_transfer_account_id__id__ref_stg_ynab_account_", "resource_type": "test", "package_name": "providence", "path": "relationships_stg_ynab_payee_dc145bc0c1f13302a78c591386d1d4b5.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.relationships_stg_ynab_payee_transfer_account_id__id__ref_stg_ynab_account_.c236b848e6", "fqn": ["providence", "staging", "spectrum", "ynab", "relationships_stg_ynab_payee_transfer_account_id__id__ref_stg_ynab_account_"], "alias": "relationships_stg_ynab_payee_dc145bc0c1f13302a78c591386d1d4b5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_ynab_payee_dc145bc0c1f13302a78c591386d1d4b5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_stg_ynab_payee_dc145bc0c1f13302a78c591386d1d4b5"}, "created_at": 1684070076.583903, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_ynab_payee_dc145bc0c1f13302a78c591386d1d4b5\") }}", "language": "sql", "refs": [["stg_ynab_account"], ["stg_ynab_payee"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_account", "model.providence.stg_ynab_payee"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/relationships_stg_ynab_payee_dc145bc0c1f13302a78c591386d1d4b5.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select transfer_account_id as from_field\n    from \"mrzzy\".\"public\".\"stg_ynab_payee\"\n    where transfer_account_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"mrzzy\".\"public\".\"stg_ynab_account\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "transfer_account_id", "file_key_name": "models.stg_ynab_payee"}, "test.providence.not_null_stg_ynab_payee_scraped_on.ba40d87921": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "scraped_on", "model": "{{ get_where_subquery(ref('stg_ynab_payee')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_ynab_payee_scraped_on", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_ynab_payee_scraped_on.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.not_null_stg_ynab_payee_scraped_on.ba40d87921", "fqn": ["providence", "staging", "spectrum", "ynab", "not_null_stg_ynab_payee_scraped_on"], "alias": "not_null_stg_ynab_payee_scraped_on", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.5899174, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_ynab_payee"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_payee"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/not_null_stg_ynab_payee_scraped_on.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect scraped_on\nfrom \"mrzzy\".\"public\".\"stg_ynab_payee\"\nwhere scraped_on is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "scraped_on", "file_key_name": "models.stg_ynab_payee"}, "test.providence.not_null_stg_ynab_transaction_id.d13932320d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_ynab_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_ynab_transaction_id", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_ynab_transaction_id.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.not_null_stg_ynab_transaction_id.d13932320d", "fqn": ["providence", "staging", "spectrum", "ynab", "not_null_stg_ynab_transaction_id"], "alias": "not_null_stg_ynab_transaction_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.5923095, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_ynab_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_transaction"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/not_null_stg_ynab_transaction_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"mrzzy\".\"public\".\"stg_ynab_transaction\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "id", "file_key_name": "models.stg_ynab_transaction"}, "test.providence.not_null_stg_ynab_transaction_amount.2a25bb15f2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "amount", "model": "{{ get_where_subquery(ref('stg_ynab_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_ynab_transaction_amount", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_ynab_transaction_amount.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.not_null_stg_ynab_transaction_amount.2a25bb15f2", "fqn": ["providence", "staging", "spectrum", "ynab", "not_null_stg_ynab_transaction_amount"], "alias": "not_null_stg_ynab_transaction_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.594389, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_ynab_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_transaction"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/not_null_stg_ynab_transaction_amount.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect amount\nfrom \"mrzzy\".\"public\".\"stg_ynab_transaction\"\nwhere amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "amount", "file_key_name": "models.stg_ynab_transaction"}, "test.providence.not_null_stg_ynab_transaction_clearing_status.e60e57e998": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "clearing_status", "model": "{{ get_where_subquery(ref('stg_ynab_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_ynab_transaction_clearing_status", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_ynab_transaction_clearing_status.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.not_null_stg_ynab_transaction_clearing_status.e60e57e998", "fqn": ["providence", "staging", "spectrum", "ynab", "not_null_stg_ynab_transaction_clearing_status"], "alias": "not_null_stg_ynab_transaction_clearing_status", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.596485, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_ynab_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_transaction"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/not_null_stg_ynab_transaction_clearing_status.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect clearing_status\nfrom \"mrzzy\".\"public\".\"stg_ynab_transaction\"\nwhere clearing_status is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "clearing_status", "file_key_name": "models.stg_ynab_transaction"}, "test.providence.accepted_values_stg_ynab_transaction_clearing_status__cleared__uncleared__reconciled.2076da252a": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["cleared", "uncleared", "reconciled"], "column_name": "clearing_status", "model": "{{ get_where_subquery(ref('stg_ynab_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "accepted_values_stg_ynab_transaction_clearing_status__cleared__uncleared__reconciled", "resource_type": "test", "package_name": "providence", "path": "accepted_values_stg_ynab_trans_fd78988f23e0d2a35eecd82f09a0f50b.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.accepted_values_stg_ynab_transaction_clearing_status__cleared__uncleared__reconciled.2076da252a", "fqn": ["providence", "staging", "spectrum", "ynab", "accepted_values_stg_ynab_transaction_clearing_status__cleared__uncleared__reconciled"], "alias": "accepted_values_stg_ynab_trans_fd78988f23e0d2a35eecd82f09a0f50b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_stg_ynab_trans_fd78988f23e0d2a35eecd82f09a0f50b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_stg_ynab_trans_fd78988f23e0d2a35eecd82f09a0f50b"}, "created_at": 1684070076.598614, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_stg_ynab_trans_fd78988f23e0d2a35eecd82f09a0f50b\") }}", "language": "sql", "refs": [["stg_ynab_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_transaction"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/accepted_values_stg_ynab_trans_fd78988f23e0d2a35eecd82f09a0f50b.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        clearing_status as value_field,\n        count(*) as n_records\n\n    from \"mrzzy\".\"public\".\"stg_ynab_transaction\"\n    group by clearing_status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'cleared','uncleared','reconciled'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "clearing_status", "file_key_name": "models.stg_ynab_transaction"}, "test.providence.not_null_stg_ynab_transaction_is_approved.d8314cbd36": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_approved", "model": "{{ get_where_subquery(ref('stg_ynab_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_ynab_transaction_is_approved", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_ynab_transaction_is_approved.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.not_null_stg_ynab_transaction_is_approved.d8314cbd36", "fqn": ["providence", "staging", "spectrum", "ynab", "not_null_stg_ynab_transaction_is_approved"], "alias": "not_null_stg_ynab_transaction_is_approved", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.605083, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_ynab_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_transaction"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/not_null_stg_ynab_transaction_is_approved.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect is_approved\nfrom \"mrzzy\".\"public\".\"stg_ynab_transaction\"\nwhere is_approved is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "is_approved", "file_key_name": "models.stg_ynab_transaction"}, "test.providence.not_null_stg_ynab_transaction_is_deleted.bd2a11bbfa": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_deleted", "model": "{{ get_where_subquery(ref('stg_ynab_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_ynab_transaction_is_deleted", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_ynab_transaction_is_deleted.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.not_null_stg_ynab_transaction_is_deleted.bd2a11bbfa", "fqn": ["providence", "staging", "spectrum", "ynab", "not_null_stg_ynab_transaction_is_deleted"], "alias": "not_null_stg_ynab_transaction_is_deleted", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.607967, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_ynab_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_transaction"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/not_null_stg_ynab_transaction_is_deleted.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect is_deleted\nfrom \"mrzzy\".\"public\".\"stg_ynab_transaction\"\nwhere is_deleted is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "is_deleted", "file_key_name": "models.stg_ynab_transaction"}, "test.providence.not_null_stg_ynab_transaction_budget_id.d943d0eb3d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "budget_id", "model": "{{ get_where_subquery(ref('stg_ynab_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_ynab_transaction_budget_id", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_ynab_transaction_budget_id.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.not_null_stg_ynab_transaction_budget_id.d943d0eb3d", "fqn": ["providence", "staging", "spectrum", "ynab", "not_null_stg_ynab_transaction_budget_id"], "alias": "not_null_stg_ynab_transaction_budget_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.6100502, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_ynab_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_transaction"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/not_null_stg_ynab_transaction_budget_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect budget_id\nfrom \"mrzzy\".\"public\".\"stg_ynab_transaction\"\nwhere budget_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "budget_id", "file_key_name": "models.stg_ynab_transaction"}, "test.providence.relationships_stg_ynab_transaction_budget_id__id__ref_stg_ynab_budget_.d38d14188a": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref(\"stg_ynab_budget\")", "field": "id", "column_name": "budget_id", "model": "{{ get_where_subquery(ref('stg_ynab_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "relationships_stg_ynab_transaction_budget_id__id__ref_stg_ynab_budget_", "resource_type": "test", "package_name": "providence", "path": "relationships_stg_ynab_transac_45a2ed4afb0ee4518b358fcc3b8d0c20.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.relationships_stg_ynab_transaction_budget_id__id__ref_stg_ynab_budget_.d38d14188a", "fqn": ["providence", "staging", "spectrum", "ynab", "relationships_stg_ynab_transaction_budget_id__id__ref_stg_ynab_budget_"], "alias": "relationships_stg_ynab_transac_45a2ed4afb0ee4518b358fcc3b8d0c20", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_ynab_transac_45a2ed4afb0ee4518b358fcc3b8d0c20", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_stg_ynab_transac_45a2ed4afb0ee4518b358fcc3b8d0c20"}, "created_at": 1684070076.612174, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_ynab_transac_45a2ed4afb0ee4518b358fcc3b8d0c20\") }}", "language": "sql", "refs": [["stg_ynab_budget"], ["stg_ynab_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_budget", "model.providence.stg_ynab_transaction"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/relationships_stg_ynab_transac_45a2ed4afb0ee4518b358fcc3b8d0c20.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select budget_id as from_field\n    from \"mrzzy\".\"public\".\"stg_ynab_transaction\"\n    where budget_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"mrzzy\".\"public\".\"stg_ynab_budget\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "budget_id", "file_key_name": "models.stg_ynab_transaction"}, "test.providence.not_null_stg_ynab_transaction_account_id.23442828ee": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('stg_ynab_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_ynab_transaction_account_id", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_ynab_transaction_account_id.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.not_null_stg_ynab_transaction_account_id.23442828ee", "fqn": ["providence", "staging", "spectrum", "ynab", "not_null_stg_ynab_transaction_account_id"], "alias": "not_null_stg_ynab_transaction_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.6785603, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_ynab_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_transaction"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/not_null_stg_ynab_transaction_account_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom \"mrzzy\".\"public\".\"stg_ynab_transaction\"\nwhere account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "account_id", "file_key_name": "models.stg_ynab_transaction"}, "test.providence.relationships_stg_ynab_transaction_account_id__id__ref_stg_ynab_account_.eac4609a6d": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref(\"stg_ynab_account\")", "field": "id", "column_name": "account_id", "model": "{{ get_where_subquery(ref('stg_ynab_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "relationships_stg_ynab_transaction_account_id__id__ref_stg_ynab_account_", "resource_type": "test", "package_name": "providence", "path": "relationships_stg_ynab_transac_5dbceec5237a386649c4bd257ac83fe7.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.relationships_stg_ynab_transaction_account_id__id__ref_stg_ynab_account_.eac4609a6d", "fqn": ["providence", "staging", "spectrum", "ynab", "relationships_stg_ynab_transaction_account_id__id__ref_stg_ynab_account_"], "alias": "relationships_stg_ynab_transac_5dbceec5237a386649c4bd257ac83fe7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_ynab_transac_5dbceec5237a386649c4bd257ac83fe7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_stg_ynab_transac_5dbceec5237a386649c4bd257ac83fe7"}, "created_at": 1684070076.68095, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_ynab_transac_5dbceec5237a386649c4bd257ac83fe7\") }}", "language": "sql", "refs": [["stg_ynab_account"], ["stg_ynab_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_account", "model.providence.stg_ynab_transaction"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/relationships_stg_ynab_transac_5dbceec5237a386649c4bd257ac83fe7.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select account_id as from_field\n    from \"mrzzy\".\"public\".\"stg_ynab_transaction\"\n    where account_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"mrzzy\".\"public\".\"stg_ynab_account\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "account_id", "file_key_name": "models.stg_ynab_transaction"}, "test.providence.relationships_stg_ynab_transaction_payee_id__id__ref_stg_ynab_payee_.78bd80cdf2": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref(\"stg_ynab_payee\")", "field": "id", "column_name": "payee_id", "model": "{{ get_where_subquery(ref('stg_ynab_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "relationships_stg_ynab_transaction_payee_id__id__ref_stg_ynab_payee_", "resource_type": "test", "package_name": "providence", "path": "relationships_stg_ynab_transac_64b6a25340f83db817b6c673cd712ca1.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.relationships_stg_ynab_transaction_payee_id__id__ref_stg_ynab_payee_.78bd80cdf2", "fqn": ["providence", "staging", "spectrum", "ynab", "relationships_stg_ynab_transaction_payee_id__id__ref_stg_ynab_payee_"], "alias": "relationships_stg_ynab_transac_64b6a25340f83db817b6c673cd712ca1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_ynab_transac_64b6a25340f83db817b6c673cd712ca1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_stg_ynab_transac_64b6a25340f83db817b6c673cd712ca1"}, "created_at": 1684070076.687073, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_ynab_transac_64b6a25340f83db817b6c673cd712ca1\") }}", "language": "sql", "refs": [["stg_ynab_payee"], ["stg_ynab_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_payee", "model.providence.stg_ynab_transaction"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/relationships_stg_ynab_transac_64b6a25340f83db817b6c673cd712ca1.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select payee_id as from_field\n    from \"mrzzy\".\"public\".\"stg_ynab_transaction\"\n    where payee_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"mrzzy\".\"public\".\"stg_ynab_payee\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "payee_id", "file_key_name": "models.stg_ynab_transaction"}, "test.providence.relationships_stg_ynab_transaction_transfer_account_id__id__ref_stg_ynab_account_.c8d0e0c625": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref(\"stg_ynab_account\")", "field": "id", "column_name": "transfer_account_id", "model": "{{ get_where_subquery(ref('stg_ynab_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "relationships_stg_ynab_transaction_transfer_account_id__id__ref_stg_ynab_account_", "resource_type": "test", "package_name": "providence", "path": "relationships_stg_ynab_transac_9e6fb0097418214111af9227f29d2463.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.relationships_stg_ynab_transaction_transfer_account_id__id__ref_stg_ynab_account_.c8d0e0c625", "fqn": ["providence", "staging", "spectrum", "ynab", "relationships_stg_ynab_transaction_transfer_account_id__id__ref_stg_ynab_account_"], "alias": "relationships_stg_ynab_transac_9e6fb0097418214111af9227f29d2463", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_ynab_transac_9e6fb0097418214111af9227f29d2463", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_stg_ynab_transac_9e6fb0097418214111af9227f29d2463"}, "created_at": 1684070076.6932967, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_ynab_transac_9e6fb0097418214111af9227f29d2463\") }}", "language": "sql", "refs": [["stg_ynab_account"], ["stg_ynab_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_account", "model.providence.stg_ynab_transaction"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/relationships_stg_ynab_transac_9e6fb0097418214111af9227f29d2463.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select transfer_account_id as from_field\n    from \"mrzzy\".\"public\".\"stg_ynab_transaction\"\n    where transfer_account_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"mrzzy\".\"public\".\"stg_ynab_account\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "transfer_account_id", "file_key_name": "models.stg_ynab_transaction"}, "test.providence.not_null_stg_ynab_transaction_date.dd6a72adb5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('stg_ynab_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_ynab_transaction_date", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_ynab_transaction_date.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.not_null_stg_ynab_transaction_date.dd6a72adb5", "fqn": ["providence", "staging", "spectrum", "ynab", "not_null_stg_ynab_transaction_date"], "alias": "not_null_stg_ynab_transaction_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.699436, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_ynab_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_transaction"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/not_null_stg_ynab_transaction_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom \"mrzzy\".\"public\".\"stg_ynab_transaction\"\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "date", "file_key_name": "models.stg_ynab_transaction"}, "test.providence.not_null_stg_ynab_transaction_scraped_on.8275f75f0f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "scraped_on", "model": "{{ get_where_subquery(ref('stg_ynab_transaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_ynab_transaction_scraped_on", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_ynab_transaction_scraped_on.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.not_null_stg_ynab_transaction_scraped_on.8275f75f0f", "fqn": ["providence", "staging", "spectrum", "ynab", "not_null_stg_ynab_transaction_scraped_on"], "alias": "not_null_stg_ynab_transaction_scraped_on", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.7015343, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_ynab_transaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_transaction"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/not_null_stg_ynab_transaction_scraped_on.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect scraped_on\nfrom \"mrzzy\".\"public\".\"stg_ynab_transaction\"\nwhere scraped_on is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "scraped_on", "file_key_name": "models.stg_ynab_transaction"}, "test.providence.not_null_stg_ynab_subtransaction_id.b580471f04": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_ynab_subtransaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_ynab_subtransaction_id", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_ynab_subtransaction_id.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.not_null_stg_ynab_subtransaction_id.b580471f04", "fqn": ["providence", "staging", "spectrum", "ynab", "not_null_stg_ynab_subtransaction_id"], "alias": "not_null_stg_ynab_subtransaction_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.7039404, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_ynab_subtransaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_subtransaction"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/not_null_stg_ynab_subtransaction_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"mrzzy\".\"public\".\"stg_ynab_subtransaction\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "id", "file_key_name": "models.stg_ynab_subtransaction"}, "test.providence.not_null_stg_ynab_subtransaction_super_id.3e85af220b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "super_id", "model": "{{ get_where_subquery(ref('stg_ynab_subtransaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_ynab_subtransaction_super_id", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_ynab_subtransaction_super_id.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.not_null_stg_ynab_subtransaction_super_id.3e85af220b", "fqn": ["providence", "staging", "spectrum", "ynab", "not_null_stg_ynab_subtransaction_super_id"], "alias": "not_null_stg_ynab_subtransaction_super_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.7060351, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_ynab_subtransaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_subtransaction"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/not_null_stg_ynab_subtransaction_super_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect super_id\nfrom \"mrzzy\".\"public\".\"stg_ynab_subtransaction\"\nwhere super_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "super_id", "file_key_name": "models.stg_ynab_subtransaction"}, "test.providence.relationships_stg_ynab_subtransaction_super_id__id__ref_stg_ynab_transaction_.73b591fb02": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref(\"stg_ynab_transaction\")", "field": "id", "column_name": "super_id", "model": "{{ get_where_subquery(ref('stg_ynab_subtransaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "relationships_stg_ynab_subtransaction_super_id__id__ref_stg_ynab_transaction_", "resource_type": "test", "package_name": "providence", "path": "relationships_stg_ynab_subtran_324623a7126f0f1eab6c4c114b065741.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.relationships_stg_ynab_subtransaction_super_id__id__ref_stg_ynab_transaction_.73b591fb02", "fqn": ["providence", "staging", "spectrum", "ynab", "relationships_stg_ynab_subtransaction_super_id__id__ref_stg_ynab_transaction_"], "alias": "relationships_stg_ynab_subtran_324623a7126f0f1eab6c4c114b065741", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_ynab_subtran_324623a7126f0f1eab6c4c114b065741", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_stg_ynab_subtran_324623a7126f0f1eab6c4c114b065741"}, "created_at": 1684070076.7081578, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_ynab_subtran_324623a7126f0f1eab6c4c114b065741\") }}", "language": "sql", "refs": [["stg_ynab_transaction"], ["stg_ynab_subtransaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_transaction", "model.providence.stg_ynab_subtransaction"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/relationships_stg_ynab_subtran_324623a7126f0f1eab6c4c114b065741.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select super_id as from_field\n    from \"mrzzy\".\"public\".\"stg_ynab_subtransaction\"\n    where super_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"mrzzy\".\"public\".\"stg_ynab_transaction\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "super_id", "file_key_name": "models.stg_ynab_subtransaction"}, "test.providence.relationships_stg_ynab_subtransaction_payee_id__id__ref_stg_ynab_payee_.e11d61d39e": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref(\"stg_ynab_payee\")", "field": "id", "column_name": "payee_id", "model": "{{ get_where_subquery(ref('stg_ynab_subtransaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "relationships_stg_ynab_subtransaction_payee_id__id__ref_stg_ynab_payee_", "resource_type": "test", "package_name": "providence", "path": "relationships_stg_ynab_subtran_23fb325eace0533539480c3c93b2be54.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.relationships_stg_ynab_subtransaction_payee_id__id__ref_stg_ynab_payee_.e11d61d39e", "fqn": ["providence", "staging", "spectrum", "ynab", "relationships_stg_ynab_subtransaction_payee_id__id__ref_stg_ynab_payee_"], "alias": "relationships_stg_ynab_subtran_23fb325eace0533539480c3c93b2be54", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_ynab_subtran_23fb325eace0533539480c3c93b2be54", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_stg_ynab_subtran_23fb325eace0533539480c3c93b2be54"}, "created_at": 1684070076.7143104, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_ynab_subtran_23fb325eace0533539480c3c93b2be54\") }}", "language": "sql", "refs": [["stg_ynab_payee"], ["stg_ynab_subtransaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_payee", "model.providence.stg_ynab_subtransaction"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/relationships_stg_ynab_subtran_23fb325eace0533539480c3c93b2be54.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select payee_id as from_field\n    from \"mrzzy\".\"public\".\"stg_ynab_subtransaction\"\n    where payee_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"mrzzy\".\"public\".\"stg_ynab_payee\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "payee_id", "file_key_name": "models.stg_ynab_subtransaction"}, "test.providence.relationships_stg_ynab_subtransaction_transfer_account_id__id__ref_stg_ynab_account_.bb3848f847": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref(\"stg_ynab_account\")", "field": "id", "column_name": "transfer_account_id", "model": "{{ get_where_subquery(ref('stg_ynab_subtransaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "relationships_stg_ynab_subtransaction_transfer_account_id__id__ref_stg_ynab_account_", "resource_type": "test", "package_name": "providence", "path": "relationships_stg_ynab_subtran_e2718d79bf3b9bcf1964c3f1123e504e.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.relationships_stg_ynab_subtransaction_transfer_account_id__id__ref_stg_ynab_account_.bb3848f847", "fqn": ["providence", "staging", "spectrum", "ynab", "relationships_stg_ynab_subtransaction_transfer_account_id__id__ref_stg_ynab_account_"], "alias": "relationships_stg_ynab_subtran_e2718d79bf3b9bcf1964c3f1123e504e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_ynab_subtran_e2718d79bf3b9bcf1964c3f1123e504e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_stg_ynab_subtran_e2718d79bf3b9bcf1964c3f1123e504e"}, "created_at": 1684070076.7204974, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_ynab_subtran_e2718d79bf3b9bcf1964c3f1123e504e\") }}", "language": "sql", "refs": [["stg_ynab_account"], ["stg_ynab_subtransaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_account", "model.providence.stg_ynab_subtransaction"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/relationships_stg_ynab_subtran_e2718d79bf3b9bcf1964c3f1123e504e.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select transfer_account_id as from_field\n    from \"mrzzy\".\"public\".\"stg_ynab_subtransaction\"\n    where transfer_account_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"mrzzy\".\"public\".\"stg_ynab_account\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "transfer_account_id", "file_key_name": "models.stg_ynab_subtransaction"}, "test.providence.not_null_stg_ynab_subtransaction_is_deleted.d73738e2b3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_deleted", "model": "{{ get_where_subquery(ref('stg_ynab_subtransaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_ynab_subtransaction_is_deleted", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_ynab_subtransaction_is_deleted.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.not_null_stg_ynab_subtransaction_is_deleted.d73738e2b3", "fqn": ["providence", "staging", "spectrum", "ynab", "not_null_stg_ynab_subtransaction_is_deleted"], "alias": "not_null_stg_ynab_subtransaction_is_deleted", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.7266603, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_ynab_subtransaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_subtransaction"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/not_null_stg_ynab_subtransaction_is_deleted.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect is_deleted\nfrom \"mrzzy\".\"public\".\"stg_ynab_subtransaction\"\nwhere is_deleted is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "is_deleted", "file_key_name": "models.stg_ynab_subtransaction"}, "test.providence.not_null_stg_ynab_subtransaction_amount.c934e50708": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "amount", "model": "{{ get_where_subquery(ref('stg_ynab_subtransaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_ynab_subtransaction_amount", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_ynab_subtransaction_amount.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.not_null_stg_ynab_subtransaction_amount.c934e50708", "fqn": ["providence", "staging", "spectrum", "ynab", "not_null_stg_ynab_subtransaction_amount"], "alias": "not_null_stg_ynab_subtransaction_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.7287614, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_ynab_subtransaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_subtransaction"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/not_null_stg_ynab_subtransaction_amount.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect amount\nfrom \"mrzzy\".\"public\".\"stg_ynab_subtransaction\"\nwhere amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "amount", "file_key_name": "models.stg_ynab_subtransaction"}, "test.providence.not_null_stg_ynab_subtransaction_scraped_on.c78c26f3c0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "scraped_on", "model": "{{ get_where_subquery(ref('stg_ynab_subtransaction')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_ynab_subtransaction_scraped_on", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_ynab_subtransaction_scraped_on.sql", "original_file_path": "models/staging/spectrum/ynab/models.yml", "unique_id": "test.providence.not_null_stg_ynab_subtransaction_scraped_on.c78c26f3c0", "fqn": ["providence", "staging", "spectrum", "ynab", "not_null_stg_ynab_subtransaction_scraped_on"], "alias": "not_null_stg_ynab_subtransaction_scraped_on", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.7308607, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_ynab_subtransaction"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_subtransaction"]}, "compiled_path": "target/compiled/providence/models/staging/spectrum/ynab/models.yml/not_null_stg_ynab_subtransaction_scraped_on.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect scraped_on\nfrom \"mrzzy\".\"public\".\"stg_ynab_subtransaction\"\nwhere scraped_on is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "scraped_on", "file_key_name": "models.stg_ynab_subtransaction"}, "test.providence.unique_stg_map_budget_account_id.0ccaae2aa8": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_map_budget_account')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "unique_stg_map_budget_account_id", "resource_type": "test", "package_name": "providence", "path": "unique_stg_map_budget_account_id.sql", "original_file_path": "models/staging/native/models.yml", "unique_id": "test.providence.unique_stg_map_budget_account_id.0ccaae2aa8", "fqn": ["providence", "staging", "native", "unique_stg_map_budget_account_id"], "alias": "unique_stg_map_budget_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.75029, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_map_budget_account"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_map_budget_account"]}, "compiled_path": "target/compiled/providence/models/staging/native/models.yml/unique_stg_map_budget_account_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"mrzzy\".\"public\".\"stg_map_budget_account\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "id", "file_key_name": "models.stg_map_budget_account"}, "test.providence.not_null_stg_map_budget_account_id.ea6ac451bf": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_map_budget_account')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_map_budget_account_id", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_map_budget_account_id.sql", "original_file_path": "models/staging/native/models.yml", "unique_id": "test.providence.not_null_stg_map_budget_account_id.ea6ac451bf", "fqn": ["providence", "staging", "native", "not_null_stg_map_budget_account_id"], "alias": "not_null_stg_map_budget_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.7524521, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_map_budget_account"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_map_budget_account"]}, "compiled_path": "target/compiled/providence/models/staging/native/models.yml/not_null_stg_map_budget_account_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"mrzzy\".\"public\".\"stg_map_budget_account\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "id", "file_key_name": "models.stg_map_budget_account"}, "test.providence.not_null_stg_map_budget_account_budget_account_id.27423bc86d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "budget_account_id", "model": "{{ get_where_subquery(ref('stg_map_budget_account')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_map_budget_account_budget_account_id", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_map_budget_account_budget_account_id.sql", "original_file_path": "models/staging/native/models.yml", "unique_id": "test.providence.not_null_stg_map_budget_account_budget_account_id.27423bc86d", "fqn": ["providence", "staging", "native", "not_null_stg_map_budget_account_budget_account_id"], "alias": "not_null_stg_map_budget_account_budget_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.7548091, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_map_budget_account"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_map_budget_account"]}, "compiled_path": "target/compiled/providence/models/staging/native/models.yml/not_null_stg_map_budget_account_budget_account_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect budget_account_id\nfrom \"mrzzy\".\"public\".\"stg_map_budget_account\"\nwhere budget_account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "budget_account_id", "file_key_name": "models.stg_map_budget_account"}, "test.providence.relationships_stg_map_budget_account_budget_account_id__id__ref_stg_ynab_account_.aacc590115": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref(\"stg_ynab_account\")", "field": "id", "column_name": "budget_account_id", "model": "{{ get_where_subquery(ref('stg_map_budget_account')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "relationships_stg_map_budget_account_budget_account_id__id__ref_stg_ynab_account_", "resource_type": "test", "package_name": "providence", "path": "relationships_stg_map_budget_a_15c9321ac84c8c821bc48e8be3ff2456.sql", "original_file_path": "models/staging/native/models.yml", "unique_id": "test.providence.relationships_stg_map_budget_account_budget_account_id__id__ref_stg_ynab_account_.aacc590115", "fqn": ["providence", "staging", "native", "relationships_stg_map_budget_account_budget_account_id__id__ref_stg_ynab_account_"], "alias": "relationships_stg_map_budget_a_15c9321ac84c8c821bc48e8be3ff2456", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_map_budget_a_15c9321ac84c8c821bc48e8be3ff2456", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_stg_map_budget_a_15c9321ac84c8c821bc48e8be3ff2456"}, "created_at": 1684070076.7569392, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_map_budget_a_15c9321ac84c8c821bc48e8be3ff2456\") }}", "language": "sql", "refs": [["stg_ynab_account"], ["stg_map_budget_account"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_account", "model.providence.stg_map_budget_account"]}, "compiled_path": "target/compiled/providence/models/staging/native/models.yml/relationships_stg_map_budget_a_15c9321ac84c8c821bc48e8be3ff2456.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select budget_account_id as from_field\n    from \"mrzzy\".\"public\".\"stg_map_budget_account\"\n    where budget_account_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"mrzzy\".\"public\".\"stg_ynab_account\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "budget_account_id", "file_key_name": "models.stg_map_budget_account"}, "test.providence.not_null_stg_map_budget_account_vendor.29789eda48": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "vendor", "model": "{{ get_where_subquery(ref('stg_map_budget_account')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_map_budget_account_vendor", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_map_budget_account_vendor.sql", "original_file_path": "models/staging/native/models.yml", "unique_id": "test.providence.not_null_stg_map_budget_account_vendor.29789eda48", "fqn": ["providence", "staging", "native", "not_null_stg_map_budget_account_vendor"], "alias": "not_null_stg_map_budget_account_vendor", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.7631922, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_map_budget_account"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_map_budget_account"]}, "compiled_path": "target/compiled/providence/models/staging/native/models.yml/not_null_stg_map_budget_account_vendor.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor\nfrom \"mrzzy\".\"public\".\"stg_map_budget_account\"\nwhere vendor is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "vendor", "file_key_name": "models.stg_map_budget_account"}, "test.providence.not_null_stg_map_budget_account_vendor_id.c24b2e8ed6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "vendor_id", "model": "{{ get_where_subquery(ref('stg_map_budget_account')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_map_budget_account_vendor_id", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_map_budget_account_vendor_id.sql", "original_file_path": "models/staging/native/models.yml", "unique_id": "test.providence.not_null_stg_map_budget_account_vendor_id.c24b2e8ed6", "fqn": ["providence", "staging", "native", "not_null_stg_map_budget_account_vendor_id"], "alias": "not_null_stg_map_budget_account_vendor_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.76529, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_map_budget_account"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_map_budget_account"]}, "compiled_path": "target/compiled/providence/models/staging/native/models.yml/not_null_stg_map_budget_account_vendor_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_id\nfrom \"mrzzy\".\"public\".\"stg_map_budget_account\"\nwhere vendor_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "vendor_id", "file_key_name": "models.stg_map_budget_account"}, "test.providence.unique_stg_map_bank_card_id.75ca08ea40": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_map_bank_card')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "unique_stg_map_bank_card_id", "resource_type": "test", "package_name": "providence", "path": "unique_stg_map_bank_card_id.sql", "original_file_path": "models/staging/native/models.yml", "unique_id": "test.providence.unique_stg_map_bank_card_id.75ca08ea40", "fqn": ["providence", "staging", "native", "unique_stg_map_bank_card_id"], "alias": "unique_stg_map_bank_card_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.7673898, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_map_bank_card"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_map_bank_card"]}, "compiled_path": "target/compiled/providence/models/staging/native/models.yml/unique_stg_map_bank_card_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"mrzzy\".\"public\".\"stg_map_bank_card\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "id", "file_key_name": "models.stg_map_bank_card"}, "test.providence.not_null_stg_map_bank_card_id.09471a98aa": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_map_bank_card')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_map_bank_card_id", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_map_bank_card_id.sql", "original_file_path": "models/staging/native/models.yml", "unique_id": "test.providence.not_null_stg_map_bank_card_id.09471a98aa", "fqn": ["providence", "staging", "native", "not_null_stg_map_bank_card_id"], "alias": "not_null_stg_map_bank_card_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.7703593, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_map_bank_card"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_map_bank_card"]}, "compiled_path": "target/compiled/providence/models/staging/native/models.yml/not_null_stg_map_bank_card_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"mrzzy\".\"public\".\"stg_map_bank_card\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "id", "file_key_name": "models.stg_map_bank_card"}, "test.providence.not_null_stg_map_bank_card_bank_card_id.b649121a27": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "bank_card_id", "model": "{{ get_where_subquery(ref('stg_map_bank_card')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_map_bank_card_bank_card_id", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_map_bank_card_bank_card_id.sql", "original_file_path": "models/staging/native/models.yml", "unique_id": "test.providence.not_null_stg_map_bank_card_bank_card_id.b649121a27", "fqn": ["providence", "staging", "native", "not_null_stg_map_bank_card_bank_card_id"], "alias": "not_null_stg_map_bank_card_bank_card_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.772487, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_map_bank_card"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_map_bank_card"]}, "compiled_path": "target/compiled/providence/models/staging/native/models.yml/not_null_stg_map_bank_card_bank_card_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect bank_card_id\nfrom \"mrzzy\".\"public\".\"stg_map_bank_card\"\nwhere bank_card_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "bank_card_id", "file_key_name": "models.stg_map_bank_card"}, "test.providence.not_null_stg_map_bank_card_vendor.1ba813a4d1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "vendor", "model": "{{ get_where_subquery(ref('stg_map_bank_card')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_map_bank_card_vendor", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_map_bank_card_vendor.sql", "original_file_path": "models/staging/native/models.yml", "unique_id": "test.providence.not_null_stg_map_bank_card_vendor.1ba813a4d1", "fqn": ["providence", "staging", "native", "not_null_stg_map_bank_card_vendor"], "alias": "not_null_stg_map_bank_card_vendor", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.774573, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_map_bank_card"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_map_bank_card"]}, "compiled_path": "target/compiled/providence/models/staging/native/models.yml/not_null_stg_map_bank_card_vendor.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor\nfrom \"mrzzy\".\"public\".\"stg_map_bank_card\"\nwhere vendor is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "vendor", "file_key_name": "models.stg_map_bank_card"}, "test.providence.not_null_stg_map_bank_card_vendor_id.3a45da337d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "vendor_id", "model": "{{ get_where_subquery(ref('stg_map_bank_card')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_stg_map_bank_card_vendor_id", "resource_type": "test", "package_name": "providence", "path": "not_null_stg_map_bank_card_vendor_id.sql", "original_file_path": "models/staging/native/models.yml", "unique_id": "test.providence.not_null_stg_map_bank_card_vendor_id.3a45da337d", "fqn": ["providence", "staging", "native", "not_null_stg_map_bank_card_vendor_id"], "alias": "not_null_stg_map_bank_card_vendor_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.7766569, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_map_bank_card"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_map_bank_card"]}, "compiled_path": "target/compiled/providence/models/staging/native/models.yml/not_null_stg_map_bank_card_vendor_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect vendor_id\nfrom \"mrzzy\".\"public\".\"stg_map_bank_card\"\nwhere vendor_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "vendor_id", "file_key_name": "models.stg_map_bank_card"}, "test.providence.not_null_mart_finance_dashboard_year_month.47e90c339f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "year_month", "model": "{{ get_where_subquery(ref('mart_finance_dashboard')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_mart_finance_dashboard_year_month", "resource_type": "test", "package_name": "providence", "path": "not_null_mart_finance_dashboard_year_month.sql", "original_file_path": "models/marts/finance_dashboard/models.yml", "unique_id": "test.providence.not_null_mart_finance_dashboard_year_month.47e90c339f", "fqn": ["providence", "marts", "finance_dashboard", "not_null_mart_finance_dashboard_year_month"], "alias": "not_null_mart_finance_dashboard_year_month", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.7994459, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["mart_finance_dashboard"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.mart_finance_dashboard"]}, "compiled_path": "target/compiled/providence/models/marts/finance_dashboard/models.yml/not_null_mart_finance_dashboard_year_month.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect year_month\nfrom \"mrzzy\".\"public\".\"mart_finance_dashboard\"\nwhere year_month is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "year_month", "file_key_name": "models.mart_finance_dashboard"}, "test.providence.not_null_mart_finance_dashboard_year_month_week.c9ecab3de7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "year_month_week", "model": "{{ get_where_subquery(ref('mart_finance_dashboard')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_mart_finance_dashboard_year_month_week", "resource_type": "test", "package_name": "providence", "path": "not_null_mart_finance_dashboard_year_month_week.sql", "original_file_path": "models/marts/finance_dashboard/models.yml", "unique_id": "test.providence.not_null_mart_finance_dashboard_year_month_week.c9ecab3de7", "fqn": ["providence", "marts", "finance_dashboard", "not_null_mart_finance_dashboard_year_month_week"], "alias": "not_null_mart_finance_dashboard_year_month_week", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.8016067, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["mart_finance_dashboard"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.mart_finance_dashboard"]}, "compiled_path": "target/compiled/providence/models/marts/finance_dashboard/models.yml/not_null_mart_finance_dashboard_year_month_week.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect year_month_week\nfrom \"mrzzy\".\"public\".\"mart_finance_dashboard\"\nwhere year_month_week is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "year_month_week", "file_key_name": "models.mart_finance_dashboard"}, "test.providence.not_null_mart_finance_dashboard_transaction_amount.09eb653cfe": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_amount", "model": "{{ get_where_subquery(ref('mart_finance_dashboard')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_mart_finance_dashboard_transaction_amount", "resource_type": "test", "package_name": "providence", "path": "not_null_mart_finance_dashboard_transaction_amount.sql", "original_file_path": "models/marts/finance_dashboard/models.yml", "unique_id": "test.providence.not_null_mart_finance_dashboard_transaction_amount.09eb653cfe", "fqn": ["providence", "marts", "finance_dashboard", "not_null_mart_finance_dashboard_transaction_amount"], "alias": "not_null_mart_finance_dashboard_transaction_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.803972, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["mart_finance_dashboard"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.mart_finance_dashboard"]}, "compiled_path": "target/compiled/providence/models/marts/finance_dashboard/models.yml/not_null_mart_finance_dashboard_transaction_amount.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_amount\nfrom \"mrzzy\".\"public\".\"mart_finance_dashboard\"\nwhere transaction_amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "transaction_amount", "file_key_name": "models.mart_finance_dashboard"}, "test.providence.not_null_mart_finance_dashboard_cash_amount.2a3706a614": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "cash_amount", "model": "{{ get_where_subquery(ref('mart_finance_dashboard')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_mart_finance_dashboard_cash_amount", "resource_type": "test", "package_name": "providence", "path": "not_null_mart_finance_dashboard_cash_amount.sql", "original_file_path": "models/marts/finance_dashboard/models.yml", "unique_id": "test.providence.not_null_mart_finance_dashboard_cash_amount.2a3706a614", "fqn": ["providence", "marts", "finance_dashboard", "not_null_mart_finance_dashboard_cash_amount"], "alias": "not_null_mart_finance_dashboard_cash_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.8060741, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["mart_finance_dashboard"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.mart_finance_dashboard"]}, "compiled_path": "target/compiled/providence/models/marts/finance_dashboard/models.yml/not_null_mart_finance_dashboard_cash_amount.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cash_amount\nfrom \"mrzzy\".\"public\".\"mart_finance_dashboard\"\nwhere cash_amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "cash_amount", "file_key_name": "models.mart_finance_dashboard"}, "test.providence.not_null_mart_finance_dashboard_transaction_date.4519375766": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_date", "model": "{{ get_where_subquery(ref('mart_finance_dashboard')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_mart_finance_dashboard_transaction_date", "resource_type": "test", "package_name": "providence", "path": "not_null_mart_finance_dashboard_transaction_date.sql", "original_file_path": "models/marts/finance_dashboard/models.yml", "unique_id": "test.providence.not_null_mart_finance_dashboard_transaction_date.4519375766", "fqn": ["providence", "marts", "finance_dashboard", "not_null_mart_finance_dashboard_transaction_date"], "alias": "not_null_mart_finance_dashboard_transaction_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.8081841, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["mart_finance_dashboard"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.mart_finance_dashboard"]}, "compiled_path": "target/compiled/providence/models/marts/finance_dashboard/models.yml/not_null_mart_finance_dashboard_transaction_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_date\nfrom \"mrzzy\".\"public\".\"mart_finance_dashboard\"\nwhere transaction_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "transaction_date", "file_key_name": "models.mart_finance_dashboard"}, "test.providence.not_null_mart_finance_dashboard_transaction_is_transfer.390481d8b9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_is_transfer", "model": "{{ get_where_subquery(ref('mart_finance_dashboard')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_mart_finance_dashboard_transaction_is_transfer", "resource_type": "test", "package_name": "providence", "path": "not_null_mart_finance_dashboard_transaction_is_transfer.sql", "original_file_path": "models/marts/finance_dashboard/models.yml", "unique_id": "test.providence.not_null_mart_finance_dashboard_transaction_is_transfer.390481d8b9", "fqn": ["providence", "marts", "finance_dashboard", "not_null_mart_finance_dashboard_transaction_is_transfer"], "alias": "not_null_mart_finance_dashboard_transaction_is_transfer", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.8102748, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["mart_finance_dashboard"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.mart_finance_dashboard"]}, "compiled_path": "target/compiled/providence/models/marts/finance_dashboard/models.yml/not_null_mart_finance_dashboard_transaction_is_transfer.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_is_transfer\nfrom \"mrzzy\".\"public\".\"mart_finance_dashboard\"\nwhere transaction_is_transfer is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "transaction_is_transfer", "file_key_name": "models.mart_finance_dashboard"}, "test.providence.not_null_mart_finance_dashboard_transaction_clearing_status.33f9be88e4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_clearing_status", "model": "{{ get_where_subquery(ref('mart_finance_dashboard')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_mart_finance_dashboard_transaction_clearing_status", "resource_type": "test", "package_name": "providence", "path": "not_null_mart_finance_dashboard_transaction_clearing_status.sql", "original_file_path": "models/marts/finance_dashboard/models.yml", "unique_id": "test.providence.not_null_mart_finance_dashboard_transaction_clearing_status.33f9be88e4", "fqn": ["providence", "marts", "finance_dashboard", "not_null_mart_finance_dashboard_transaction_clearing_status"], "alias": "not_null_mart_finance_dashboard_transaction_clearing_status", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.8126645, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["mart_finance_dashboard"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.mart_finance_dashboard"]}, "compiled_path": "target/compiled/providence/models/marts/finance_dashboard/models.yml/not_null_mart_finance_dashboard_transaction_clearing_status.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_clearing_status\nfrom \"mrzzy\".\"public\".\"mart_finance_dashboard\"\nwhere transaction_clearing_status is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "transaction_clearing_status", "file_key_name": "models.mart_finance_dashboard"}, "test.providence.accepted_values_mart_finance_dashboard_transaction_clearing_status__cleared__uncleared__reconciled.4eeccfbd75": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["cleared", "uncleared", "reconciled"], "column_name": "transaction_clearing_status", "model": "{{ get_where_subquery(ref('mart_finance_dashboard')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "accepted_values_mart_finance_dashboard_transaction_clearing_status__cleared__uncleared__reconciled", "resource_type": "test", "package_name": "providence", "path": "accepted_values_mart_finance_d_6df7ffb95aa065ad1fb746a8e0bb75d0.sql", "original_file_path": "models/marts/finance_dashboard/models.yml", "unique_id": "test.providence.accepted_values_mart_finance_dashboard_transaction_clearing_status__cleared__uncleared__reconciled.4eeccfbd75", "fqn": ["providence", "marts", "finance_dashboard", "accepted_values_mart_finance_dashboard_transaction_clearing_status__cleared__uncleared__reconciled"], "alias": "accepted_values_mart_finance_d_6df7ffb95aa065ad1fb746a8e0bb75d0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_mart_finance_d_6df7ffb95aa065ad1fb746a8e0bb75d0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_mart_finance_d_6df7ffb95aa065ad1fb746a8e0bb75d0"}, "created_at": 1684070076.814799, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_mart_finance_d_6df7ffb95aa065ad1fb746a8e0bb75d0\") }}", "language": "sql", "refs": [["mart_finance_dashboard"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.mart_finance_dashboard"]}, "compiled_path": "target/compiled/providence/models/marts/finance_dashboard/models.yml/accepted_values_mart_finance_d_6df7ffb95aa065ad1fb746a8e0bb75d0.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        transaction_clearing_status as value_field,\n        count(*) as n_records\n\n    from \"mrzzy\".\"public\".\"mart_finance_dashboard\"\n    group by transaction_clearing_status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'cleared','uncleared','reconciled'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "transaction_clearing_status", "file_key_name": "models.mart_finance_dashboard"}, "test.providence.not_null_mart_finance_dashboard_account_is_cash.0a7cd4cd8f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_is_cash", "model": "{{ get_where_subquery(ref('mart_finance_dashboard')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_mart_finance_dashboard_account_is_cash", "resource_type": "test", "package_name": "providence", "path": "not_null_mart_finance_dashboard_account_is_cash.sql", "original_file_path": "models/marts/finance_dashboard/models.yml", "unique_id": "test.providence.not_null_mart_finance_dashboard_account_is_cash.0a7cd4cd8f", "fqn": ["providence", "marts", "finance_dashboard", "not_null_mart_finance_dashboard_account_is_cash"], "alias": "not_null_mart_finance_dashboard_account_is_cash", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.821333, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["mart_finance_dashboard"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.mart_finance_dashboard"]}, "compiled_path": "target/compiled/providence/models/marts/finance_dashboard/models.yml/not_null_mart_finance_dashboard_account_is_cash.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_is_cash\nfrom \"mrzzy\".\"public\".\"mart_finance_dashboard\"\nwhere account_is_cash is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "account_is_cash", "file_key_name": "models.mart_finance_dashboard"}, "test.providence.not_null_mart_finance_dashboard_budget_category_group.71e2c2c6f9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "budget_category_group", "model": "{{ get_where_subquery(ref('mart_finance_dashboard')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_mart_finance_dashboard_budget_category_group", "resource_type": "test", "package_name": "providence", "path": "not_null_mart_finance_dashboard_budget_category_group.sql", "original_file_path": "models/marts/finance_dashboard/models.yml", "unique_id": "test.providence.not_null_mart_finance_dashboard_budget_category_group.71e2c2c6f9", "fqn": ["providence", "marts", "finance_dashboard", "not_null_mart_finance_dashboard_budget_category_group"], "alias": "not_null_mart_finance_dashboard_budget_category_group", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.8234558, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["mart_finance_dashboard"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.mart_finance_dashboard"]}, "compiled_path": "target/compiled/providence/models/marts/finance_dashboard/models.yml/not_null_mart_finance_dashboard_budget_category_group.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect budget_category_group\nfrom \"mrzzy\".\"public\".\"mart_finance_dashboard\"\nwhere budget_category_group is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "budget_category_group", "file_key_name": "models.mart_finance_dashboard"}, "test.providence.not_null_mart_finance_dashboard_budget_category.e4ec9c87e4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "budget_category", "model": "{{ get_where_subquery(ref('mart_finance_dashboard')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_mart_finance_dashboard_budget_category", "resource_type": "test", "package_name": "providence", "path": "not_null_mart_finance_dashboard_budget_category.sql", "original_file_path": "models/marts/finance_dashboard/models.yml", "unique_id": "test.providence.not_null_mart_finance_dashboard_budget_category.e4ec9c87e4", "fqn": ["providence", "marts", "finance_dashboard", "not_null_mart_finance_dashboard_budget_category"], "alias": "not_null_mart_finance_dashboard_budget_category", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.8255377, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["mart_finance_dashboard"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.mart_finance_dashboard"]}, "compiled_path": "target/compiled/providence/models/marts/finance_dashboard/models.yml/not_null_mart_finance_dashboard_budget_category.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect budget_category\nfrom \"mrzzy\".\"public\".\"mart_finance_dashboard\"\nwhere budget_category is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "budget_category", "file_key_name": "models.mart_finance_dashboard"}, "test.providence.not_null_mart_finance_dashboard_budget_is_expense.7aed88128f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "budget_is_expense", "model": "{{ get_where_subquery(ref('mart_finance_dashboard')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_mart_finance_dashboard_budget_is_expense", "resource_type": "test", "package_name": "providence", "path": "not_null_mart_finance_dashboard_budget_is_expense.sql", "original_file_path": "models/marts/finance_dashboard/models.yml", "unique_id": "test.providence.not_null_mart_finance_dashboard_budget_is_expense.7aed88128f", "fqn": ["providence", "marts", "finance_dashboard", "not_null_mart_finance_dashboard_budget_is_expense"], "alias": "not_null_mart_finance_dashboard_budget_is_expense", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.827966, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["mart_finance_dashboard"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.mart_finance_dashboard"]}, "compiled_path": "target/compiled/providence/models/marts/finance_dashboard/models.yml/not_null_mart_finance_dashboard_budget_is_expense.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect budget_is_expense\nfrom \"mrzzy\".\"public\".\"mart_finance_dashboard\"\nwhere budget_is_expense is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "budget_is_expense", "file_key_name": "models.mart_finance_dashboard"}, "test.providence.not_null_mart_finance_dashboard_payee_name.4cd9b29c1e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "payee_name", "model": "{{ get_where_subquery(ref('mart_finance_dashboard')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_mart_finance_dashboard_payee_name", "resource_type": "test", "package_name": "providence", "path": "not_null_mart_finance_dashboard_payee_name.sql", "original_file_path": "models/marts/finance_dashboard/models.yml", "unique_id": "test.providence.not_null_mart_finance_dashboard_payee_name.4cd9b29c1e", "fqn": ["providence", "marts", "finance_dashboard", "not_null_mart_finance_dashboard_payee_name"], "alias": "not_null_mart_finance_dashboard_payee_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.8300664, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["mart_finance_dashboard"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.mart_finance_dashboard"]}, "compiled_path": "target/compiled/providence/models/marts/finance_dashboard/models.yml/not_null_mart_finance_dashboard_payee_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payee_name\nfrom \"mrzzy\".\"public\".\"mart_finance_dashboard\"\nwhere payee_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "payee_name", "file_key_name": "models.mart_finance_dashboard"}, "test.providence.not_null_mart_finance_dashboard_spending.d7b65d1f2a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "spending", "model": "{{ get_where_subquery(ref('mart_finance_dashboard')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_mart_finance_dashboard_spending", "resource_type": "test", "package_name": "providence", "path": "not_null_mart_finance_dashboard_spending.sql", "original_file_path": "models/marts/finance_dashboard/models.yml", "unique_id": "test.providence.not_null_mart_finance_dashboard_spending.d7b65d1f2a", "fqn": ["providence", "marts", "finance_dashboard", "not_null_mart_finance_dashboard_spending"], "alias": "not_null_mart_finance_dashboard_spending", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.8321912, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["mart_finance_dashboard"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.mart_finance_dashboard"]}, "compiled_path": "target/compiled/providence/models/marts/finance_dashboard/models.yml/not_null_mart_finance_dashboard_spending.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect spending\nfrom \"mrzzy\".\"public\".\"mart_finance_dashboard\"\nwhere spending is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "spending", "file_key_name": "models.mart_finance_dashboard"}, "test.providence.dbt_utils_accepted_range_mart_finance_dashboard_spending__0.c6cd9ffb6a": {"test_metadata": {"name": "accepted_range", "kwargs": {"max_value": 0, "column_name": "spending", "model": "{{ get_where_subquery(ref('mart_finance_dashboard')) }}"}, "namespace": "dbt_utils"}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "dbt_utils_accepted_range_mart_finance_dashboard_spending__0", "resource_type": "test", "package_name": "providence", "path": "dbt_utils_accepted_range_mart_finance_dashboard_spending__0.sql", "original_file_path": "models/marts/finance_dashboard/models.yml", "unique_id": "test.providence.dbt_utils_accepted_range_mart_finance_dashboard_spending__0.c6cd9ffb6a", "fqn": ["providence", "marts", "finance_dashboard", "dbt_utils_accepted_range_mart_finance_dashboard_spending__0"], "alias": "dbt_utils_accepted_range_mart_finance_dashboard_spending__0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.8342853, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["mart_finance_dashboard"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.mart_finance_dashboard"]}, "compiled_path": "target/compiled/providence/models/marts/finance_dashboard/models.yml/dbt_utils_accepted_range_mart_finance_dashboard_spending__0.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"mrzzy\".\"public\".\"mart_finance_dashboard\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not spending <= 0\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "spending", "file_key_name": "models.mart_finance_dashboard"}, "test.providence.not_null_mart_finance_dashboard_is_unaccounted.3357c4ad5d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_unaccounted", "model": "{{ get_where_subquery(ref('mart_finance_dashboard')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_mart_finance_dashboard_is_unaccounted", "resource_type": "test", "package_name": "providence", "path": "not_null_mart_finance_dashboard_is_unaccounted.sql", "original_file_path": "models/marts/finance_dashboard/models.yml", "unique_id": "test.providence.not_null_mart_finance_dashboard_is_unaccounted.3357c4ad5d", "fqn": ["providence", "marts", "finance_dashboard", "not_null_mart_finance_dashboard_is_unaccounted"], "alias": "not_null_mart_finance_dashboard_is_unaccounted", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.839256, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["mart_finance_dashboard"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.mart_finance_dashboard"]}, "compiled_path": "target/compiled/providence/models/marts/finance_dashboard/models.yml/not_null_mart_finance_dashboard_is_unaccounted.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect is_unaccounted\nfrom \"mrzzy\".\"public\".\"mart_finance_dashboard\"\nwhere is_unaccounted is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "is_unaccounted", "file_key_name": "models.mart_finance_dashboard"}, "test.providence.not_null_mart_finance_dashboard_income.b8db769c61": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "income", "model": "{{ get_where_subquery(ref('mart_finance_dashboard')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_mart_finance_dashboard_income", "resource_type": "test", "package_name": "providence", "path": "not_null_mart_finance_dashboard_income.sql", "original_file_path": "models/marts/finance_dashboard/models.yml", "unique_id": "test.providence.not_null_mart_finance_dashboard_income.b8db769c61", "fqn": ["providence", "marts", "finance_dashboard", "not_null_mart_finance_dashboard_income"], "alias": "not_null_mart_finance_dashboard_income", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.8413415, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["mart_finance_dashboard"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.mart_finance_dashboard"]}, "compiled_path": "target/compiled/providence/models/marts/finance_dashboard/models.yml/not_null_mart_finance_dashboard_income.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect income\nfrom \"mrzzy\".\"public\".\"mart_finance_dashboard\"\nwhere income is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "income", "file_key_name": "models.mart_finance_dashboard"}, "test.providence.dbt_utils_accepted_range_mart_finance_dashboard_income__0.c3a8aaeda4": {"test_metadata": {"name": "accepted_range", "kwargs": {"min_value": 0, "column_name": "income", "model": "{{ get_where_subquery(ref('mart_finance_dashboard')) }}"}, "namespace": "dbt_utils"}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "dbt_utils_accepted_range_mart_finance_dashboard_income__0", "resource_type": "test", "package_name": "providence", "path": "dbt_utils_accepted_range_mart_finance_dashboard_income__0.sql", "original_file_path": "models/marts/finance_dashboard/models.yml", "unique_id": "test.providence.dbt_utils_accepted_range_mart_finance_dashboard_income__0.c3a8aaeda4", "fqn": ["providence", "marts", "finance_dashboard", "dbt_utils_accepted_range_mart_finance_dashboard_income__0"], "alias": "dbt_utils_accepted_range_mart_finance_dashboard_income__0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.843745, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["mart_finance_dashboard"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.mart_finance_dashboard"]}, "compiled_path": "target/compiled/providence/models/marts/finance_dashboard/models.yml/dbt_utils_accepted_range_mart_finance_dashboard_income__0.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"mrzzy\".\"public\".\"mart_finance_dashboard\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not income >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "income", "file_key_name": "models.mart_finance_dashboard"}, "test.providence.not_null_mart_finance_dashboard_is_passive.a5e0366134": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_passive", "model": "{{ get_where_subquery(ref('mart_finance_dashboard')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_mart_finance_dashboard_is_passive", "resource_type": "test", "package_name": "providence", "path": "not_null_mart_finance_dashboard_is_passive.sql", "original_file_path": "models/marts/finance_dashboard/models.yml", "unique_id": "test.providence.not_null_mart_finance_dashboard_is_passive.a5e0366134", "fqn": ["providence", "marts", "finance_dashboard", "not_null_mart_finance_dashboard_is_passive"], "alias": "not_null_mart_finance_dashboard_is_passive", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.8484352, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["mart_finance_dashboard"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.mart_finance_dashboard"]}, "compiled_path": "target/compiled/providence/models/marts/finance_dashboard/models.yml/not_null_mart_finance_dashboard_is_passive.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect is_passive\nfrom \"mrzzy\".\"public\".\"mart_finance_dashboard\"\nwhere is_passive is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "is_passive", "file_key_name": "models.mart_finance_dashboard"}, "test.providence.not_null_mart_finance_dashboard_cash_flow_year_month.ea793bcf3a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "year_month", "model": "{{ get_where_subquery(ref('mart_finance_dashboard_cash_flow')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_mart_finance_dashboard_cash_flow_year_month", "resource_type": "test", "package_name": "providence", "path": "not_null_mart_finance_dashboard_cash_flow_year_month.sql", "original_file_path": "models/marts/finance_dashboard/models.yml", "unique_id": "test.providence.not_null_mart_finance_dashboard_cash_flow_year_month.ea793bcf3a", "fqn": ["providence", "marts", "finance_dashboard", "not_null_mart_finance_dashboard_cash_flow_year_month"], "alias": "not_null_mart_finance_dashboard_cash_flow_year_month", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.8505206, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["mart_finance_dashboard_cash_flow"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.mart_finance_dashboard_cash_flow"]}, "compiled_path": "target/compiled/providence/models/marts/finance_dashboard/models.yml/not_null_mart_finance_dashboard_cash_flow_year_month.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect year_month\nfrom \"mrzzy\".\"public\".\"mart_finance_dashboard_cash_flow\"\nwhere year_month is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "year_month", "file_key_name": "models.mart_finance_dashboard_cash_flow"}, "test.providence.not_null_mart_finance_dashboard_cash_flow_src.06ff43a6ef": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "src", "model": "{{ get_where_subquery(ref('mart_finance_dashboard_cash_flow')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_mart_finance_dashboard_cash_flow_src", "resource_type": "test", "package_name": "providence", "path": "not_null_mart_finance_dashboard_cash_flow_src.sql", "original_file_path": "models/marts/finance_dashboard/models.yml", "unique_id": "test.providence.not_null_mart_finance_dashboard_cash_flow_src.06ff43a6ef", "fqn": ["providence", "marts", "finance_dashboard", "not_null_mart_finance_dashboard_cash_flow_src"], "alias": "not_null_mart_finance_dashboard_cash_flow_src", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.852941, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["mart_finance_dashboard_cash_flow"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.mart_finance_dashboard_cash_flow"]}, "compiled_path": "target/compiled/providence/models/marts/finance_dashboard/models.yml/not_null_mart_finance_dashboard_cash_flow_src.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect src\nfrom \"mrzzy\".\"public\".\"mart_finance_dashboard_cash_flow\"\nwhere src is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "src", "file_key_name": "models.mart_finance_dashboard_cash_flow"}, "test.providence.not_null_mart_finance_dashboard_cash_flow_dest.fc8696faaf": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "dest", "model": "{{ get_where_subquery(ref('mart_finance_dashboard_cash_flow')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_mart_finance_dashboard_cash_flow_dest", "resource_type": "test", "package_name": "providence", "path": "not_null_mart_finance_dashboard_cash_flow_dest.sql", "original_file_path": "models/marts/finance_dashboard/models.yml", "unique_id": "test.providence.not_null_mart_finance_dashboard_cash_flow_dest.fc8696faaf", "fqn": ["providence", "marts", "finance_dashboard", "not_null_mart_finance_dashboard_cash_flow_dest"], "alias": "not_null_mart_finance_dashboard_cash_flow_dest", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.855033, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["mart_finance_dashboard_cash_flow"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.mart_finance_dashboard_cash_flow"]}, "compiled_path": "target/compiled/providence/models/marts/finance_dashboard/models.yml/not_null_mart_finance_dashboard_cash_flow_dest.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect dest\nfrom \"mrzzy\".\"public\".\"mart_finance_dashboard_cash_flow\"\nwhere dest is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "dest", "file_key_name": "models.mart_finance_dashboard_cash_flow"}, "test.providence.not_null_mart_finance_dashboard_cash_flow_amount.fa4c32a1eb": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "amount", "model": "{{ get_where_subquery(ref('mart_finance_dashboard_cash_flow')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_mart_finance_dashboard_cash_flow_amount", "resource_type": "test", "package_name": "providence", "path": "not_null_mart_finance_dashboard_cash_flow_amount.sql", "original_file_path": "models/marts/finance_dashboard/models.yml", "unique_id": "test.providence.not_null_mart_finance_dashboard_cash_flow_amount.fa4c32a1eb", "fqn": ["providence", "marts", "finance_dashboard", "not_null_mart_finance_dashboard_cash_flow_amount"], "alias": "not_null_mart_finance_dashboard_cash_flow_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.8571227, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["mart_finance_dashboard_cash_flow"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.mart_finance_dashboard_cash_flow"]}, "compiled_path": "target/compiled/providence/models/marts/finance_dashboard/models.yml/not_null_mart_finance_dashboard_cash_flow_amount.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect amount\nfrom \"mrzzy\".\"public\".\"mart_finance_dashboard_cash_flow\"\nwhere amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "amount", "file_key_name": "models.mart_finance_dashboard_cash_flow"}, "test.providence.dbt_utils_accepted_range_mart_finance_dashboard_cash_flow_amount__False__0.aa4c477046": {"test_metadata": {"name": "accepted_range", "kwargs": {"inclusive": false, "min_value": 0, "column_name": "amount", "model": "{{ get_where_subquery(ref('mart_finance_dashboard_cash_flow')) }}"}, "namespace": "dbt_utils"}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "dbt_utils_accepted_range_mart_finance_dashboard_cash_flow_amount__False__0", "resource_type": "test", "package_name": "providence", "path": "dbt_utils_accepted_range_mart__55749d9f6168788bf1424f98a44fdfe0.sql", "original_file_path": "models/marts/finance_dashboard/models.yml", "unique_id": "test.providence.dbt_utils_accepted_range_mart_finance_dashboard_cash_flow_amount__False__0.aa4c477046", "fqn": ["providence", "marts", "finance_dashboard", "dbt_utils_accepted_range_mart_finance_dashboard_cash_flow_amount__False__0"], "alias": "dbt_utils_accepted_range_mart__55749d9f6168788bf1424f98a44fdfe0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_mart__55749d9f6168788bf1424f98a44fdfe0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_accepted_range_mart__55749d9f6168788bf1424f98a44fdfe0"}, "created_at": 1684070076.859238, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_accepted_range_mart__55749d9f6168788bf1424f98a44fdfe0\") }}", "language": "sql", "refs": [["mart_finance_dashboard_cash_flow"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.mart_finance_dashboard_cash_flow"]}, "compiled_path": "target/compiled/providence/models/marts/finance_dashboard/models.yml/dbt_utils_accepted_range_mart__55749d9f6168788bf1424f98a44fdfe0.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"mrzzy\".\"public\".\"mart_finance_dashboard_cash_flow\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not amount > 0\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "amount", "file_key_name": "models.mart_finance_dashboard_cash_flow"}, "test.providence.not_null_mart_finance_dashboard_uncleared_transaction_date.efabc12149": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_date", "model": "{{ get_where_subquery(ref('mart_finance_dashboard_uncleared')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_mart_finance_dashboard_uncleared_transaction_date", "resource_type": "test", "package_name": "providence", "path": "not_null_mart_finance_dashboard_uncleared_transaction_date.sql", "original_file_path": "models/marts/finance_dashboard/models.yml", "unique_id": "test.providence.not_null_mart_finance_dashboard_uncleared_transaction_date.efabc12149", "fqn": ["providence", "marts", "finance_dashboard", "not_null_mart_finance_dashboard_uncleared_transaction_date"], "alias": "not_null_mart_finance_dashboard_uncleared_transaction_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.8644357, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["mart_finance_dashboard_uncleared"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.mart_finance_dashboard_uncleared"]}, "compiled_path": "target/compiled/providence/models/marts/finance_dashboard/models.yml/not_null_mart_finance_dashboard_uncleared_transaction_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_date\nfrom \"mrzzy\".\"public\".\"mart_finance_dashboard_uncleared\"\nwhere transaction_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "transaction_date", "file_key_name": "models.mart_finance_dashboard_uncleared"}, "test.providence.not_null_mart_finance_dashboard_uncleared_transaction_amount.1b84e894dc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_amount", "model": "{{ get_where_subquery(ref('mart_finance_dashboard_uncleared')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_mart_finance_dashboard_uncleared_transaction_amount", "resource_type": "test", "package_name": "providence", "path": "not_null_mart_finance_dashboard_uncleared_transaction_amount.sql", "original_file_path": "models/marts/finance_dashboard/models.yml", "unique_id": "test.providence.not_null_mart_finance_dashboard_uncleared_transaction_amount.1b84e894dc", "fqn": ["providence", "marts", "finance_dashboard", "not_null_mart_finance_dashboard_uncleared_transaction_amount"], "alias": "not_null_mart_finance_dashboard_uncleared_transaction_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.8665254, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["mart_finance_dashboard_uncleared"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.mart_finance_dashboard_uncleared"]}, "compiled_path": "target/compiled/providence/models/marts/finance_dashboard/models.yml/not_null_mart_finance_dashboard_uncleared_transaction_amount.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_amount\nfrom \"mrzzy\".\"public\".\"mart_finance_dashboard_uncleared\"\nwhere transaction_amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "transaction_amount", "file_key_name": "models.mart_finance_dashboard_uncleared"}, "test.providence.not_null_mart_finance_dashboard_uncleared_in_accounting.fec8bb6204": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "in_accounting", "model": "{{ get_where_subquery(ref('mart_finance_dashboard_uncleared')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_mart_finance_dashboard_uncleared_in_accounting", "resource_type": "test", "package_name": "providence", "path": "not_null_mart_finance_dashboard_uncleared_in_accounting.sql", "original_file_path": "models/marts/finance_dashboard/models.yml", "unique_id": "test.providence.not_null_mart_finance_dashboard_uncleared_in_accounting.fec8bb6204", "fqn": ["providence", "marts", "finance_dashboard", "not_null_mart_finance_dashboard_uncleared_in_accounting"], "alias": "not_null_mart_finance_dashboard_uncleared_in_accounting", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.8693576, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["mart_finance_dashboard_uncleared"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.mart_finance_dashboard_uncleared"]}, "compiled_path": "target/compiled/providence/models/marts/finance_dashboard/models.yml/not_null_mart_finance_dashboard_uncleared_in_accounting.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect in_accounting\nfrom \"mrzzy\".\"public\".\"mart_finance_dashboard_uncleared\"\nwhere in_accounting is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "in_accounting", "file_key_name": "models.mart_finance_dashboard_uncleared"}, "test.providence.not_null_mart_finance_dashboard_uncleared_in_vendor.74fbe73720": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "in_vendor", "model": "{{ get_where_subquery(ref('mart_finance_dashboard_uncleared')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_mart_finance_dashboard_uncleared_in_vendor", "resource_type": "test", "package_name": "providence", "path": "not_null_mart_finance_dashboard_uncleared_in_vendor.sql", "original_file_path": "models/marts/finance_dashboard/models.yml", "unique_id": "test.providence.not_null_mart_finance_dashboard_uncleared_in_vendor.74fbe73720", "fqn": ["providence", "marts", "finance_dashboard", "not_null_mart_finance_dashboard_uncleared_in_vendor"], "alias": "not_null_mart_finance_dashboard_uncleared_in_vendor", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.8714437, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["mart_finance_dashboard_uncleared"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.mart_finance_dashboard_uncleared"]}, "compiled_path": "target/compiled/providence/models/marts/finance_dashboard/models.yml/not_null_mart_finance_dashboard_uncleared_in_vendor.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect in_vendor\nfrom \"mrzzy\".\"public\".\"mart_finance_dashboard_uncleared\"\nwhere in_vendor is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "in_vendor", "file_key_name": "models.mart_finance_dashboard_uncleared"}, "test.providence.not_null_mart_ynab_sink_import_id.6d078e189e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "import_id", "model": "{{ get_where_subquery(ref('mart_ynab_sink')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_mart_ynab_sink_import_id", "resource_type": "test", "package_name": "providence", "path": "not_null_mart_ynab_sink_import_id.sql", "original_file_path": "models/marts/ynab_sink/models.yml", "unique_id": "test.providence.not_null_mart_ynab_sink_import_id.6d078e189e", "fqn": ["providence", "marts", "ynab_sink", "not_null_mart_ynab_sink_import_id"], "alias": "not_null_mart_ynab_sink_import_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.880475, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["mart_ynab_sink"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.mart_ynab_sink"]}, "compiled_path": "target/compiled/providence/models/marts/ynab_sink/models.yml/not_null_mart_ynab_sink_import_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect import_id\nfrom \"mrzzy\".\"public\".\"mart_ynab_sink\"\nwhere import_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "import_id", "file_key_name": "models.mart_ynab_sink"}, "test.providence.unique_mart_ynab_sink_import_id.65f58d2771": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "import_id", "model": "{{ get_where_subquery(ref('mart_ynab_sink')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "unique_mart_ynab_sink_import_id", "resource_type": "test", "package_name": "providence", "path": "unique_mart_ynab_sink_import_id.sql", "original_file_path": "models/marts/ynab_sink/models.yml", "unique_id": "test.providence.unique_mart_ynab_sink_import_id.65f58d2771", "fqn": ["providence", "marts", "ynab_sink", "unique_mart_ynab_sink_import_id"], "alias": "unique_mart_ynab_sink_import_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.88261, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["mart_ynab_sink"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.mart_ynab_sink"]}, "compiled_path": "target/compiled/providence/models/marts/ynab_sink/models.yml/unique_mart_ynab_sink_import_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    import_id as unique_field,\n    count(*) as n_records\n\nfrom \"mrzzy\".\"public\".\"mart_ynab_sink\"\nwhere import_id is not null\ngroup by import_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "import_id", "file_key_name": "models.mart_ynab_sink"}, "test.providence.not_null_mart_ynab_sink_account_id.2b2c80b8ea": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('mart_ynab_sink')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_mart_ynab_sink_account_id", "resource_type": "test", "package_name": "providence", "path": "not_null_mart_ynab_sink_account_id.sql", "original_file_path": "models/marts/ynab_sink/models.yml", "unique_id": "test.providence.not_null_mart_ynab_sink_account_id.2b2c80b8ea", "fqn": ["providence", "marts", "ynab_sink", "not_null_mart_ynab_sink_account_id"], "alias": "not_null_mart_ynab_sink_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.884695, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["mart_ynab_sink"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.mart_ynab_sink"]}, "compiled_path": "target/compiled/providence/models/marts/ynab_sink/models.yml/not_null_mart_ynab_sink_account_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom \"mrzzy\".\"public\".\"mart_ynab_sink\"\nwhere account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "account_id", "file_key_name": "models.mart_ynab_sink"}, "test.providence.relationships_mart_ynab_sink_account_id__id__ref_stg_ynab_account_.e853f9c233": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref(\"stg_ynab_account\")", "field": "id", "column_name": "account_id", "model": "{{ get_where_subquery(ref('mart_ynab_sink')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "relationships_mart_ynab_sink_account_id__id__ref_stg_ynab_account_", "resource_type": "test", "package_name": "providence", "path": "relationships_mart_ynab_sink_804e8b1c5cb716e2e82d70deef3471cf.sql", "original_file_path": "models/marts/ynab_sink/models.yml", "unique_id": "test.providence.relationships_mart_ynab_sink_account_id__id__ref_stg_ynab_account_.e853f9c233", "fqn": ["providence", "marts", "ynab_sink", "relationships_mart_ynab_sink_account_id__id__ref_stg_ynab_account_"], "alias": "relationships_mart_ynab_sink_804e8b1c5cb716e2e82d70deef3471cf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_mart_ynab_sink_804e8b1c5cb716e2e82d70deef3471cf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_mart_ynab_sink_804e8b1c5cb716e2e82d70deef3471cf"}, "created_at": 1684070076.8870788, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_mart_ynab_sink_804e8b1c5cb716e2e82d70deef3471cf\") }}", "language": "sql", "refs": [["stg_ynab_account"], ["mart_ynab_sink"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_account", "model.providence.mart_ynab_sink"]}, "compiled_path": "target/compiled/providence/models/marts/ynab_sink/models.yml/relationships_mart_ynab_sink_804e8b1c5cb716e2e82d70deef3471cf.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select account_id as from_field\n    from \"mrzzy\".\"public\".\"mart_ynab_sink\"\n    where account_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"mrzzy\".\"public\".\"stg_ynab_account\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "account_id", "file_key_name": "models.mart_ynab_sink"}, "test.providence.not_null_mart_ynab_sink_amount.75f39d0a0d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "amount", "model": "{{ get_where_subquery(ref('mart_ynab_sink')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_mart_ynab_sink_amount", "resource_type": "test", "package_name": "providence", "path": "not_null_mart_ynab_sink_amount.sql", "original_file_path": "models/marts/ynab_sink/models.yml", "unique_id": "test.providence.not_null_mart_ynab_sink_amount.75f39d0a0d", "fqn": ["providence", "marts", "ynab_sink", "not_null_mart_ynab_sink_amount"], "alias": "not_null_mart_ynab_sink_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.8930604, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["mart_ynab_sink"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.mart_ynab_sink"]}, "compiled_path": "target/compiled/providence/models/marts/ynab_sink/models.yml/not_null_mart_ynab_sink_amount.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect amount\nfrom \"mrzzy\".\"public\".\"mart_ynab_sink\"\nwhere amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "amount", "file_key_name": "models.mart_ynab_sink"}, "test.providence.not_null_mart_ynab_sink_payee_id.026a9c67e0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "payee_id", "model": "{{ get_where_subquery(ref('mart_ynab_sink')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_mart_ynab_sink_payee_id", "resource_type": "test", "package_name": "providence", "path": "not_null_mart_ynab_sink_payee_id.sql", "original_file_path": "models/marts/ynab_sink/models.yml", "unique_id": "test.providence.not_null_mart_ynab_sink_payee_id.026a9c67e0", "fqn": ["providence", "marts", "ynab_sink", "not_null_mart_ynab_sink_payee_id"], "alias": "not_null_mart_ynab_sink_payee_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.8954406, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["mart_ynab_sink"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.mart_ynab_sink"]}, "compiled_path": "target/compiled/providence/models/marts/ynab_sink/models.yml/not_null_mart_ynab_sink_payee_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payee_id\nfrom \"mrzzy\".\"public\".\"mart_ynab_sink\"\nwhere payee_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "payee_id", "file_key_name": "models.mart_ynab_sink"}, "test.providence.relationships_mart_ynab_sink_payee_id__id__ref_stg_ynab_payee_.84cf2f46ae": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref(\"stg_ynab_payee\")", "field": "id", "column_name": "payee_id", "model": "{{ get_where_subquery(ref('mart_ynab_sink')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "relationships_mart_ynab_sink_payee_id__id__ref_stg_ynab_payee_", "resource_type": "test", "package_name": "providence", "path": "relationships_mart_ynab_sink_payee_id__id__ref_stg_ynab_payee_.sql", "original_file_path": "models/marts/ynab_sink/models.yml", "unique_id": "test.providence.relationships_mart_ynab_sink_payee_id__id__ref_stg_ynab_payee_.84cf2f46ae", "fqn": ["providence", "marts", "ynab_sink", "relationships_mart_ynab_sink_payee_id__id__ref_stg_ynab_payee_"], "alias": "relationships_mart_ynab_sink_payee_id__id__ref_stg_ynab_payee_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.8975246, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_ynab_payee"], ["mart_ynab_sink"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_payee", "model.providence.mart_ynab_sink"]}, "compiled_path": "target/compiled/providence/models/marts/ynab_sink/models.yml/relationships_mart_ynab_sink_payee_id__id__ref_stg_ynab_payee_.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select payee_id as from_field\n    from \"mrzzy\".\"public\".\"mart_ynab_sink\"\n    where payee_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"mrzzy\".\"public\".\"stg_ynab_payee\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "payee_id", "file_key_name": "models.mart_ynab_sink"}, "test.providence.not_null_mart_ynab_sink_category_id.53e2258bb5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "category_id", "model": "{{ get_where_subquery(ref('mart_ynab_sink')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_mart_ynab_sink_category_id", "resource_type": "test", "package_name": "providence", "path": "not_null_mart_ynab_sink_category_id.sql", "original_file_path": "models/marts/ynab_sink/models.yml", "unique_id": "test.providence.not_null_mart_ynab_sink_category_id.53e2258bb5", "fqn": ["providence", "marts", "ynab_sink", "not_null_mart_ynab_sink_category_id"], "alias": "not_null_mart_ynab_sink_category_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.9034204, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["mart_ynab_sink"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.mart_ynab_sink"]}, "compiled_path": "target/compiled/providence/models/marts/ynab_sink/models.yml/not_null_mart_ynab_sink_category_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect category_id\nfrom \"mrzzy\".\"public\".\"mart_ynab_sink\"\nwhere category_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "category_id", "file_key_name": "models.mart_ynab_sink"}, "test.providence.relationships_mart_ynab_sink_category_id__id__ref_stg_ynab_budget_category_.1a96b31a48": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref(\"stg_ynab_budget_category\")", "field": "id", "column_name": "category_id", "model": "{{ get_where_subquery(ref('mart_ynab_sink')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "relationships_mart_ynab_sink_category_id__id__ref_stg_ynab_budget_category_", "resource_type": "test", "package_name": "providence", "path": "relationships_mart_ynab_sink_0b171d572c9eac2e4682834e5c77f480.sql", "original_file_path": "models/marts/ynab_sink/models.yml", "unique_id": "test.providence.relationships_mart_ynab_sink_category_id__id__ref_stg_ynab_budget_category_.1a96b31a48", "fqn": ["providence", "marts", "ynab_sink", "relationships_mart_ynab_sink_category_id__id__ref_stg_ynab_budget_category_"], "alias": "relationships_mart_ynab_sink_0b171d572c9eac2e4682834e5c77f480", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_mart_ynab_sink_0b171d572c9eac2e4682834e5c77f480", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_mart_ynab_sink_0b171d572c9eac2e4682834e5c77f480"}, "created_at": 1684070076.9055395, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_mart_ynab_sink_0b171d572c9eac2e4682834e5c77f480\") }}", "language": "sql", "refs": [["stg_ynab_budget_category"], ["mart_ynab_sink"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_budget_category", "model.providence.mart_ynab_sink"]}, "compiled_path": "target/compiled/providence/models/marts/ynab_sink/models.yml/relationships_mart_ynab_sink_0b171d572c9eac2e4682834e5c77f480.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select category_id as from_field\n    from \"mrzzy\".\"public\".\"mart_ynab_sink\"\n    where category_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"mrzzy\".\"public\".\"stg_ynab_budget_category\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "category_id", "file_key_name": "models.mart_ynab_sink"}, "test.providence.not_null_mart_ynab_sink_cleared.92a7e7959b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "cleared", "model": "{{ get_where_subquery(ref('mart_ynab_sink')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_mart_ynab_sink_cleared", "resource_type": "test", "package_name": "providence", "path": "not_null_mart_ynab_sink_cleared.sql", "original_file_path": "models/marts/ynab_sink/models.yml", "unique_id": "test.providence.not_null_mart_ynab_sink_cleared.92a7e7959b", "fqn": ["providence", "marts", "ynab_sink", "not_null_mart_ynab_sink_cleared"], "alias": "not_null_mart_ynab_sink_cleared", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.9117582, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["mart_ynab_sink"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.mart_ynab_sink"]}, "compiled_path": "target/compiled/providence/models/marts/ynab_sink/models.yml/not_null_mart_ynab_sink_cleared.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cleared\nfrom \"mrzzy\".\"public\".\"mart_ynab_sink\"\nwhere cleared is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "cleared", "file_key_name": "models.mart_ynab_sink"}, "test.providence.accepted_values_mart_ynab_sink_cleared__cleared__uncleared__reconciled.3f6aab68ab": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["cleared", "uncleared", "reconciled"], "column_name": "cleared", "model": "{{ get_where_subquery(ref('mart_ynab_sink')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "accepted_values_mart_ynab_sink_cleared__cleared__uncleared__reconciled", "resource_type": "test", "package_name": "providence", "path": "accepted_values_mart_ynab_sink_591e2c6138385383087cbe7883877cd5.sql", "original_file_path": "models/marts/ynab_sink/models.yml", "unique_id": "test.providence.accepted_values_mart_ynab_sink_cleared__cleared__uncleared__reconciled.3f6aab68ab", "fqn": ["providence", "marts", "ynab_sink", "accepted_values_mart_ynab_sink_cleared__cleared__uncleared__reconciled"], "alias": "accepted_values_mart_ynab_sink_591e2c6138385383087cbe7883877cd5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_mart_ynab_sink_591e2c6138385383087cbe7883877cd5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_mart_ynab_sink_591e2c6138385383087cbe7883877cd5"}, "created_at": 1684070076.9138534, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_mart_ynab_sink_591e2c6138385383087cbe7883877cd5\") }}", "language": "sql", "refs": [["mart_ynab_sink"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.mart_ynab_sink"]}, "compiled_path": "target/compiled/providence/models/marts/ynab_sink/models.yml/accepted_values_mart_ynab_sink_591e2c6138385383087cbe7883877cd5.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        cleared as value_field,\n        count(*) as n_records\n\n    from \"mrzzy\".\"public\".\"mart_ynab_sink\"\n    group by cleared\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'cleared','uncleared','reconciled'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "cleared", "file_key_name": "models.mart_ynab_sink"}, "test.providence.not_null_mart_ynab_sink_approved.b0f3417c9c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "approved", "model": "{{ get_where_subquery(ref('mart_ynab_sink')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_mart_ynab_sink_approved", "resource_type": "test", "package_name": "providence", "path": "not_null_mart_ynab_sink_approved.sql", "original_file_path": "models/marts/ynab_sink/models.yml", "unique_id": "test.providence.not_null_mart_ynab_sink_approved.b0f3417c9c", "fqn": ["providence", "marts", "ynab_sink", "not_null_mart_ynab_sink_approved"], "alias": "not_null_mart_ynab_sink_approved", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.9202082, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["mart_ynab_sink"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.mart_ynab_sink"]}, "compiled_path": "target/compiled/providence/models/marts/ynab_sink/models.yml/not_null_mart_ynab_sink_approved.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect approved\nfrom \"mrzzy\".\"public\".\"mart_ynab_sink\"\nwhere approved is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "approved", "file_key_name": "models.mart_ynab_sink"}, "test.providence.accepted_values_mart_ynab_sink_approved__True__False.3528c7cffd": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": [true, false], "column_name": "approved", "model": "{{ get_where_subquery(ref('mart_ynab_sink')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "accepted_values_mart_ynab_sink_approved__True__False", "resource_type": "test", "package_name": "providence", "path": "accepted_values_mart_ynab_sink_approved__True__False.sql", "original_file_path": "models/marts/ynab_sink/models.yml", "unique_id": "test.providence.accepted_values_mart_ynab_sink_approved__True__False.3528c7cffd", "fqn": ["providence", "marts", "ynab_sink", "accepted_values_mart_ynab_sink_approved__True__False"], "alias": "accepted_values_mart_ynab_sink_approved__True__False", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.9222913, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["mart_ynab_sink"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.mart_ynab_sink"]}, "compiled_path": "target/compiled/providence/models/marts/ynab_sink/models.yml/accepted_values_mart_ynab_sink_approved__True__False.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        approved as value_field,\n        count(*) as n_records\n\n    from \"mrzzy\".\"public\".\"mart_ynab_sink\"\n    group by approved\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'True','False'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "approved", "file_key_name": "models.mart_ynab_sink"}, "test.providence.relationships_mart_ynab_sink_split_payee_id__id__ref_stg_ynab_payee_.badb4d2855": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref(\"stg_ynab_payee\")", "field": "id", "column_name": "split_payee_id", "model": "{{ get_where_subquery(ref('mart_ynab_sink')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "relationships_mart_ynab_sink_split_payee_id__id__ref_stg_ynab_payee_", "resource_type": "test", "package_name": "providence", "path": "relationships_mart_ynab_sink_83e6c90b8887c329267ce9c68464b42f.sql", "original_file_path": "models/marts/ynab_sink/models.yml", "unique_id": "test.providence.relationships_mart_ynab_sink_split_payee_id__id__ref_stg_ynab_payee_.badb4d2855", "fqn": ["providence", "marts", "ynab_sink", "relationships_mart_ynab_sink_split_payee_id__id__ref_stg_ynab_payee_"], "alias": "relationships_mart_ynab_sink_83e6c90b8887c329267ce9c68464b42f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_mart_ynab_sink_83e6c90b8887c329267ce9c68464b42f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_mart_ynab_sink_83e6c90b8887c329267ce9c68464b42f"}, "created_at": 1684070076.927066, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_mart_ynab_sink_83e6c90b8887c329267ce9c68464b42f\") }}", "language": "sql", "refs": [["stg_ynab_payee"], ["mart_ynab_sink"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_payee", "model.providence.mart_ynab_sink"]}, "compiled_path": "target/compiled/providence/models/marts/ynab_sink/models.yml/relationships_mart_ynab_sink_83e6c90b8887c329267ce9c68464b42f.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select split_payee_id as from_field\n    from \"mrzzy\".\"public\".\"mart_ynab_sink\"\n    where split_payee_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"mrzzy\".\"public\".\"stg_ynab_payee\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "split_payee_id", "file_key_name": "models.mart_ynab_sink"}, "test.providence.dbt_utils_expression_is_true_mart_ynab_sink_length_import_id_36.38cb3a771e": {"test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "length(import_id)<= 36", "model": "{{ get_where_subquery(ref('mart_ynab_sink')) }}"}, "namespace": "dbt_utils"}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "dbt_utils_expression_is_true_mart_ynab_sink_length_import_id_36", "resource_type": "test", "package_name": "providence", "path": "dbt_utils_expression_is_true_mart_ynab_sink_length_import_id_36.sql", "original_file_path": "models/marts/ynab_sink/models.yml", "unique_id": "test.providence.dbt_utils_expression_is_true_mart_ynab_sink_length_import_id_36.38cb3a771e", "fqn": ["providence", "marts", "ynab_sink", "dbt_utils_expression_is_true_mart_ynab_sink_length_import_id_36"], "alias": "dbt_utils_expression_is_true_mart_ynab_sink_length_import_id_36", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.9331932, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["mart_ynab_sink"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.mart_ynab_sink"]}, "compiled_path": "target/compiled/providence/models/marts/ynab_sink/models.yml/dbt_utils_expression_is_true_mart_ynab_sink_length_import_id_36.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"mrzzy\".\"public\".\"mart_ynab_sink\"\n\nwhere not(length(import_id)<= 36)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.mart_ynab_sink"}, "test.providence.not_null_ynab_payee_flag_payee_id.f87d99fc97": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "payee_id", "model": "{{ get_where_subquery(ref('ynab_payee_flag')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_ynab_payee_flag_payee_id", "resource_type": "test", "package_name": "providence", "path": "not_null_ynab_payee_flag_payee_id.sql", "original_file_path": "seeds/seeds.yml", "unique_id": "test.providence.not_null_ynab_payee_flag_payee_id.f87d99fc97", "fqn": ["providence", "not_null_ynab_payee_flag_payee_id"], "alias": "not_null_ynab_payee_flag_payee_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.944288, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["ynab_payee_flag"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.providence.ynab_payee_flag"]}, "compiled_path": "target/compiled/providence/seeds/seeds.yml/not_null_ynab_payee_flag_payee_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payee_id\nfrom \"mrzzy\".\"public\".\"ynab_payee_flag\"\nwhere payee_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "payee_id", "file_key_name": "seeds.ynab_payee_flag"}, "test.providence.relationships_ynab_payee_flag_payee_id__id__ref_stg_ynab_payee_.29b3512f64": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref(\"stg_ynab_payee\")", "field": "id", "column_name": "payee_id", "model": "{{ get_where_subquery(ref('ynab_payee_flag')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "relationships_ynab_payee_flag_payee_id__id__ref_stg_ynab_payee_", "resource_type": "test", "package_name": "providence", "path": "relationships_ynab_payee_flag_payee_id__id__ref_stg_ynab_payee_.sql", "original_file_path": "seeds/seeds.yml", "unique_id": "test.providence.relationships_ynab_payee_flag_payee_id__id__ref_stg_ynab_payee_.29b3512f64", "fqn": ["providence", "relationships_ynab_payee_flag_payee_id__id__ref_stg_ynab_payee_"], "alias": "relationships_ynab_payee_flag_payee_id__id__ref_stg_ynab_payee_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.946697, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_ynab_payee"], ["ynab_payee_flag"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.providence.stg_ynab_payee", "seed.providence.ynab_payee_flag"]}, "compiled_path": "target/compiled/providence/seeds/seeds.yml/relationships_ynab_payee_flag_payee_id__id__ref_stg_ynab_payee_.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select payee_id as from_field\n    from \"mrzzy\".\"public\".\"ynab_payee_flag\"\n    where payee_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"mrzzy\".\"public\".\"stg_ynab_payee\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "payee_id", "file_key_name": "seeds.ynab_payee_flag"}, "test.providence.not_null_ynab_payee_flag_is_unaccounted.56254e5476": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_unaccounted", "model": "{{ get_where_subquery(ref('ynab_payee_flag')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_ynab_payee_flag_is_unaccounted", "resource_type": "test", "package_name": "providence", "path": "not_null_ynab_payee_flag_is_unaccounted.sql", "original_file_path": "seeds/seeds.yml", "unique_id": "test.providence.not_null_ynab_payee_flag_is_unaccounted.56254e5476", "fqn": ["providence", "not_null_ynab_payee_flag_is_unaccounted"], "alias": "not_null_ynab_payee_flag_is_unaccounted", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.952267, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["ynab_payee_flag"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.providence.ynab_payee_flag"]}, "compiled_path": "target/compiled/providence/seeds/seeds.yml/not_null_ynab_payee_flag_is_unaccounted.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect is_unaccounted\nfrom \"mrzzy\".\"public\".\"ynab_payee_flag\"\nwhere is_unaccounted is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "is_unaccounted", "file_key_name": "seeds.ynab_payee_flag"}, "test.providence.not_null_ynab_payee_flag_is_passive.1faee07e8d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_passive", "model": "{{ get_where_subquery(ref('ynab_payee_flag')) }}"}, "namespace": null}, "database": "mrzzy", "schema": "public_dbt_test__audit", "name": "not_null_ynab_payee_flag_is_passive", "resource_type": "test", "package_name": "providence", "path": "not_null_ynab_payee_flag_is_passive.sql", "original_file_path": "seeds/seeds.yml", "unique_id": "test.providence.not_null_ynab_payee_flag_is_passive.1faee07e8d", "fqn": ["providence", "not_null_ynab_payee_flag_is_passive"], "alias": "not_null_ynab_payee_flag_is_passive", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1684070076.9546325, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["ynab_payee_flag"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.providence.ynab_payee_flag"]}, "compiled_path": "target/compiled/providence/seeds/seeds.yml/not_null_ynab_payee_flag_is_passive.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect is_passive\nfrom \"mrzzy\".\"public\".\"ynab_payee_flag\"\nwhere is_passive is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "is_passive", "file_key_name": "seeds.ynab_payee_flag"}}, "sources": {"source.providence.uob.source_uob": {"database": "mrzzy", "schema": "lake", "name": "source_uob", "resource_type": "source", "package_name": "providence", "path": "models/staging/spectrum/uob/sources.yml", "original_file_path": "models/staging/spectrum/uob/sources.yml", "unique_id": "source.providence.uob.source_uob", "fqn": ["providence", "staging", "spectrum", "uob", "uob", "source_uob"], "source_name": "uob", "source_description": "UOB Bank statement export stored on AWS S3 data lake.", "loader": "", "identifier": "source_uob", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "cast(_pandas_etl_transformed_on as timestamp)", "freshness": {"warn_after": {"count": 7, "period": "day"}, "error_after": {"count": 8, "period": "day"}, "filter": null}, "external": null, "description": "UOB Bank statement export.", "columns": {"transaction date": {"name": "transaction date", "description": "Date the bank transaction was made.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction description": {"name": "transaction description", "description": "Description of the bank transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "withdrawal": {"name": "withdrawal", "description": "How much was withdrawn from the bank account by the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deposit": {"name": "deposit", "description": "How much was deposited into from the bank account by the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "available balance": {"name": "available balance", "description": "Balance of the bank account available for use.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account number": {"name": "account number", "description": "Bank account no.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account type": {"name": "account type", "description": "Bank account type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "statement period": {"name": "statement period", "description": "Date range in which the bank statement covers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Bank account currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_pandas_etl_transformed_on": {"name": "_pandas_etl_transformed_on", "description": "Timestamp when the bank transactions were extracted from the UOB Excel export in the UTC timezone.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"mrzzy\".\"lake\".\"source_uob\"", "created_at": 1684070076.9570036}, "source.providence.simplygo.source_simplygo": {"database": "mrzzy", "schema": "lake", "name": "source_simplygo", "resource_type": "source", "package_name": "providence", "path": "models/staging/spectrum/simplygo/sources.yml", "original_file_path": "models/staging/spectrum/simplygo/sources.yml", "unique_id": "source.providence.simplygo.source_simplygo", "fqn": ["providence", "staging", "spectrum", "simplygo", "simplygo", "source_simplygo"], "source_name": "simplygo", "source_description": "Public transport data scraped from SimplyGo on AWS S3 data lake.", "loader": "", "identifier": "source_simplygo", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "convert_timezone('SGT', 'UTC', cast(scraped_on as timestamp))", "freshness": {"warn_after": {"count": 1, "period": "day"}, "error_after": {"count": 2, "period": "day"}, "filter": null}, "external": null, "description": "Public transport trips data scraped from SimplyGo.", "columns": {"scraped_on": {"name": "scraped_on", "description": "Timestamp when the data was scraped in Asia/Singapore timezone.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cards": {"name": "cards", "description": "Bank cards registered on SimplyGo.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "trips_from": {"name": "trips_from", "description": "Date of the start of the time period on Trips were scraped.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "trips_to": {"name": "trips_to", "description": "Date of the end of the time period on Trips were scraped.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "trips": {"name": "trips", "description": "Public transport trips scraped from SimplyGo for the specified time period.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"mrzzy\".\"lake\".\"source_simplygo\"", "created_at": 1684070076.957307}, "source.providence.ynab.source_ynab": {"database": "mrzzy", "schema": "lake", "name": "source_ynab", "resource_type": "source", "package_name": "providence", "path": "models/staging/spectrum/ynab/sources.yml", "original_file_path": "models/staging/spectrum/ynab/sources.yml", "unique_id": "source.providence.ynab.source_ynab", "fqn": ["providence", "staging", "spectrum", "ynab", "ynab", "source_ynab"], "source_name": "ynab", "source_description": "YNAB accounting software data export on AWS S3 data lake.", "loader": "", "identifier": "source_ynab", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "cast(_ynab_src_scraped_on as timestamp)", "freshness": {"warn_after": {"count": 1, "period": "day"}, "error_after": {"count": 2, "period": "day"}, "filter": null}, "external": null, "description": "YNAB accounting software data export.", "columns": {"id": {"name": "id", "description": "YNAB assigned budget id.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the budget", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accounts": {"name": "accounts", "description": "List of Budget accounts.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "categories": {"name": "categories", "description": "List of Budget categories.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category_groups": {"name": "category_groups", "description": "List of Budget category groupings.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_format": {"name": "currency_format", "description": "Budget currency format configuration.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_format": {"name": "date_format", "description": "Budget date format configuration.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_month": {"name": "first_month", "description": "The first year-month the budget accounted for.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_on": {"name": "last_modified_on", "description": "Timestamp the was Budget last modified on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_month": {"name": "last_month", "description": "The last year-month the budget accounted for.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "months": {"name": "months", "description": "List of Monthly Budget allocation data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payee_locations": {"name": "payee_locations", "description": "List of Payee location coordinates", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payees": {"name": "payees", "description": "List of Payee information", "meta": {}, "data_type": null, "quote": null, "tags": []}, "scheduled_subtransactions": {"name": "scheduled_subtransactions", "description": "List of scheduled transactions", "meta": {}, "data_type": null, "quote": null, "tags": []}, "scheduled_transactions": {"name": "scheduled_transactions", "description": "List of scheduled subtransactions", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subtransactions": {"name": "subtransactions", "description": "List of subtransactions", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transactions": {"name": "transactions", "description": "List of transactions", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_ynab_src_scraped_on": {"name": "_ynab_src_scraped_on", "description": "Timestamp when the data was scraped in UTC timezone.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"mrzzy\".\"lake\".\"source_ynab\"", "created_at": 1684070076.957598}, "source.providence.mapping.map_account": {"database": "mrzzy", "schema": "public", "name": "map_account", "resource_type": "source", "package_name": "providence", "path": "models/staging/native/sources.yml", "original_file_path": "models/staging/native/sources.yml", "unique_id": "source.providence.mapping.map_account", "fqn": ["providence", "staging", "native", "mapping", "map_account"], "source_name": "mapping", "source_description": "Manually crafted mappings ingested as AWS Redshift tables. Allows allows otherwise unrelated data from disparate sources to be joined via a manual mapping.", "loader": "", "identifier": "map_account", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Mapping of YNAB budget account IDs to vendor-specific account IDs", "columns": {"budget_account_id": {"name": "budget_account_id", "description": "YNAB Budget Account ID to associate with Vendor account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor": {"name": "vendor", "description": "Vendor hosting the vendor account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor_id": {"name": "vendor_id", "description": "Vendor assigned account ID to associate with the YNAB Budget account.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"mrzzy\".\"public\".\"map_account\"", "created_at": 1684070076.957841}, "source.providence.mapping.map_bank_card": {"database": "mrzzy", "schema": "public", "name": "map_bank_card", "resource_type": "source", "package_name": "providence", "path": "models/staging/native/sources.yml", "original_file_path": "models/staging/native/sources.yml", "unique_id": "source.providence.mapping.map_bank_card", "fqn": ["providence", "staging", "native", "mapping", "map_bank_card"], "source_name": "mapping", "source_description": "Manually crafted mappings ingested as AWS Redshift tables. Allows allows otherwise unrelated data from disparate sources to be joined via a manual mapping.", "loader": "", "identifier": "map_bank_card", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Mapping of to SimplyGo Bank Card IDs to vendor-specific account IDs", "columns": {"budget_account_id": {"name": "budget_account_id", "description": "SimplyGo assigned Bank Card ID to associate with Vendor account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor": {"name": "vendor", "description": "Vendor hosting the Vendor account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor_id": {"name": "vendor_id", "description": "Vendor assigned account ID to associate with the Bank Card.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"mrzzy\".\"public\".\"map_bank_card\"", "created_at": 1684070076.9580762}}, "macros": {"macro.providence.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "providence", "path": "macros/deduplicate.sql", "original_file_path": "macros/deduplicate.sql", "unique_id": "macro.providence.deduplicate", "macro_sql": "{% macro deduplicate(relation, partition_by, order_by, n_row_col=\"n_row\") -%}\nselect *\nfrom\n    (\n        select\n            *,\n            row_number() over (\n                partition by {{ partition_by }} order by {{ order_by }}\n            ) as {{ n_row_col }}\n        from {{ relation }}\n    )\nwhere {{ n_row_col }} = 1\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.2500424, "supported_languages": null}, "macro.providence.timestamp_max": {"name": "timestamp_max", "resource_type": "macro", "package_name": "providence", "path": "macros/timestamp.sql", "original_file_path": "macros/timestamp.sql", "unique_id": "macro.providence.timestamp_max", "macro_sql": "{% macro timestamp_max() -%} cast('9999-12-31 23:59:59' as timestamp) {%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.2503927, "supported_languages": null}, "macro.providence.timestamp_min": {"name": "timestamp_min", "resource_type": "macro", "package_name": "providence", "path": "macros/timestamp.sql", "original_file_path": "macros/timestamp.sql", "unique_id": "macro.providence.timestamp_min", "macro_sql": "{% macro timestamp_min() -%} cast('0001-01-01 00:00:00' as timestamp) {%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.25061, "supported_languages": null}, "macro.dbt_redshift.redshift__current_timestamp": {"name": "redshift__current_timestamp", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_redshift.redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() -%}\n    getdate()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.2511644, "supported_languages": null}, "macro.dbt_redshift.redshift__snapshot_get_time": {"name": "redshift__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_redshift.redshift__snapshot_get_time", "macro_sql": "{% macro redshift__snapshot_get_time() -%}\n    {{ current_timestamp() }}::timestamp\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.2514462, "supported_languages": null}, "macro.dbt_redshift.redshift__snapshot_string_as_time": {"name": "redshift__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_redshift.redshift__snapshot_string_as_time", "macro_sql": "{% macro redshift__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.2519138, "supported_languages": null}, "macro.dbt_redshift.redshift__current_timestamp_backcompat": {"name": "redshift__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_redshift.redshift__current_timestamp_backcompat", "macro_sql": "{% macro redshift__current_timestamp_backcompat() -%}\n    getdate()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.2521157, "supported_languages": null}, "macro.dbt_redshift.redshift__current_timestamp_in_utc_backcompat": {"name": "redshift__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_redshift.redshift__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro redshift__current_timestamp_in_utc_backcompat() -%}\n    getdate()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.2523026, "supported_languages": null}, "macro.dbt_redshift.dist": {"name": "dist", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_redshift.dist", "macro_sql": "{% macro dist(dist) %}\n  {%- if dist is not none -%}\n      {%- set dist = dist.strip().lower() -%}\n\n      {%- if dist in ['all', 'even'] -%}\n        diststyle {{ dist }}\n      {%- elif dist == \"auto\" -%}\n      {%- else -%}\n        diststyle key distkey ({{ dist }})\n      {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.2681026, "supported_languages": null}, "macro.dbt_redshift.sort": {"name": "sort", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_redshift.sort", "macro_sql": "{% macro sort(sort_type, sort) %}\n  {%- if sort is not none %}\n      {{ sort_type | default('compound', boolean=true) }} sortkey(\n      {%- if sort is string -%}\n        {%- set sort = [sort] -%}\n      {%- endif -%}\n      {%- for item in sort -%}\n        {{ item }}\n        {%- if not loop.last -%},{%- endif -%}\n      {%- endfor -%}\n      )\n  {%- endif %}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.2692738, "supported_languages": null}, "macro.dbt_redshift.redshift__create_table_as": {"name": "redshift__create_table_as", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_redshift.redshift__create_table_as", "macro_sql": "{% macro redshift__create_table_as(temporary, relation, sql) -%}\n\n  {%- set _dist = config.get('dist') -%}\n  {%- set _sort_type = config.get(\n          'sort_type',\n          validator=validation.any['compound', 'interleaved']) -%}\n  {%- set _sort = config.get(\n          'sort',\n          validator=validation.any[list, basestring]) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  {%- set backup = config.get('backup') -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n    {% if backup == false -%}backup no{%- endif %}\n    {{ dist(_dist) }}\n    {{ sort(_sort_type, _sort) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.dist", "macro.dbt_redshift.sort"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.2717857, "supported_languages": null}, "macro.dbt_redshift.redshift__create_view_as": {"name": "redshift__create_view_as", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_redshift.redshift__create_view_as", "macro_sql": "{% macro redshift__create_view_as(relation, sql) -%}\n  {%- set binding = config.get('bind', default=True) -%}\n\n  {% set bind_qualifier = '' if binding else 'with no schema binding' %}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create view {{ relation }} as (\n    {{ sql }}\n  ) {{ bind_qualifier }};\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.2729032, "supported_languages": null}, "macro.dbt_redshift.redshift__create_schema": {"name": "redshift__create_schema", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_redshift.redshift__create_schema", "macro_sql": "{% macro redshift__create_schema(relation) -%}\n  {{ postgres__create_schema(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.273241, "supported_languages": null}, "macro.dbt_redshift.redshift__drop_schema": {"name": "redshift__drop_schema", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_redshift.redshift__drop_schema", "macro_sql": "{% macro redshift__drop_schema(relation) -%}\n  {{ postgres__drop_schema(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.2735493, "supported_languages": null}, "macro.dbt_redshift.redshift__get_columns_in_relation": {"name": "redshift__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_redshift.redshift__get_columns_in_relation", "macro_sql": "{% macro redshift__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      with bound_views as (\n        select\n          ordinal_position,\n          table_schema,\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n        from information_schema.\"columns\"\n        where table_name = '{{ relation.identifier }}'\n    ),\n\n    unbound_views as (\n      select\n        ordinal_position,\n        view_schema,\n        col_name,\n        case\n          when col_type ilike 'character varying%' then\n            'character varying'\n          when col_type ilike 'numeric%' then 'numeric'\n          else col_type\n        end as col_type,\n        case\n          when col_type like 'character%'\n          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int\n          else null\n        end as character_maximum_length,\n        case\n          when col_type like 'numeric%'\n          then nullif(\n            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),\n            '')::int\n          else null\n        end as numeric_precision,\n        case\n          when col_type like 'numeric%'\n          then nullif(\n            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),\n            '')::int\n          else null\n        end as numeric_scale\n\n      from pg_get_late_binding_view_cols()\n      cols(view_schema name, view_name name, col_name name,\n           col_type varchar, ordinal_position int)\n      where view_name = '{{ relation.identifier }}'\n    ),\n\n    external_views as (\n      select\n        columnnum,\n        schemaname,\n        columnname,\n        case\n          when external_type ilike 'character varying%' or external_type ilike 'varchar%'\n          then 'character varying'\n          when external_type ilike 'numeric%' then 'numeric'\n          else external_type\n        end as external_type,\n        case\n          when external_type like 'character%' or external_type like 'varchar%'\n          then nullif(\n            REGEXP_SUBSTR(external_type, '[0-9]+'),\n            '')::int\n          else null\n        end as character_maximum_length,\n        case\n          when external_type like 'numeric%'\n          then nullif(\n            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),\n            '')::int\n          else null\n        end as numeric_precision,\n        case\n          when external_type like 'numeric%'\n          then nullif(\n            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),\n            '')::int\n          else null\n        end as numeric_scale\n      from\n        pg_catalog.svv_external_columns\n      where\n        schemaname = '{{ relation.schema }}'\n        and tablename = '{{ relation.identifier }}'\n\n    ),\n\n    unioned as (\n      select * from bound_views\n      union all\n      select * from unbound_views\n      union all\n      select * from external_views\n    )\n\n    select\n      column_name,\n      data_type,\n      character_maximum_length,\n      numeric_precision,\n      numeric_scale\n\n    from unioned\n    {% if relation.schema %}\n    where table_schema = '{{ relation.schema }}'\n    {% endif %}\n    order by ordinal_position\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.275181, "supported_languages": null}, "macro.dbt_redshift.redshift__list_relations_without_caching": {"name": "redshift__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_redshift.redshift__list_relations_without_caching", "macro_sql": "{% macro redshift__list_relations_without_caching(schema_relation) %}\n  {{ return(postgres__list_relations_without_caching(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.2755768, "supported_languages": null}, "macro.dbt_redshift.redshift__information_schema_name": {"name": "redshift__information_schema_name", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_redshift.redshift__information_schema_name", "macro_sql": "{% macro redshift__information_schema_name(database) -%}\n  {{ return(postgres__information_schema_name(database)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.2759275, "supported_languages": null}, "macro.dbt_redshift.redshift__list_schemas": {"name": "redshift__list_schemas", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_redshift.redshift__list_schemas", "macro_sql": "{% macro redshift__list_schemas(database) -%}\n  {{ return(postgres__list_schemas(database)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.276272, "supported_languages": null}, "macro.dbt_redshift.redshift__check_schema_exists": {"name": "redshift__check_schema_exists", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_redshift.redshift__check_schema_exists", "macro_sql": "{% macro redshift__check_schema_exists(information_schema, schema) -%}\n  {{ return(postgres__check_schema_exists(information_schema, schema)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.2766724, "supported_languages": null}, "macro.dbt_redshift.redshift__persist_docs": {"name": "redshift__persist_docs", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_redshift.redshift__persist_docs", "macro_sql": "{% macro redshift__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {# Override: do not set column comments for LBVs #}\n  {% set is_lbv = config.get('materialized') == 'view' and config.get('bind') == false %}\n  {% if for_columns and config.persist_column_docs() and model.columns and not is_lbv %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.2783039, "supported_languages": null}, "macro.dbt_redshift.redshift__alter_relation_comment": {"name": "redshift__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_redshift.redshift__alter_relation_comment", "macro_sql": "{% macro redshift__alter_relation_comment(relation, comment) %}\n  {% do return(postgres__alter_relation_comment(relation, comment)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.2787855, "supported_languages": null}, "macro.dbt_redshift.redshift__alter_column_comment": {"name": "redshift__alter_column_comment", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_redshift.redshift__alter_column_comment", "macro_sql": "{% macro redshift__alter_column_comment(relation, column_dict) %}\n  {% do return(postgres__alter_column_comment(relation, column_dict)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.2792246, "supported_languages": null}, "macro.dbt_redshift.redshift__alter_relation_add_remove_columns": {"name": "redshift__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_redshift.redshift__alter_relation_add_remove_columns", "macro_sql": "{% macro redshift__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n\n    {% for column in add_columns %}\n      {% set sql -%}\n          alter {{ relation.type }} {{ relation }} add column {{ column.name }} {{ column.data_type }}\n      {% endset %}\n      {% do run_query(sql) %}\n    {% endfor %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n\n    {% for column in remove_columns %}\n      {% set sql -%}\n          alter {{ relation.type }} {{ relation }} drop column {{ column.name }}\n      {% endset %}\n      {% do run_query(sql) %}\n    {% endfor %}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.2809184, "supported_languages": null}, "macro.dbt_redshift.redshift__get_base_catalog": {"name": "redshift__get_base_catalog", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_redshift.redshift__get_base_catalog", "macro_sql": "{% macro redshift__get_base_catalog(information_schema, schemas) -%}\n  {%- call statement('base_catalog', fetch_result=True) -%}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    with late_binding as (\n      select\n        '{{ database }}'::varchar as table_database,\n        table_schema,\n        table_name,\n        'LATE BINDING VIEW'::varchar as table_type,\n        null::text as table_comment,\n\n        column_name,\n        column_index,\n        column_type,\n        null::text as column_comment\n      from pg_get_late_binding_view_cols()\n        cols(table_schema name, table_name name, column_name name,\n             column_type varchar,\n             column_index int)\n        order by \"column_index\"\n    ),\n\n    early_binding as (\n        select\n            '{{ database }}'::varchar as table_database,\n            sch.nspname as table_schema,\n            tbl.relname as table_name,\n            case tbl.relkind\n                when 'v' then 'VIEW'\n                else 'BASE TABLE'\n            end as table_type,\n            tbl_desc.description as table_comment,\n            col.attname as column_name,\n            col.attnum as column_index,\n            pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n            col_desc.description as column_comment\n\n        from pg_catalog.pg_namespace sch\n        join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n        join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n        left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n        left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n        where (\n            {%- for schema in schemas -%}\n              upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n            {%- endfor -%}\n          )\n            and tbl.relkind in ('r', 'v', 'f', 'p')\n            and col.attnum > 0\n            and not col.attisdropped\n    ),\n\n    table_owners as (\n\n        select\n            '{{ database }}'::varchar as table_database,\n            schemaname as table_schema,\n            tablename as table_name,\n            tableowner as table_owner\n\n        from pg_tables\n\n        union all\n\n        select\n            '{{ database }}'::varchar as table_database,\n            schemaname as table_schema,\n            viewname as table_name,\n            viewowner as table_owner\n\n        from pg_views\n\n    ),\n\n    unioned as (\n\n        select *\n        from early_binding\n\n        union all\n\n        select *\n        from late_binding\n\n    )\n\n    select *,\n        table_database || '.' || table_schema || '.' || table_name as table_id\n\n    from unioned\n    join table_owners using (table_database, table_schema, table_name)\n\n    where (\n        {%- for schema in schemas -%}\n          upper(table_schema) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n\n    order by \"column_index\"\n  {%- endcall -%}\n\n  {{ return(load_result('base_catalog').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.2900488, "supported_languages": null}, "macro.dbt_redshift.redshift__get_extended_catalog": {"name": "redshift__get_extended_catalog", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_redshift.redshift__get_extended_catalog", "macro_sql": "{% macro redshift__get_extended_catalog(schemas) %}\n  {%- call statement('extended_catalog', fetch_result=True) -%}\n\n    select\n        \"database\" || '.' || \"schema\" || '.' || \"table\" as table_id,\n\n        'Encoded'::text as \"stats:encoded:label\",\n        encoded as \"stats:encoded:value\",\n        'Indicates whether any column in the table has compression encoding defined.'::text as \"stats:encoded:description\",\n        true as \"stats:encoded:include\",\n\n        'Dist Style' as \"stats:diststyle:label\",\n        diststyle as \"stats:diststyle:value\",\n        'Distribution style or distribution key column, if key distribution is defined.'::text as \"stats:diststyle:description\",\n        true as \"stats:diststyle:include\",\n\n        'Sort Key 1' as \"stats:sortkey1:label\",\n        -- handle 0xFF byte in response for interleaved sort styles\n        case\n            when sortkey1 like 'INTERLEAVED%' then 'INTERLEAVED'::text\n            else sortkey1\n        end as \"stats:sortkey1:value\",\n        'First column in the sort key.'::text as \"stats:sortkey1:description\",\n        (sortkey1 is not null) as \"stats:sortkey1:include\",\n\n        'Max Varchar' as \"stats:max_varchar:label\",\n        max_varchar as \"stats:max_varchar:value\",\n        'Size of the largest column that uses a VARCHAR data type.'::text as \"stats:max_varchar:description\",\n        true as \"stats:max_varchar:include\",\n\n        -- exclude this, as the data is strangely returned with null-byte characters\n        'Sort Key 1 Encoding' as \"stats:sortkey1_enc:label\",\n        sortkey1_enc as \"stats:sortkey1_enc:value\",\n        'Compression encoding of the first column in the sort key.' as \"stats:sortkey1_enc:description\",\n        false as \"stats:sortkey1_enc:include\",\n\n        '# Sort Keys' as \"stats:sortkey_num:label\",\n        sortkey_num as \"stats:sortkey_num:value\",\n        'Number of columns defined as sort keys.' as \"stats:sortkey_num:description\",\n        (sortkey_num > 0) as \"stats:sortkey_num:include\",\n\n        'Approximate Size' as \"stats:size:label\",\n        size * 1000000 as \"stats:size:value\",\n        'Approximate size of the table, calculated from a count of 1MB blocks'::text as \"stats:size:description\",\n        true as \"stats:size:include\",\n\n        'Disk Utilization' as \"stats:pct_used:label\",\n        pct_used / 100.0 as \"stats:pct_used:value\",\n        'Percent of available space that is used by the table.'::text as \"stats:pct_used:description\",\n        true as \"stats:pct_used:include\",\n\n        'Unsorted %' as \"stats:unsorted:label\",\n        unsorted / 100.0 as \"stats:unsorted:value\",\n        'Percent of unsorted rows in the table.'::text as \"stats:unsorted:description\",\n        (unsorted is not null) as \"stats:unsorted:include\",\n\n        'Stats Off' as \"stats:stats_off:label\",\n        stats_off as \"stats:stats_off:value\",\n        'Number that indicates how stale the table statistics are; 0 is current, 100 is out of date.'::text as \"stats:stats_off:description\",\n        true as \"stats:stats_off:include\",\n\n        'Approximate Row Count' as \"stats:rows:label\",\n        tbl_rows as \"stats:rows:value\",\n        'Approximate number of rows in the table. This value includes rows marked for deletion, but not yet vacuumed.'::text as \"stats:rows:description\",\n        true as \"stats:rows:include\",\n\n        'Sort Key Skew' as \"stats:skew_sortkey1:label\",\n        skew_sortkey1 as \"stats:skew_sortkey1:value\",\n        'Ratio of the size of the largest non-sort key column to the size of the first column of the sort key.'::text as \"stats:skew_sortkey1:description\",\n        (skew_sortkey1 is not null) as \"stats:skew_sortkey1:include\",\n\n        'Skew Rows' as \"stats:skew_rows:label\",\n        skew_rows as \"stats:skew_rows:value\",\n        'Ratio of the number of rows in the slice with the most rows to the number of rows in the slice with the fewest rows.'::text as \"stats:skew_rows:description\",\n        (skew_rows is not null) as \"stats:skew_rows:include\"\n\n    from svv_table_info\n    where (\n        {%- for schema in schemas -%}\n          upper(schema) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n\n  {%- endcall -%}\n\n  {{ return(load_result('extended_catalog').table) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.291452, "supported_languages": null}, "macro.dbt_redshift.redshift__can_select_from": {"name": "redshift__can_select_from", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_redshift.redshift__can_select_from", "macro_sql": "{% macro redshift__can_select_from(table_name) %}\n\n  {%- call statement('has_table_privilege', fetch_result=True) -%}\n\n    select has_table_privilege(current_user, '{{ table_name }}', 'SELECT') as can_select\n\n  {%- endcall -%}\n\n  {% set can_select = load_result('has_table_privilege').table[0]['can_select'] %}\n  {{ return(can_select) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.2922983, "supported_languages": null}, "macro.dbt_redshift.redshift__no_svv_table_info_warning": {"name": "redshift__no_svv_table_info_warning", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_redshift.redshift__no_svv_table_info_warning", "macro_sql": "{% macro redshift__no_svv_table_info_warning() %}\n\n    {% set msg %}\n\n    Warning: The database user \"{{ target.user }}\" has insufficient permissions to\n    query the \"svv_table_info\" table. Please grant SELECT permissions on this table\n    to the \"{{ target.user }}\" user to fetch extended table details from Redshift.\n\n    {% endset %}\n\n    {{ log(msg, info=True) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.2929318, "supported_languages": null}, "macro.dbt_redshift.redshift__get_catalog": {"name": "redshift__get_catalog", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_redshift.redshift__get_catalog", "macro_sql": "{% macro redshift__get_catalog(information_schema, schemas) %}\n\n    {#-- Compute a left-outer join in memory. Some Redshift queries are\n      -- leader-only, and cannot be joined to other compute-based queries #}\n\n    {% set catalog = redshift__get_base_catalog(information_schema, schemas) %}\n\n    {% set select_extended =  redshift__can_select_from('svv_table_info') %}\n    {% if select_extended %}\n        {% set extended_catalog = redshift__get_extended_catalog(schemas) %}\n        {% set catalog = catalog.join(extended_catalog, 'table_id') %}\n    {% else %}\n        {{ redshift__no_svv_table_info_warning() }}\n    {% endif %}\n\n    {{ return(catalog.exclude(['table_id'])) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__get_base_catalog", "macro.dbt_redshift.redshift__can_select_from", "macro.dbt_redshift.redshift__get_extended_catalog", "macro.dbt_redshift.redshift__no_svv_table_info_warning"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.2943175, "supported_languages": null}, "macro.dbt_redshift.redshift__get_relations": {"name": "redshift__get_relations", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "unique_id": "macro.dbt_redshift.redshift__get_relations", "macro_sql": "{% macro redshift__get_relations () -%}\n  {{ return(dbt.postgres__get_relations()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.294789, "supported_languages": null}, "macro.dbt_redshift.redshift__dateadd": {"name": "redshift__dateadd", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_redshift.redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.2953544, "supported_languages": null}, "macro.dbt_redshift.redshift__array_construct": {"name": "redshift__array_construct", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_redshift.redshift__array_construct", "macro_sql": "{% macro redshift__array_construct(inputs, data_type) -%}\n    array( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.295792, "supported_languages": null}, "macro.dbt_redshift.redshift__array_append": {"name": "redshift__array_append", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt_redshift.redshift__array_append", "macro_sql": "{% macro redshift__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.array_concat", "macro.dbt.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.296307, "supported_languages": null}, "macro.dbt_redshift.redshift__listagg": {"name": "redshift__listagg", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_redshift.redshift__listagg", "macro_sql": "{% macro redshift__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    {% set ns = namespace() %}\n    {% set ns.delimiter_text_regex = delimiter_text|trim(\"'\") %}\n    {% set special_chars %}\\,^,$,.,|,?,*,+,(,),[,],{,}{% endset %}\n    {%- for char in special_chars.split(',') -%}\n        {% set escape_char %}\\\\{{ char }}{% endset %}\n        {% set ns.delimiter_text_regex = ns.delimiter_text_regex|replace(char,escape_char) %}\n    {%- endfor -%}\n\n    {% set regex %}'([^{{ ns.delimiter_text_regex }}]+{{ ns.delimiter_text_regex }}){1,{{ limit_num - 1}}}[^{{ ns.delimiter_text_regex }}]+'{% endset %}\n    regexp_substr(\n        listagg(\n            {{ measure }},\n            {{ delimiter_text }}\n            )\n            {% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n        ,{{ regex }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3000216, "supported_languages": null}, "macro.dbt_redshift.redshift__last_day": {"name": "redshift__last_day", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt_redshift.redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.30086, "supported_languages": null}, "macro.dbt_redshift.redshift__array_concat": {"name": "redshift__array_concat", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt_redshift.redshift__array_concat", "macro_sql": "{% macro redshift__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3012958, "supported_languages": null}, "macro.dbt_redshift.redshift__split_part": {"name": "redshift__split_part", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_redshift.redshift__split_part", "macro_sql": "{% macro redshift__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part", "macro.dbt._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3022883, "supported_languages": null}, "macro.dbt_redshift.redshift__cast_bool_to_text": {"name": "redshift__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt_redshift.redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.302751, "supported_languages": null}, "macro.dbt_redshift.redshift__datediff": {"name": "redshift__datediff", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_redshift.redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3033092, "supported_languages": null}, "macro.dbt_redshift.redshift__length": {"name": "redshift__length", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt_redshift.redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3036587, "supported_languages": null}, "macro.dbt_redshift.redshift__snapshot_merge_sql": {"name": "redshift__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "unique_id": "macro.dbt_redshift.redshift__snapshot_merge_sql", "macro_sql": "{% macro redshift__snapshot_merge_sql(target, source, insert_cols) -%}\n    {{ postgres__snapshot_merge_sql(target, source, insert_cols) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.304157, "supported_languages": null}, "macro.dbt_redshift.redshift__get_show_grant_sql": {"name": "redshift__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_redshift", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_redshift.redshift__get_show_grant_sql", "macro_sql": "{% macro redshift__get_show_grant_sql(relation) %}\n\nwith privileges as (\n\n    -- valid options per https://docs.aws.amazon.com/redshift/latest/dg/r_HAS_TABLE_PRIVILEGE.html\n    select 'select' as privilege_type\n    union all\n    select 'insert' as privilege_type\n    union all\n    select 'update' as privilege_type\n    union all\n    select 'delete' as privilege_type\n    union all\n    select 'references' as privilege_type\n\n)\n\nselect\n    u.usename as grantee,\n    p.privilege_type\nfrom pg_user u\ncross join privileges p\nwhere has_table_privilege(u.usename, '{{ relation }}', privilege_type)\n    and u.usename != current_user\n    and not u.usesuper\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3046381, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp": {"name": "postgres__current_timestamp", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp", "macro_sql": "{% macro postgres__current_timestamp() -%}\n    now()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.305259, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_string_as_time": {"name": "postgres__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time", "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3057103, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_get_time": {"name": "postgres__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3059769, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_backcompat": {"name": "postgres__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_backcompat", "macro_sql": "{% macro postgres__current_timestamp_backcompat() %}\n    current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3062434, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat": {"name": "postgres__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro postgres__current_timestamp_in_utc_backcompat() %}\n    (current_timestamp at time zone 'utc')::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3065095, "supported_languages": null}, "macro.dbt_postgres.postgres__create_table_as": {"name": "postgres__create_table_as", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_table_as", "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3173194, "supported_languages": null}, "macro.dbt_postgres.postgres__get_create_index_sql": {"name": "postgres__get_create_index_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_create_index_sql", "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }});\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3185735, "supported_languages": null}, "macro.dbt_postgres.postgres__create_schema": {"name": "postgres__create_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_schema", "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3195047, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_schema": {"name": "postgres__drop_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__drop_schema", "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3202891, "supported_languages": null}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"name": "postgres__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.321449, "supported_languages": null}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"name": "postgres__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.322373, "supported_languages": null}, "macro.dbt_postgres.postgres__information_schema_name": {"name": "postgres__information_schema_name", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__information_schema_name", "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3228288, "supported_languages": null}, "macro.dbt_postgres.postgres__list_schemas": {"name": "postgres__list_schemas", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_schemas", "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3236983, "supported_languages": null}, "macro.dbt_postgres.postgres__check_schema_exists": {"name": "postgres__check_schema_exists", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3246768, "supported_languages": null}, "macro.dbt_postgres.postgres__make_relation_with_suffix": {"name": "postgres__make_relation_with_suffix", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_relation_with_suffix", "macro_sql": "{% macro postgres__make_relation_with_suffix(base_relation, suffix, dstring) %}\n    {% if dstring %}\n      {% set dt = modules.datetime.datetime.now() %}\n      {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n      {% set suffix = suffix ~ dtstring %}\n    {% endif %}\n    {% set suffix_length = suffix|length %}\n    {% set relation_max_name_length = base_relation.relation_max_name_length() %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Relation suffix is too long (' ~ suffix_length ~ ' characters). Maximum length is ' ~ relation_max_name_length ~ ' characters.') %}\n    {% endif %}\n    {% set identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix %}\n\n    {{ return(base_relation.incorporate(path={\"identifier\": identifier })) }}\n\n  {% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3267539, "supported_languages": null}, "macro.dbt_postgres.postgres__make_intermediate_relation": {"name": "postgres__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_intermediate_relation", "macro_sql": "{% macro postgres__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(postgres__make_relation_with_suffix(base_relation, suffix, dstring=False)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.327253, "supported_languages": null}, "macro.dbt_postgres.postgres__make_temp_relation": {"name": "postgres__make_temp_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set temp_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=True) %}\n    {{ return(temp_relation.incorporate(path={\"schema\": none,\n                                              \"database\": none})) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3280454, "supported_languages": null}, "macro.dbt_postgres.postgres__make_backup_relation": {"name": "postgres__make_backup_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_backup_relation", "macro_sql": "{% macro postgres__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {% set backup_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=False) %}\n    {{ return(backup_relation.incorporate(type=backup_relation_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3287244, "supported_languages": null}, "macro.dbt_postgres.postgres_escape_comment": {"name": "postgres_escape_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres_escape_comment", "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.329792, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_relation_comment": {"name": "postgres__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_relation_comment", "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3303535, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_column_comment": {"name": "postgres__alter_column_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_column_comment", "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3318362, "supported_languages": null}, "macro.dbt_postgres.postgres__get_show_grant_sql": {"name": "postgres__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_show_grant_sql", "macro_sql": "\n\n{%- macro postgres__get_show_grant_sql(relation) -%}\n  select grantee, privilege_type\n  from {{ relation.information_schema('role_table_grants') }}\n      where grantor = current_role\n        and grantee != current_role\n        and table_schema = '{{ relation.schema }}'\n        and table_name = '{{ relation.identifier }}'\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3323433, "supported_languages": null}, "macro.dbt_postgres.postgres__copy_grants": {"name": "postgres__copy_grants", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__copy_grants", "macro_sql": "{% macro postgres__copy_grants() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3326352, "supported_languages": null}, "macro.dbt_postgres.postgres__get_catalog": {"name": "postgres__get_catalog", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_postgres.postgres__get_catalog", "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n\n  {%- call statement('catalog', fetch_result=True) -%}\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n\n    where (\n        {%- for schema in schemas -%}\n          upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence in ('p', 'u') -- [p]ermanent table or [u]nlogged table. Exclude [t]emporary tables\n      and tbl.relkind in ('r', 'v', 'f', 'p') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table, [m]aterialized view\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3348846, "supported_languages": null}, "macro.dbt_postgres.postgres_get_relations": {"name": "postgres_get_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "unique_id": "macro.dbt_postgres.postgres_get_relations", "macro_sql": "{% macro postgres_get_relations () -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select distinct\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3361764, "supported_languages": null}, "macro.dbt_postgres.postgres__any_value": {"name": "postgres__any_value", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt_postgres.postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n\n    min({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.336546, "supported_languages": null}, "macro.dbt_postgres.postgres__dateadd": {"name": "postgres__dateadd", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_postgres.postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3370662, "supported_languages": null}, "macro.dbt_postgres.postgres__listagg": {"name": "postgres__listagg", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_postgres.postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3384683, "supported_languages": null}, "macro.dbt_postgres.postgres__last_day": {"name": "postgres__last_day", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt_postgres.postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc", "macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3396778, "supported_languages": null}, "macro.dbt_postgres.postgres__split_part": {"name": "postgres__split_part", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_postgres.postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part", "macro.dbt._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3408349, "supported_languages": null}, "macro.dbt_postgres.postgres__datediff": {"name": "postgres__datediff", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_postgres.postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3477135, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"name": "postgres__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and {{ target }}.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3493705, "supported_languages": null}, "macro.dbt_postgres.postgres__get_incremental_default_sql": {"name": "postgres__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/incremental_strategies.sql", "original_file_path": "macros/materializations/incremental_strategies.sql", "unique_id": "macro.dbt_postgres.postgres__get_incremental_default_sql", "macro_sql": "{% macro postgres__get_incremental_default_sql(arg_dict) %}\n\n  {% if arg_dict[\"unique_key\"] %}\n    {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n  {% else %}\n    {% do return(get_incremental_append_sql(arg_dict)) %}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql", "macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3503034, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3509445, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3512151, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3519158, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.35226, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3542511, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3546536, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3550603, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3554375, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.35584, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3562174, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3566186, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3570557, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3574593, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3578334, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3582351, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3587496, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3591633, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3595288, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3603396, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3607564, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3616543, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3622608, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.362965, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3633125, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3646529, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.365663, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3663023, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.366724, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3673742, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3677254, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.368279, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3684762, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3692882, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3699517, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3703196, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3710463, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3714037, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3722267, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.37257, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.373285, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.373631, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.374182, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3743756, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.375183, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3756037, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3762095, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.376524, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3776457, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3780622, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3786402, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3792632, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3795404, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3802142, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3805513, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3811488, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3815575, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.382357, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3828025, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3835669, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3838475, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3844523, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3847156, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3856218, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3862672, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3871667, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3877456, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.388906, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.389568, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3902798, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.392957, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3933492, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3943632, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.395408, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.3968496, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.398017, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.39821, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.4017653, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.403232, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.4039803, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.407548, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.4104812, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.4123745, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.4129653, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.4138288, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.4146018, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.4153655, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.4178343, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.418329, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.4187124, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.4190764, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.4194338, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.425357, "supported_languages": ["sql"]}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.4265263, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.4270067, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.4280705, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.4290895, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.4323266, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.4337168, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.4353755, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.435967, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.4377658, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.4479613, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.4520988, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.4527557, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.455287, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.4559596, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.45756, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.4594846, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.4600725, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.4605372, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.4612608, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.4617262, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.4624476, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.4629316, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.4635959, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.46406, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.4644468, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.465126, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.4768863, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.486637, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.489663, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.4926734, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.4948168, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.4963164, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.4970245, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.497581, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.5010693, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.5019343, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.5023406, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.50281, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.503467, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.5093513, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.517884, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.5201225, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.5207083, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.5219016, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.522382, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.5227346, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.5230906, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.5233905, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.5237877, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.524085, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.5252695, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.5257368, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.528922, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.5362358, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.5372782, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.5380373, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.5427732, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.543671, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.544618, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.5514557, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.5521808, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.5526025, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.5528347, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.5532262, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.5535257, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.55405, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.5562153, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.5568268, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.5574818, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.5585732, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.559542, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.5602164, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.5673208, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.5677624, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.568328, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.5701005, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.5705206, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.5709803, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.574436, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.5778399, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.5902126, "supported_languages": ["sql"]}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.593704, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.5940063, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.5944269, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.5947266, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.5955932, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.5960653, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.5963295, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.596891, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.5973623, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.5979216, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.5983825, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.5989664, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6006074, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6010885, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.601707, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6022756, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.605255, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6067524, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6071846, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6076906, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6081164, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6087837, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6099713, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_redshift.redshift__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.611084, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6114633, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_redshift.redshift__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.61182, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6120868, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6125033, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6126983, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6131074, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_redshift.redshift__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6135235, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6144881, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6155503, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.618438, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6191065, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.61972, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6201348, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6205924, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6212108, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6217225, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.622469, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6229525, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6233683, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.629462, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6298814, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6304238, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.631168, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.631783, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6325843, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6330404, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6335874, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6340396, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.634447, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6349711, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6356945, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6364634, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6378422, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6384192, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6388006, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6392903, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6403327, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6406808, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6410847, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6420934, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6429915, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6434674, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.643876, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6443353, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6476023, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6480083, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6487763, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.649249, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.650099, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6506815, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.652395, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_redshift.redshift__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6530402, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6550255, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6557913, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6563883, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.657168, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6585014, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6596828, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6602688, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.660974, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.661657, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6628494, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6637022, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6650524, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6662312, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6672094, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6681077, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.669494, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.670339, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6762702, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6802723, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6816576, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6832948, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6854348, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6879208, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.689118, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6900778, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.69167, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6937513, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6951685, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.6971943, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.69824, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.699414, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7011917, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7040386, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7056286, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7078903, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7089937, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.709743, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7108111, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7119749, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7138462, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7161427, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7167988, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7172325, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7179124, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.718412, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7195237, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7201657, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7205834, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7225041, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.724017, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7249246, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7255118, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7273738, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.729489, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7316248, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7323103, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7336721, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7357073, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.redshift__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7372587, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7377958, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7382953, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7387908, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.739215, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7396438, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7410653, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7432137, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7487214, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7573671, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7583897, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.759118, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.postgres__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7599504, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.760301, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7606444, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7628777, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7649932, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.765811, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.766678, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7693121, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7733371, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7742517, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7756095, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7763608, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.777207, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7803507, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7812526, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.783056, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7843292, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7850277, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7856505, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.786726, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.788535, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.789243, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7895849, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7920406, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7957091, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.7968926, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.798741, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.799654, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.8011289, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.redshift__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.8038642, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.8050163, "supported_languages": null}, "macro.dbt_utils.redshift__width_bucket": {"name": "redshift__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt.safe_cast(expr, dbt.type_numeric() ) }} %\n                {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.806159, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.8066585, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.8081253, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.8095956, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.8101778, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.8110883, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.8133574, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.8172865, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.818345, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{% if var('surrogate_key_treat_nulls_as_empty_strings', False) %}\n    {% set default_null_value = \"\" %}\n{% else %}\n    {% set default_null_value = '_dbt_utils_surrogate_key_null_'%}\n{% endif %}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.819994, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.8217065, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.8227637, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.8232505, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.8245597, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.8253648, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.8265147, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.8275638, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.8291636, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.8299322, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1684070074.8307533, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.providence.int_unique_transaction": ["model.providence.stg_ynab_transaction"], "model.providence.int_unique_budget_category": ["model.providence.stg_ynab_budget_category", "model.providence.stg_ynab_budget_category"], "model.providence.int_unique_enriched_bank_statement": ["model.providence.dim_account", "model.providence.stg_uob_statement"], "model.providence.dim_budget_category": ["model.providence.int_unique_budget_category", "model.providence.stg_ynab_budget_category_group"], "model.providence.dim_date": [], "model.providence.dim_bank_card": ["model.providence.stg_simplygo_card"], "model.providence.fact_vendor_transaction": ["model.providence.int_unique_enriched_bank_statement", "model.providence.int_unique_enriched_bank_statement"], "model.providence.fact_monthly_budget": ["model.providence.int_unique_budget_category"], "model.providence.fact_public_transport_trip_leg": ["model.providence.dim_account", "model.providence.stg_map_bank_card", "model.providence.stg_simplygo_trip_leg", "model.providence.stg_simplygo_trip_leg"], "model.providence.fact_accounting_transaction": ["model.providence.dim_budget_category", "model.providence.int_unique_transaction", "model.providence.stg_ynab_subtransaction"], "model.providence.dim_payee": ["model.providence.stg_ynab_payee", "model.providence.stg_ynab_payee", "seed.providence.ynab_payee_flag"], "model.providence.dim_budget": ["model.providence.stg_ynab_budget", "model.providence.stg_ynab_budget"], "model.providence.fact_bank_statement": ["model.providence.dim_account", "model.providence.stg_uob_statement"], "model.providence.dim_account": ["model.providence.stg_map_budget_account", "model.providence.stg_uob_statement", "model.providence.stg_ynab_account", "model.providence.stg_ynab_account"], "model.providence.stg_uob_statement": ["source.providence.uob.source_uob"], "model.providence.stg_simplygo_card": ["source.providence.simplygo.source_simplygo"], "model.providence.stg_simplygo_trip_leg": ["source.providence.simplygo.source_simplygo"], "model.providence.stg_ynab_budget_category_group": ["source.providence.ynab.source_ynab"], "model.providence.stg_ynab_subtransaction": ["source.providence.ynab.source_ynab"], "model.providence.stg_ynab_transaction": ["source.providence.ynab.source_ynab"], "model.providence.stg_ynab_payee": ["source.providence.ynab.source_ynab"], "model.providence.stg_ynab_budget": ["source.providence.ynab.source_ynab"], "model.providence.stg_ynab_account": ["source.providence.ynab.source_ynab"], "model.providence.stg_ynab_budget_category": ["source.providence.ynab.source_ynab"], "model.providence.stg_map_budget_account": ["source.providence.mapping.map_account"], "model.providence.stg_map_bank_card": ["source.providence.mapping.map_bank_card"], "model.providence.mart_finance_dashboard": ["model.providence.dim_account", "model.providence.dim_budget_category", "model.providence.dim_date", "model.providence.dim_payee", "model.providence.fact_accounting_transaction"], "model.providence.mart_finance_dashboard_cash_flow": ["model.providence.mart_finance_dashboard", "model.providence.mart_finance_dashboard", "model.providence.mart_finance_dashboard", "model.providence.mart_finance_dashboard", "model.providence.mart_finance_dashboard"], "model.providence.mart_finance_dashboard_uncleared": ["model.providence.dim_account", "model.providence.fact_accounting_transaction", "model.providence.fact_accounting_transaction", "model.providence.fact_vendor_transaction", "model.providence.int_unique_transaction"], "model.providence.mart_ynab_sink": ["model.providence.fact_accounting_transaction", "model.providence.fact_public_transport_trip_leg"], "test.providence.assert_sum_bank_transaction_amount_eq_account_balance": ["model.providence.fact_vendor_transaction", "model.providence.int_unique_enriched_bank_statement"], "seed.providence.ynab_payee_flag": [], "test.providence.unique_int_unique_budget_category_id.6c900d0e93": ["model.providence.int_unique_budget_category"], "test.providence.not_null_int_unique_budget_category_id.30b665b0b2": ["model.providence.int_unique_budget_category"], "test.providence.not_null_int_unique_budget_category_budget_id.b98915ceea": ["model.providence.int_unique_budget_category"], "test.providence.relationships_int_unique_budget_category_budget_id__id__ref_stg_ynab_budget_.908b88912b": ["model.providence.int_unique_budget_category", "model.providence.stg_ynab_budget"], "test.providence.not_null_int_unique_budget_category_category_id.9ac0e3c686": ["model.providence.int_unique_budget_category"], "test.providence.not_null_int_unique_budget_category_name.782a7b0adc": ["model.providence.int_unique_budget_category"], "test.providence.not_null_int_unique_budget_category_category_group_id.d241f6f8ec": ["model.providence.int_unique_budget_category"], "test.providence.not_null_int_unique_budget_category_is_deleted.5762ff5711": ["model.providence.int_unique_budget_category"], "test.providence.not_null_int_unique_budget_category_budget_amount.e7ca554d6e": ["model.providence.int_unique_budget_category"], "test.providence.not_null_int_unique_budget_category_budget_month.2a97219788": ["model.providence.int_unique_budget_category"], "test.providence.accepted_values_int_unique_budget_category_goal_type__Target_Category_Balance__Target_Category_Balance_by_Date__Monthly_Funding__Plan_Your_Spending.45e0ec7ee8": ["model.providence.int_unique_budget_category"], "test.providence.not_null_int_unique_budget_category_updated_at.3f6f47730e": ["model.providence.int_unique_budget_category"], "test.providence.unique_int_unique_enriched_bank_statement_id.0b266c74fa": ["model.providence.int_unique_enriched_bank_statement"], "test.providence.not_null_int_unique_enriched_bank_statement_id.857bc95776": ["model.providence.int_unique_enriched_bank_statement"], "test.providence.not_null_int_unique_enriched_bank_statement_transacted_on.6858c5f780": ["model.providence.int_unique_enriched_bank_statement"], "test.providence.not_null_int_unique_enriched_bank_statement_description.2b182c3f17": ["model.providence.int_unique_enriched_bank_statement"], "test.providence.not_null_int_unique_enriched_bank_statement_account_no.f52fb903a9": ["model.providence.int_unique_enriched_bank_statement"], "test.providence.not_null_int_unique_enriched_bank_statement_account_id.0b1f57b3e2": ["model.providence.int_unique_enriched_bank_statement"], "test.providence.relationships_int_unique_enriched_bank_statement_account_id__id__ref_dim_account_.192e503d3c": ["model.providence.dim_account", "model.providence.int_unique_enriched_bank_statement"], "test.providence.not_null_int_unique_enriched_bank_statement_name.52c8ba8d17": ["model.providence.int_unique_enriched_bank_statement"], "test.providence.not_null_int_unique_enriched_bank_statement_deposit.70eb54a69c": ["model.providence.int_unique_enriched_bank_statement"], "test.providence.dbt_utils_accepted_range_int_unique_enriched_bank_statement_deposit__0_0.ca148b59ce": ["model.providence.int_unique_enriched_bank_statement"], "test.providence.not_null_int_unique_enriched_bank_statement_withdrawal.0a1bf24b4a": ["model.providence.int_unique_enriched_bank_statement"], "test.providence.dbt_utils_accepted_range_int_unique_enriched_bank_statement_withdrawal__0_0.0958cf5ba4": ["model.providence.int_unique_enriched_bank_statement"], "test.providence.not_null_int_unique_enriched_bank_statement_balance.36858c8aa9": ["model.providence.int_unique_enriched_bank_statement"], "test.providence.not_null_int_unique_enriched_bank_statement_currency_code.282a32233c": ["model.providence.int_unique_enriched_bank_statement"], "test.providence.not_null_int_unique_enriched_bank_statement_statement_begin.7709bb26cc": ["model.providence.int_unique_enriched_bank_statement"], "test.providence.not_null_int_unique_enriched_bank_statement_statement_end.ace15564ad": ["model.providence.int_unique_enriched_bank_statement"], "test.providence.not_null_int_unique_enriched_bank_statement_processed_on.6e6a0ea6ac": ["model.providence.int_unique_enriched_bank_statement"], "test.providence.dbt_utils_expression_is_true_int_unique_enriched_bank_statement_statement_begin_statement_end.e45e89334b": ["model.providence.int_unique_enriched_bank_statement"], "test.providence.dbt_utils_expression_is_true_int_unique_enriched_bank_statement_statement_end_processed_on.ba42e179c9": ["model.providence.int_unique_enriched_bank_statement"], "test.providence.not_null_int_unique_transaction_id.3961df60ec": ["model.providence.int_unique_transaction"], "test.providence.unique_int_unique_transaction_id.8055ebb23a": ["model.providence.int_unique_transaction"], "test.providence.not_null_int_unique_transaction_amount.fa0cc48955": ["model.providence.int_unique_transaction"], "test.providence.not_null_int_unique_transaction_clearing_status.60bf364a93": ["model.providence.int_unique_transaction"], "test.providence.accepted_values_int_unique_transaction_clearing_status__cleared__uncleared__reconciled.dfe24d24da": ["model.providence.int_unique_transaction"], "test.providence.not_null_int_unique_transaction_is_approved.15482bf359": ["model.providence.int_unique_transaction"], "test.providence.not_null_int_unique_transaction_is_deleted.5e8e178bd0": ["model.providence.int_unique_transaction"], "test.providence.accepted_values_int_unique_transaction_is_deleted__False.789e301767": ["model.providence.int_unique_transaction"], "test.providence.not_null_int_unique_transaction_budget_id.d1f3858f87": ["model.providence.int_unique_transaction"], "test.providence.relationships_int_unique_transaction_budget_id__id__ref_stg_ynab_budget_.959d640562": ["model.providence.int_unique_transaction", "model.providence.stg_ynab_budget"], "test.providence.not_null_int_unique_transaction_account_id.ed556e32fe": ["model.providence.int_unique_transaction"], "test.providence.relationships_int_unique_transaction_account_id__id__ref_stg_ynab_account_.b8c211589f": ["model.providence.int_unique_transaction", "model.providence.stg_ynab_account"], "test.providence.relationships_int_unique_transaction_payee_id__id__ref_stg_ynab_payee_.632982383f": ["model.providence.int_unique_transaction", "model.providence.stg_ynab_payee"], "test.providence.relationships_int_unique_transaction_transfer_account_id__id__ref_stg_ynab_account_.1b44f14cac": ["model.providence.int_unique_transaction", "model.providence.stg_ynab_account"], "test.providence.not_null_int_unique_transaction_date.821ad44e28": ["model.providence.int_unique_transaction"], "test.providence.not_null_int_unique_transaction_scraped_on.bb329b36ca": ["model.providence.int_unique_transaction"], "test.providence.unique_dim_date_id.54c6b7737b": ["model.providence.dim_date"], "test.providence.not_null_dim_date_id.49e434ad59": ["model.providence.dim_date"], "test.providence.not_null_dim_date_date.78f11e7735": ["model.providence.dim_date"], "test.providence.not_null_dim_date_day_of_month.8ae109937d": ["model.providence.dim_date"], "test.providence.dbt_utils_accepted_range_dim_date_day_of_month__31__1.15b4b189b7": ["model.providence.dim_date"], "test.providence.not_null_dim_date_day_of_week.45321d6610": ["model.providence.dim_date"], "test.providence.dbt_utils_accepted_range_dim_date_day_of_week__6__0.bfe7eaced3": ["model.providence.dim_date"], "test.providence.not_null_dim_date_weekday_name.33b8ebe86e": ["model.providence.dim_date"], "test.providence.not_null_dim_date_month_of_year.951ad9a5b5": ["model.providence.dim_date"], "test.providence.dbt_utils_accepted_range_dim_date_month_of_year__12__1.e6a5877b18": ["model.providence.dim_date"], "test.providence.not_null_dim_date_month_name.f33095fb66": ["model.providence.dim_date"], "test.providence.not_null_dim_date_month_short.0235b40229": ["model.providence.dim_date"], "test.providence.not_null_dim_date_year.aac8e263ab": ["model.providence.dim_date"], "test.providence.not_null_dim_date_is_weekend.cf6d8ca02c": ["model.providence.dim_date"], "test.providence.not_null_dim_date_updated_at.edca938145": ["model.providence.dim_date"], "test.providence.dbt_utils_expression_is_true_dim_date_len_month_short_3.860ad91e49": ["model.providence.dim_date"], "test.providence.dbt_utils_expression_is_true_dim_date_len_weekday_short_3.54c7bc245e": ["model.providence.dim_date"], "test.providence.not_null_dim_bank_card_id.37ec70b874": ["model.providence.dim_bank_card"], "test.providence.unique_dim_bank_card_id.030c894cd7": ["model.providence.dim_bank_card"], "test.providence.not_null_dim_bank_card_name.f3104c4b11": ["model.providence.dim_bank_card"], "test.providence.not_null_dim_bank_card_updated_at.a46061ae1d": ["model.providence.dim_bank_card"], "test.providence.not_null_fact_public_transport_trip_leg_id.11e3c6b565": ["model.providence.fact_public_transport_trip_leg"], "test.providence.unique_fact_public_transport_trip_leg_id.7753bf7410": ["model.providence.fact_public_transport_trip_leg"], "test.providence.not_null_fact_public_transport_trip_leg_traveled_on.20509891d1": ["model.providence.fact_public_transport_trip_leg"], "test.providence.not_null_fact_public_transport_trip_leg_travel_date_id.5aeebaf59d": ["model.providence.fact_public_transport_trip_leg"], "test.providence.relationships_fact_public_transport_trip_leg_travel_date_id__id__ref_dim_date_.c0364ad857": ["model.providence.dim_date", "model.providence.fact_public_transport_trip_leg"], "test.providence.not_null_fact_public_transport_trip_leg_cost_sgd.fb7f50e486": ["model.providence.fact_public_transport_trip_leg"], "test.providence.dbt_utils_accepted_range_fact_public_transport_trip_leg_cost_sgd__0.b499fccafb": ["model.providence.fact_public_transport_trip_leg"], "test.providence.not_null_fact_public_transport_trip_leg_source.e3b36ba6ac": ["model.providence.fact_public_transport_trip_leg"], "test.providence.not_null_fact_public_transport_trip_leg_destination.f0b3c0c527": ["model.providence.fact_public_transport_trip_leg"], "test.providence.not_null_fact_public_transport_trip_leg_transport_mode.61559e0639": ["model.providence.fact_public_transport_trip_leg"], "test.providence.accepted_values_fact_public_transport_trip_leg_transport_mode__Rail__Bus.d071843ebd": ["model.providence.fact_public_transport_trip_leg"], "test.providence.not_null_fact_public_transport_trip_leg_bank_card_id.a699f6f8fe": ["model.providence.fact_public_transport_trip_leg"], "test.providence.relationships_fact_public_transport_trip_leg_bank_card_id__id__ref_dim_bank_card_.e54f7eda8c": ["model.providence.dim_bank_card", "model.providence.fact_public_transport_trip_leg"], "test.providence.not_null_fact_public_transport_trip_leg_account_id.c516df574d": ["model.providence.fact_public_transport_trip_leg"], "test.providence.relationships_fact_public_transport_trip_leg_account_id__id__ref_dim_account_.45face645f": ["model.providence.dim_account", "model.providence.fact_public_transport_trip_leg"], "test.providence.not_null_fact_public_transport_trip_leg_is_billed.e7b02e4221": ["model.providence.fact_public_transport_trip_leg"], "test.providence.not_null_fact_public_transport_trip_leg_updated_at.266160af5a": ["model.providence.fact_public_transport_trip_leg"], "test.providence.unique_dim_budget_id.3db1895c25": ["model.providence.dim_budget"], "test.providence.not_null_dim_budget_id.eabdd80ba9": ["model.providence.dim_budget"], "test.providence.not_null_dim_budget_name.9d76c5e6d9": ["model.providence.dim_budget"], "test.providence.not_null_dim_budget_modified_at.32d713448e": ["model.providence.dim_budget"], "test.providence.not_null_dim_budget_currency_code.05cec94be1": ["model.providence.dim_budget"], "test.providence.not_null_dim_budget_currency_symbol.392bbc29a4": ["model.providence.dim_budget"], "test.providence.not_null_dim_budget_updated_at.6ff71eb898": ["model.providence.dim_budget"], "test.providence.dbt_utils_expression_is_true_dim_budget_len_currency_code_3.227efc4fe7": ["model.providence.dim_budget"], "test.providence.not_null_dim_budget_category_id.77da7ecc72": ["model.providence.dim_budget_category"], "test.providence.unique_dim_budget_category_id.efbc2bbaa5": ["model.providence.dim_budget_category"], "test.providence.not_null_dim_budget_category_category_id.1064e4c951": ["model.providence.dim_budget_category"], "test.providence.not_null_dim_budget_category_name.02f719e72b": ["model.providence.dim_budget_category"], "test.providence.not_null_dim_budget_category_budget_id.1b25eed24d": ["model.providence.dim_budget_category"], "test.providence.relationships_dim_budget_category_budget_id__id__ref_dim_budget_.e8d44a263b": ["model.providence.dim_budget", "model.providence.dim_budget_category"], "test.providence.relationships_dim_budget_category_category_group_id__id__ref_stg_ynab_budget_category_group_.4610ab6f13": ["model.providence.dim_budget_category", "model.providence.stg_ynab_budget_category_group"], "test.providence.accepted_values_dim_budget_category_goal_type__Target_Category_Balance__Target_Category_Balance_by_Date__Monthly_Funding__Plan_Your_Spending.f4e6afe66e": ["model.providence.dim_budget_category"], "test.providence.not_null_dim_budget_category_is_deleted.f8f14e0267": ["model.providence.dim_budget_category"], "test.providence.not_null_dim_budget_category_is_expense.6dbe0ce48b": ["model.providence.dim_budget_category"], "test.providence.not_null_dim_budget_category_updated_at.0346f86c7a": ["model.providence.dim_budget_category"], "test.providence.not_null_dim_budget_category_effective_at.8d5d59207f": ["model.providence.dim_budget_category"], "test.providence.not_null_dim_budget_category_expired_at.c9ef0053bb": ["model.providence.dim_budget_category"], "test.providence.not_null_dim_budget_category_is_current.91170880f8": ["model.providence.dim_budget_category"], "test.providence.dbt_utils_expression_is_true_dim_budget_category_effective_at_expired_at.d66027b17f": ["model.providence.dim_budget_category"], "test.providence.dbt_utils_expression_is_true_dim_budget_category_not_goal_type_is_null_and_goal_amount_0_or_goal_type_is_null_and_goal_amount_0_.4a71e79beb": ["model.providence.dim_budget_category"], "test.providence.not_null_fact_monthly_budget_id.10882a8339": ["model.providence.fact_monthly_budget"], "test.providence.unique_fact_monthly_budget_id.9411ccab94": ["model.providence.fact_monthly_budget"], "test.providence.not_null_fact_monthly_budget_month_date_id.15a822a005": ["model.providence.fact_monthly_budget"], "test.providence.relationships_fact_monthly_budget_month_date_id__id__ref_dim_date_.8ccdca7d0c": ["model.providence.dim_date", "model.providence.fact_monthly_budget"], "test.providence.not_null_fact_monthly_budget_budget_id.da8421df1a": ["model.providence.fact_monthly_budget"], "test.providence.relationships_fact_monthly_budget_budget_id__id__ref_dim_budget_.0d161cb61b": ["model.providence.dim_budget", "model.providence.fact_monthly_budget"], "test.providence.not_null_fact_monthly_budget_category_id.8a82ce7473": ["model.providence.fact_monthly_budget"], "test.providence.relationships_fact_monthly_budget_category_id__id__ref_dim_budget_category_.621c0ef023": ["model.providence.dim_budget_category", "model.providence.fact_monthly_budget"], "test.providence.not_null_fact_monthly_budget_amount.ea62317861": ["model.providence.fact_monthly_budget"], "test.providence.not_null_fact_monthly_budget_updated_at.019c96409d": ["model.providence.fact_monthly_budget"], "test.providence.unique_dim_payee_id.1b302dbda3": ["model.providence.dim_payee"], "test.providence.not_null_dim_payee_id.5bb6244959": ["model.providence.dim_payee"], "test.providence.not_null_dim_payee_name.0471202f5e": ["model.providence.dim_payee"], "test.providence.relationships_dim_payee_transfer_account_id__id__ref_dim_account_.e25f5dbae6": ["model.providence.dim_account", "model.providence.dim_payee"], "test.providence.not_null_dim_payee_updated_at.f6242bcd60": ["model.providence.dim_payee"], "test.providence.not_null_dim_payee_is_unaccounted.6d3f15be34": ["model.providence.dim_payee"], "test.providence.not_null_dim_payee_is_passive.6c619654a1": ["model.providence.dim_payee"], "test.providence.not_null_dim_account_id.c525515029": ["model.providence.dim_account"], "test.providence.unique_dim_account_id.03098a72cc": ["model.providence.dim_account"], "test.providence.not_null_dim_account_name.69795079a1": ["model.providence.dim_account"], "test.providence.not_null_dim_account_is_closed.4aefd67aa2": ["model.providence.dim_account"], "test.providence.not_null_dim_account_is_deleted.249d707245": ["model.providence.dim_account"], "test.providence.not_null_dim_account_is_cash.ac783ea59a": ["model.providence.dim_account"], "test.providence.not_null_dim_account_budget_type.73ae332c56": ["model.providence.dim_account"], "test.providence.accepted_values_dim_account_budget_type__checking__savings__cash__creditCard__lineOfCredit__otherAsset__otherLiability__mortgage__autoLoan__studentLoan__personalLoan__medicalDebt__otherDebt.6e20bce7f1": ["model.providence.dim_account"], "test.providence.not_null_dim_account_updated_at.525779dd6b": ["model.providence.dim_account"], "test.providence.dbt_utils_expression_is_true_dim_account__vendor_id_is_null_and_vendor_type_is_null_and_vendor_id_is_null_or_not_vendor_id_is_null_and_vendor_type_is_null_and_vendor_id_is_null_.0b5ef6ac94": ["model.providence.dim_account"], "test.providence.not_null_fact_accounting_transaction_id.3dbfbe0498": ["model.providence.fact_accounting_transaction"], "test.providence.unique_fact_accounting_transaction_id.abe672c4c0": ["model.providence.fact_accounting_transaction"], "test.providence.relationships_fact_accounting_transaction_super_id__id__ref_stg_ynab_transaction_.80e6b77b9c": ["model.providence.fact_accounting_transaction", "model.providence.stg_ynab_transaction"], "test.providence.not_null_fact_accounting_transaction_amount.f3893c8d61": ["model.providence.fact_accounting_transaction"], "test.providence.not_null_fact_accounting_transaction_clearing_status.cad5f8ec19": ["model.providence.fact_accounting_transaction"], "test.providence.accepted_values_fact_accounting_transaction_clearing_status__cleared__uncleared__reconciled.0ee9b01241": ["model.providence.fact_accounting_transaction"], "test.providence.not_null_fact_accounting_transaction_is_approved.612d410c7d": ["model.providence.fact_accounting_transaction"], "test.providence.not_null_fact_accounting_transaction_budget_id.f23909fedb": ["model.providence.fact_accounting_transaction"], "test.providence.relationships_fact_accounting_transaction_budget_id__id__ref_dim_budget_.6fbd836a5a": ["model.providence.dim_budget", "model.providence.fact_accounting_transaction"], "test.providence.not_null_fact_accounting_transaction_account_id.3f40475ab6": ["model.providence.fact_accounting_transaction"], "test.providence.relationships_fact_accounting_transaction_account_id__id__ref_dim_account_.ac11c53d5e": ["model.providence.dim_account", "model.providence.fact_accounting_transaction"], "test.providence.relationships_fact_accounting_transaction_category_id__id__ref_dim_budget_category_.30e27b814d": ["model.providence.dim_budget_category", "model.providence.fact_accounting_transaction"], "test.providence.relationships_fact_accounting_transaction_payee_id__id__ref_dim_payee_.9c6ca5ae6d": ["model.providence.dim_payee", "model.providence.fact_accounting_transaction"], "test.providence.relationships_fact_accounting_transaction_transfer_account_id__id__ref_dim_account_.18c7cb303c": ["model.providence.dim_account", "model.providence.fact_accounting_transaction"], "test.providence.not_null_fact_accounting_transaction_date_id.99234ccbf5": ["model.providence.fact_accounting_transaction"], "test.providence.relationships_fact_accounting_transaction_date_id__id__ref_dim_date_.187c6e8831": ["model.providence.dim_date", "model.providence.fact_accounting_transaction"], "test.providence.not_null_fact_accounting_transaction_updated_at.aa62b60ad2": ["model.providence.fact_accounting_transaction"], "test.providence.unique_fact_vendor_transaction_id.65aee356e1": ["model.providence.fact_vendor_transaction"], "test.providence.not_null_fact_vendor_transaction_id.d6eb69ec40": ["model.providence.fact_vendor_transaction"], "test.providence.not_null_fact_vendor_transaction_description.3362e304ff": ["model.providence.fact_vendor_transaction"], "test.providence.not_null_fact_vendor_transaction_date_id.0908222b76": ["model.providence.fact_vendor_transaction"], "test.providence.relationships_fact_vendor_transaction_date_id__id__ref_dim_date_.9733ab2ab4": ["model.providence.dim_date", "model.providence.fact_vendor_transaction"], "test.providence.not_null_fact_vendor_transaction_account_id.ea995f0f67": ["model.providence.fact_vendor_transaction"], "test.providence.relationships_fact_vendor_transaction_account_id__id__ref_dim_account_.9bab398a5f": ["model.providence.dim_account", "model.providence.fact_vendor_transaction"], "test.providence.not_null_fact_vendor_transaction_amount.c1ca65fe5a": ["model.providence.fact_vendor_transaction"], "test.providence.not_null_fact_vendor_transaction_updated_at.264f91d0c8": ["model.providence.fact_vendor_transaction"], "test.providence.unique_fact_bank_statement_id.397aebff0f": ["model.providence.fact_bank_statement"], "test.providence.not_null_fact_bank_statement_id.2d02dd086a": ["model.providence.fact_bank_statement"], "test.providence.not_null_fact_bank_statement_begin_date_id.9a523d8288": ["model.providence.fact_bank_statement"], "test.providence.relationships_fact_bank_statement_begin_date_id__id__ref_dim_date_.60ddefb0f2": ["model.providence.dim_date", "model.providence.fact_bank_statement"], "test.providence.not_null_fact_bank_statement_end_date_id.4b8a538677": ["model.providence.fact_bank_statement"], "test.providence.relationships_fact_bank_statement_end_date_id__id__ref_dim_date_.169ccb9dca": ["model.providence.dim_date", "model.providence.fact_bank_statement"], "test.providence.not_null_fact_bank_statement_account_id.b3a3b1b348": ["model.providence.fact_bank_statement"], "test.providence.relationships_fact_bank_statement_account_id__id__ref_dim_account_.97a7e5c36b": ["model.providence.dim_account", "model.providence.fact_bank_statement"], "test.providence.not_null_fact_bank_statement_balance.7aedfd2ee7": ["model.providence.fact_bank_statement"], "test.providence.not_null_fact_bank_statement_updated_at.a742b62ac0": ["model.providence.fact_bank_statement"], "test.providence.not_null_stg_uob_statement_transacted_on.a78d4cf63d": ["model.providence.stg_uob_statement"], "test.providence.not_null_stg_uob_statement_description.f3790cced4": ["model.providence.stg_uob_statement"], "test.providence.not_null_stg_uob_statement_account_no.9685b8d186": ["model.providence.stg_uob_statement"], "test.providence.not_null_stg_uob_statement_name.f5d0e412c5": ["model.providence.stg_uob_statement"], "test.providence.not_null_stg_uob_statement_deposit.2b4b0881bc": ["model.providence.stg_uob_statement"], "test.providence.dbt_utils_accepted_range_stg_uob_statement_deposit__0_0.170b30f425": ["model.providence.stg_uob_statement"], "test.providence.not_null_stg_uob_statement_withdrawal.c8f860e586": ["model.providence.stg_uob_statement"], "test.providence.dbt_utils_accepted_range_stg_uob_statement_withdrawal__0_0.f91fe316bd": ["model.providence.stg_uob_statement"], "test.providence.not_null_stg_uob_statement_balance.82c010a26e": ["model.providence.stg_uob_statement"], "test.providence.not_null_stg_uob_statement_currency_code.c08da85da5": ["model.providence.stg_uob_statement"], "test.providence.not_null_stg_uob_statement_statement_begin.81f0d2c02d": ["model.providence.stg_uob_statement"], "test.providence.not_null_stg_uob_statement_statement_end.e47cd50840": ["model.providence.stg_uob_statement"], "test.providence.not_null_stg_uob_statement_processed_on.3e0942bd9a": ["model.providence.stg_uob_statement"], "test.providence.dbt_utils_expression_is_true_stg_uob_statement_statement_begin_statement_end.50f9a436ec": ["model.providence.stg_uob_statement"], "test.providence.dbt_utils_expression_is_true_stg_uob_statement_statement_end_processed_on.3e8211e730": ["model.providence.stg_uob_statement"], "test.providence.not_null_stg_simplygo_card_id.86b8c84d20": ["model.providence.stg_simplygo_card"], "test.providence.not_null_stg_simplygo_card_name.e0e9dd015c": ["model.providence.stg_simplygo_card"], "test.providence.not_null_stg_simplygo_card_scraped_on.f93674f0a8": ["model.providence.stg_simplygo_card"], "test.providence.not_null_stg_simplygo_trip_leg_traveled_on.87229fc8d2": ["model.providence.stg_simplygo_trip_leg"], "test.providence.not_null_stg_simplygo_trip_leg_begin_at.291c82b7fb": ["model.providence.stg_simplygo_trip_leg"], "test.providence.not_null_stg_simplygo_trip_leg_cost_sgd.0aecf580a3": ["model.providence.stg_simplygo_trip_leg"], "test.providence.dbt_utils_accepted_range_stg_simplygo_trip_leg_cost_sgd__0.c74a0dfd16": ["model.providence.stg_simplygo_trip_leg"], "test.providence.not_null_stg_simplygo_trip_leg_source.0e49a4cb22": ["model.providence.stg_simplygo_trip_leg"], "test.providence.not_null_stg_simplygo_trip_leg_destination.9c3cffae03": ["model.providence.stg_simplygo_trip_leg"], "test.providence.not_null_stg_simplygo_trip_leg_transport_mode.e8cf1b7757": ["model.providence.stg_simplygo_trip_leg"], "test.providence.accepted_values_stg_simplygo_trip_leg_transport_mode__Rail__Bus.8e309c76c6": ["model.providence.stg_simplygo_trip_leg"], "test.providence.not_null_stg_simplygo_trip_leg_card_id.e07401f8e4": ["model.providence.stg_simplygo_trip_leg"], "test.providence.relationships_stg_simplygo_trip_leg_card_id__id__ref_stg_simplygo_card_.b8ba3fa366": ["model.providence.stg_simplygo_card", "model.providence.stg_simplygo_trip_leg"], "test.providence.not_null_stg_simplygo_trip_leg_scraped_on.876fe1a10c": ["model.providence.stg_simplygo_trip_leg"], "test.providence.not_null_stg_ynab_budget_id.19ad775a50": ["model.providence.stg_ynab_budget"], "test.providence.not_null_stg_ynab_budget_name.b0cf7f0e50": ["model.providence.stg_ynab_budget"], "test.providence.not_null_stg_ynab_budget_modified_at.93673c612a": ["model.providence.stg_ynab_budget"], "test.providence.not_null_stg_ynab_budget_currency_code.5274f2c06f": ["model.providence.stg_ynab_budget"], "test.providence.not_null_stg_ynab_budget_currency_symbol.ad3b25fbf9": ["model.providence.stg_ynab_budget"], "test.providence.not_null_stg_ynab_budget_scraped_on.8cd2839ae1": ["model.providence.stg_ynab_budget"], "test.providence.not_null_stg_ynab_budget_category_id.2295c7fd05": ["model.providence.stg_ynab_budget_category"], "test.providence.not_null_stg_ynab_budget_category_name.5bb259202d": ["model.providence.stg_ynab_budget_category"], "test.providence.not_null_stg_ynab_budget_category_budget_id.890de93caf": ["model.providence.stg_ynab_budget_category"], "test.providence.not_null_stg_ynab_budget_category_category_group_id.3c4a91eef7": ["model.providence.stg_ynab_budget_category"], "test.providence.not_null_stg_ynab_budget_category_budget_amount.12e66c985c": ["model.providence.stg_ynab_budget_category"], "test.providence.not_null_stg_ynab_budget_category_budget_month.8aa7e53510": ["model.providence.stg_ynab_budget_category"], "test.providence.accepted_values_stg_ynab_budget_category_goal_type__Target_Category_Balance__Target_Category_Balance_by_Date__Monthly_Funding__Plan_Your_Spending.6267ac3ad8": ["model.providence.stg_ynab_budget_category"], "test.providence.not_null_stg_ynab_budget_category_is_deleted.acf5b15580": ["model.providence.stg_ynab_budget_category"], "test.providence.not_null_stg_ynab_budget_category_scraped_on.dcd1fccefe": ["model.providence.stg_ynab_budget_category"], "test.providence.dbt_utils_expression_is_true_stg_ynab_budget_category__goal_type_is_null_and_goal_amount_0_or_not_goal_type_is_null_and_goal_amount_0_.54da2491b8": ["model.providence.stg_ynab_budget_category"], "test.providence.not_null_stg_ynab_budget_category_group_id.6df0e0d0a3": ["model.providence.stg_ynab_budget_category_group"], "test.providence.not_null_stg_ynab_budget_category_group_name.12d7756d7e": ["model.providence.stg_ynab_budget_category_group"], "test.providence.not_null_stg_ynab_budget_category_group_is_deleted.2f5e288fd9": ["model.providence.stg_ynab_budget_category_group"], "test.providence.not_null_stg_ynab_budget_category_group_scraped_on.e523bbdd8d": ["model.providence.stg_ynab_budget_category_group"], "test.providence.not_null_stg_ynab_account_id.d72a2d3016": ["model.providence.stg_ynab_account"], "test.providence.not_null_stg_ynab_account_name.c20bd5cb7a": ["model.providence.stg_ynab_account"], "test.providence.not_null_stg_ynab_account_type.f5a8ae798e": ["model.providence.stg_ynab_account"], "test.providence.accepted_values_stg_ynab_account_type__checking__savings__cash__creditCard__lineOfCredit__otherAsset__otherLiability__mortgage__autoLoan__studentLoan__personalLoan__medicalDebt__otherDebt.c6021c65b1": ["model.providence.stg_ynab_account"], "test.providence.not_null_stg_ynab_account_on_budget.3e48a5817a": ["model.providence.stg_ynab_account"], "test.providence.not_null_stg_ynab_account_is_closed.1a37a6ca85": ["model.providence.stg_ynab_account"], "test.providence.not_null_stg_ynab_account_is_deleted.790da8023f": ["model.providence.stg_ynab_account"], "test.providence.not_null_stg_ynab_account_payee_id.d616757f19": ["model.providence.stg_ynab_account"], "test.providence.relationships_stg_ynab_account_payee_id__id__ref_stg_ynab_payee_.ea7b377d50": ["model.providence.stg_ynab_account", "model.providence.stg_ynab_payee"], "test.providence.not_null_stg_ynab_account_scraped_on.60f3690164": ["model.providence.stg_ynab_account"], "test.providence.not_null_stg_ynab_payee_id.e1b6fba8da": ["model.providence.stg_ynab_payee"], "test.providence.not_null_stg_ynab_payee_name.9eb4d84453": ["model.providence.stg_ynab_payee"], "test.providence.relationships_stg_ynab_payee_transfer_account_id__id__ref_stg_ynab_account_.c236b848e6": ["model.providence.stg_ynab_account", "model.providence.stg_ynab_payee"], "test.providence.not_null_stg_ynab_payee_scraped_on.ba40d87921": ["model.providence.stg_ynab_payee"], "test.providence.not_null_stg_ynab_transaction_id.d13932320d": ["model.providence.stg_ynab_transaction"], "test.providence.not_null_stg_ynab_transaction_amount.2a25bb15f2": ["model.providence.stg_ynab_transaction"], "test.providence.not_null_stg_ynab_transaction_clearing_status.e60e57e998": ["model.providence.stg_ynab_transaction"], "test.providence.accepted_values_stg_ynab_transaction_clearing_status__cleared__uncleared__reconciled.2076da252a": ["model.providence.stg_ynab_transaction"], "test.providence.not_null_stg_ynab_transaction_is_approved.d8314cbd36": ["model.providence.stg_ynab_transaction"], "test.providence.not_null_stg_ynab_transaction_is_deleted.bd2a11bbfa": ["model.providence.stg_ynab_transaction"], "test.providence.not_null_stg_ynab_transaction_budget_id.d943d0eb3d": ["model.providence.stg_ynab_transaction"], "test.providence.relationships_stg_ynab_transaction_budget_id__id__ref_stg_ynab_budget_.d38d14188a": ["model.providence.stg_ynab_budget", "model.providence.stg_ynab_transaction"], "test.providence.not_null_stg_ynab_transaction_account_id.23442828ee": ["model.providence.stg_ynab_transaction"], "test.providence.relationships_stg_ynab_transaction_account_id__id__ref_stg_ynab_account_.eac4609a6d": ["model.providence.stg_ynab_account", "model.providence.stg_ynab_transaction"], "test.providence.relationships_stg_ynab_transaction_payee_id__id__ref_stg_ynab_payee_.78bd80cdf2": ["model.providence.stg_ynab_payee", "model.providence.stg_ynab_transaction"], "test.providence.relationships_stg_ynab_transaction_transfer_account_id__id__ref_stg_ynab_account_.c8d0e0c625": ["model.providence.stg_ynab_account", "model.providence.stg_ynab_transaction"], "test.providence.not_null_stg_ynab_transaction_date.dd6a72adb5": ["model.providence.stg_ynab_transaction"], "test.providence.not_null_stg_ynab_transaction_scraped_on.8275f75f0f": ["model.providence.stg_ynab_transaction"], "test.providence.not_null_stg_ynab_subtransaction_id.b580471f04": ["model.providence.stg_ynab_subtransaction"], "test.providence.not_null_stg_ynab_subtransaction_super_id.3e85af220b": ["model.providence.stg_ynab_subtransaction"], "test.providence.relationships_stg_ynab_subtransaction_super_id__id__ref_stg_ynab_transaction_.73b591fb02": ["model.providence.stg_ynab_subtransaction", "model.providence.stg_ynab_transaction"], "test.providence.relationships_stg_ynab_subtransaction_payee_id__id__ref_stg_ynab_payee_.e11d61d39e": ["model.providence.stg_ynab_payee", "model.providence.stg_ynab_subtransaction"], "test.providence.relationships_stg_ynab_subtransaction_transfer_account_id__id__ref_stg_ynab_account_.bb3848f847": ["model.providence.stg_ynab_account", "model.providence.stg_ynab_subtransaction"], "test.providence.not_null_stg_ynab_subtransaction_is_deleted.d73738e2b3": ["model.providence.stg_ynab_subtransaction"], "test.providence.not_null_stg_ynab_subtransaction_amount.c934e50708": ["model.providence.stg_ynab_subtransaction"], "test.providence.not_null_stg_ynab_subtransaction_scraped_on.c78c26f3c0": ["model.providence.stg_ynab_subtransaction"], "test.providence.unique_stg_map_budget_account_id.0ccaae2aa8": ["model.providence.stg_map_budget_account"], "test.providence.not_null_stg_map_budget_account_id.ea6ac451bf": ["model.providence.stg_map_budget_account"], "test.providence.not_null_stg_map_budget_account_budget_account_id.27423bc86d": ["model.providence.stg_map_budget_account"], "test.providence.relationships_stg_map_budget_account_budget_account_id__id__ref_stg_ynab_account_.aacc590115": ["model.providence.stg_map_budget_account", "model.providence.stg_ynab_account"], "test.providence.not_null_stg_map_budget_account_vendor.29789eda48": ["model.providence.stg_map_budget_account"], "test.providence.not_null_stg_map_budget_account_vendor_id.c24b2e8ed6": ["model.providence.stg_map_budget_account"], "test.providence.unique_stg_map_bank_card_id.75ca08ea40": ["model.providence.stg_map_bank_card"], "test.providence.not_null_stg_map_bank_card_id.09471a98aa": ["model.providence.stg_map_bank_card"], "test.providence.not_null_stg_map_bank_card_bank_card_id.b649121a27": ["model.providence.stg_map_bank_card"], "test.providence.not_null_stg_map_bank_card_vendor.1ba813a4d1": ["model.providence.stg_map_bank_card"], "test.providence.not_null_stg_map_bank_card_vendor_id.3a45da337d": ["model.providence.stg_map_bank_card"], "test.providence.not_null_mart_finance_dashboard_year_month.47e90c339f": ["model.providence.mart_finance_dashboard"], "test.providence.not_null_mart_finance_dashboard_year_month_week.c9ecab3de7": ["model.providence.mart_finance_dashboard"], "test.providence.not_null_mart_finance_dashboard_transaction_amount.09eb653cfe": ["model.providence.mart_finance_dashboard"], "test.providence.not_null_mart_finance_dashboard_cash_amount.2a3706a614": ["model.providence.mart_finance_dashboard"], "test.providence.not_null_mart_finance_dashboard_transaction_date.4519375766": ["model.providence.mart_finance_dashboard"], "test.providence.not_null_mart_finance_dashboard_transaction_is_transfer.390481d8b9": ["model.providence.mart_finance_dashboard"], "test.providence.not_null_mart_finance_dashboard_transaction_clearing_status.33f9be88e4": ["model.providence.mart_finance_dashboard"], "test.providence.accepted_values_mart_finance_dashboard_transaction_clearing_status__cleared__uncleared__reconciled.4eeccfbd75": ["model.providence.mart_finance_dashboard"], "test.providence.not_null_mart_finance_dashboard_account_is_cash.0a7cd4cd8f": ["model.providence.mart_finance_dashboard"], "test.providence.not_null_mart_finance_dashboard_budget_category_group.71e2c2c6f9": ["model.providence.mart_finance_dashboard"], "test.providence.not_null_mart_finance_dashboard_budget_category.e4ec9c87e4": ["model.providence.mart_finance_dashboard"], "test.providence.not_null_mart_finance_dashboard_budget_is_expense.7aed88128f": ["model.providence.mart_finance_dashboard"], "test.providence.not_null_mart_finance_dashboard_payee_name.4cd9b29c1e": ["model.providence.mart_finance_dashboard"], "test.providence.not_null_mart_finance_dashboard_spending.d7b65d1f2a": ["model.providence.mart_finance_dashboard"], "test.providence.dbt_utils_accepted_range_mart_finance_dashboard_spending__0.c6cd9ffb6a": ["model.providence.mart_finance_dashboard"], "test.providence.not_null_mart_finance_dashboard_is_unaccounted.3357c4ad5d": ["model.providence.mart_finance_dashboard"], "test.providence.not_null_mart_finance_dashboard_income.b8db769c61": ["model.providence.mart_finance_dashboard"], "test.providence.dbt_utils_accepted_range_mart_finance_dashboard_income__0.c3a8aaeda4": ["model.providence.mart_finance_dashboard"], "test.providence.not_null_mart_finance_dashboard_is_passive.a5e0366134": ["model.providence.mart_finance_dashboard"], "test.providence.not_null_mart_finance_dashboard_cash_flow_year_month.ea793bcf3a": ["model.providence.mart_finance_dashboard_cash_flow"], "test.providence.not_null_mart_finance_dashboard_cash_flow_src.06ff43a6ef": ["model.providence.mart_finance_dashboard_cash_flow"], "test.providence.not_null_mart_finance_dashboard_cash_flow_dest.fc8696faaf": ["model.providence.mart_finance_dashboard_cash_flow"], "test.providence.not_null_mart_finance_dashboard_cash_flow_amount.fa4c32a1eb": ["model.providence.mart_finance_dashboard_cash_flow"], "test.providence.dbt_utils_accepted_range_mart_finance_dashboard_cash_flow_amount__False__0.aa4c477046": ["model.providence.mart_finance_dashboard_cash_flow"], "test.providence.not_null_mart_finance_dashboard_uncleared_transaction_date.efabc12149": ["model.providence.mart_finance_dashboard_uncleared"], "test.providence.not_null_mart_finance_dashboard_uncleared_transaction_amount.1b84e894dc": ["model.providence.mart_finance_dashboard_uncleared"], "test.providence.not_null_mart_finance_dashboard_uncleared_in_accounting.fec8bb6204": ["model.providence.mart_finance_dashboard_uncleared"], "test.providence.not_null_mart_finance_dashboard_uncleared_in_vendor.74fbe73720": ["model.providence.mart_finance_dashboard_uncleared"], "test.providence.not_null_mart_ynab_sink_import_id.6d078e189e": ["model.providence.mart_ynab_sink"], "test.providence.unique_mart_ynab_sink_import_id.65f58d2771": ["model.providence.mart_ynab_sink"], "test.providence.not_null_mart_ynab_sink_account_id.2b2c80b8ea": ["model.providence.mart_ynab_sink"], "test.providence.relationships_mart_ynab_sink_account_id__id__ref_stg_ynab_account_.e853f9c233": ["model.providence.mart_ynab_sink", "model.providence.stg_ynab_account"], "test.providence.not_null_mart_ynab_sink_amount.75f39d0a0d": ["model.providence.mart_ynab_sink"], "test.providence.not_null_mart_ynab_sink_payee_id.026a9c67e0": ["model.providence.mart_ynab_sink"], "test.providence.relationships_mart_ynab_sink_payee_id__id__ref_stg_ynab_payee_.84cf2f46ae": ["model.providence.mart_ynab_sink", "model.providence.stg_ynab_payee"], "test.providence.not_null_mart_ynab_sink_category_id.53e2258bb5": ["model.providence.mart_ynab_sink"], "test.providence.relationships_mart_ynab_sink_category_id__id__ref_stg_ynab_budget_category_.1a96b31a48": ["model.providence.mart_ynab_sink", "model.providence.stg_ynab_budget_category"], "test.providence.not_null_mart_ynab_sink_cleared.92a7e7959b": ["model.providence.mart_ynab_sink"], "test.providence.accepted_values_mart_ynab_sink_cleared__cleared__uncleared__reconciled.3f6aab68ab": ["model.providence.mart_ynab_sink"], "test.providence.not_null_mart_ynab_sink_approved.b0f3417c9c": ["model.providence.mart_ynab_sink"], "test.providence.accepted_values_mart_ynab_sink_approved__True__False.3528c7cffd": ["model.providence.mart_ynab_sink"], "test.providence.relationships_mart_ynab_sink_split_payee_id__id__ref_stg_ynab_payee_.badb4d2855": ["model.providence.mart_ynab_sink", "model.providence.stg_ynab_payee"], "test.providence.dbt_utils_expression_is_true_mart_ynab_sink_length_import_id_36.38cb3a771e": ["model.providence.mart_ynab_sink"], "test.providence.not_null_ynab_payee_flag_payee_id.f87d99fc97": ["seed.providence.ynab_payee_flag"], "test.providence.relationships_ynab_payee_flag_payee_id__id__ref_stg_ynab_payee_.29b3512f64": ["model.providence.stg_ynab_payee", "seed.providence.ynab_payee_flag"], "test.providence.not_null_ynab_payee_flag_is_unaccounted.56254e5476": ["seed.providence.ynab_payee_flag"], "test.providence.not_null_ynab_payee_flag_is_passive.1faee07e8d": ["seed.providence.ynab_payee_flag"], "source.providence.uob.source_uob": [], "source.providence.simplygo.source_simplygo": [], "source.providence.ynab.source_ynab": [], "source.providence.mapping.map_account": [], "source.providence.mapping.map_bank_card": []}, "child_map": {"model.providence.int_unique_transaction": ["model.providence.fact_accounting_transaction", "model.providence.mart_finance_dashboard_uncleared", "test.providence.accepted_values_int_unique_transaction_clearing_status__cleared__uncleared__reconciled.dfe24d24da", "test.providence.accepted_values_int_unique_transaction_is_deleted__False.789e301767", "test.providence.not_null_int_unique_transaction_account_id.ed556e32fe", "test.providence.not_null_int_unique_transaction_amount.fa0cc48955", "test.providence.not_null_int_unique_transaction_budget_id.d1f3858f87", "test.providence.not_null_int_unique_transaction_clearing_status.60bf364a93", "test.providence.not_null_int_unique_transaction_date.821ad44e28", "test.providence.not_null_int_unique_transaction_id.3961df60ec", "test.providence.not_null_int_unique_transaction_is_approved.15482bf359", "test.providence.not_null_int_unique_transaction_is_deleted.5e8e178bd0", "test.providence.not_null_int_unique_transaction_scraped_on.bb329b36ca", "test.providence.relationships_int_unique_transaction_account_id__id__ref_stg_ynab_account_.b8c211589f", "test.providence.relationships_int_unique_transaction_budget_id__id__ref_stg_ynab_budget_.959d640562", "test.providence.relationships_int_unique_transaction_payee_id__id__ref_stg_ynab_payee_.632982383f", "test.providence.relationships_int_unique_transaction_transfer_account_id__id__ref_stg_ynab_account_.1b44f14cac", "test.providence.unique_int_unique_transaction_id.8055ebb23a"], "model.providence.int_unique_budget_category": ["model.providence.dim_budget_category", "model.providence.fact_monthly_budget", "test.providence.accepted_values_int_unique_budget_category_goal_type__Target_Category_Balance__Target_Category_Balance_by_Date__Monthly_Funding__Plan_Your_Spending.45e0ec7ee8", "test.providence.not_null_int_unique_budget_category_budget_amount.e7ca554d6e", "test.providence.not_null_int_unique_budget_category_budget_id.b98915ceea", "test.providence.not_null_int_unique_budget_category_budget_month.2a97219788", "test.providence.not_null_int_unique_budget_category_category_group_id.d241f6f8ec", "test.providence.not_null_int_unique_budget_category_category_id.9ac0e3c686", "test.providence.not_null_int_unique_budget_category_id.30b665b0b2", "test.providence.not_null_int_unique_budget_category_is_deleted.5762ff5711", "test.providence.not_null_int_unique_budget_category_name.782a7b0adc", "test.providence.not_null_int_unique_budget_category_updated_at.3f6f47730e", "test.providence.relationships_int_unique_budget_category_budget_id__id__ref_stg_ynab_budget_.908b88912b", "test.providence.unique_int_unique_budget_category_id.6c900d0e93"], "model.providence.int_unique_enriched_bank_statement": ["model.providence.fact_vendor_transaction", "model.providence.fact_vendor_transaction", "test.providence.assert_sum_bank_transaction_amount_eq_account_balance", "test.providence.dbt_utils_accepted_range_int_unique_enriched_bank_statement_deposit__0_0.ca148b59ce", "test.providence.dbt_utils_accepted_range_int_unique_enriched_bank_statement_withdrawal__0_0.0958cf5ba4", "test.providence.dbt_utils_expression_is_true_int_unique_enriched_bank_statement_statement_begin_statement_end.e45e89334b", "test.providence.dbt_utils_expression_is_true_int_unique_enriched_bank_statement_statement_end_processed_on.ba42e179c9", "test.providence.not_null_int_unique_enriched_bank_statement_account_id.0b1f57b3e2", "test.providence.not_null_int_unique_enriched_bank_statement_account_no.f52fb903a9", "test.providence.not_null_int_unique_enriched_bank_statement_balance.36858c8aa9", "test.providence.not_null_int_unique_enriched_bank_statement_currency_code.282a32233c", "test.providence.not_null_int_unique_enriched_bank_statement_deposit.70eb54a69c", "test.providence.not_null_int_unique_enriched_bank_statement_description.2b182c3f17", "test.providence.not_null_int_unique_enriched_bank_statement_id.857bc95776", "test.providence.not_null_int_unique_enriched_bank_statement_name.52c8ba8d17", "test.providence.not_null_int_unique_enriched_bank_statement_processed_on.6e6a0ea6ac", "test.providence.not_null_int_unique_enriched_bank_statement_statement_begin.7709bb26cc", "test.providence.not_null_int_unique_enriched_bank_statement_statement_end.ace15564ad", "test.providence.not_null_int_unique_enriched_bank_statement_transacted_on.6858c5f780", "test.providence.not_null_int_unique_enriched_bank_statement_withdrawal.0a1bf24b4a", "test.providence.relationships_int_unique_enriched_bank_statement_account_id__id__ref_dim_account_.192e503d3c", "test.providence.unique_int_unique_enriched_bank_statement_id.0b266c74fa"], "model.providence.dim_budget_category": ["model.providence.fact_accounting_transaction", "model.providence.mart_finance_dashboard", "test.providence.accepted_values_dim_budget_category_goal_type__Target_Category_Balance__Target_Category_Balance_by_Date__Monthly_Funding__Plan_Your_Spending.f4e6afe66e", "test.providence.dbt_utils_expression_is_true_dim_budget_category_effective_at_expired_at.d66027b17f", "test.providence.dbt_utils_expression_is_true_dim_budget_category_not_goal_type_is_null_and_goal_amount_0_or_goal_type_is_null_and_goal_amount_0_.4a71e79beb", "test.providence.not_null_dim_budget_category_budget_id.1b25eed24d", "test.providence.not_null_dim_budget_category_category_id.1064e4c951", "test.providence.not_null_dim_budget_category_effective_at.8d5d59207f", "test.providence.not_null_dim_budget_category_expired_at.c9ef0053bb", "test.providence.not_null_dim_budget_category_id.77da7ecc72", "test.providence.not_null_dim_budget_category_is_current.91170880f8", "test.providence.not_null_dim_budget_category_is_deleted.f8f14e0267", "test.providence.not_null_dim_budget_category_is_expense.6dbe0ce48b", "test.providence.not_null_dim_budget_category_name.02f719e72b", "test.providence.not_null_dim_budget_category_updated_at.0346f86c7a", "test.providence.relationships_dim_budget_category_budget_id__id__ref_dim_budget_.e8d44a263b", "test.providence.relationships_dim_budget_category_category_group_id__id__ref_stg_ynab_budget_category_group_.4610ab6f13", "test.providence.relationships_fact_accounting_transaction_category_id__id__ref_dim_budget_category_.30e27b814d", "test.providence.relationships_fact_monthly_budget_category_id__id__ref_dim_budget_category_.621c0ef023", "test.providence.unique_dim_budget_category_id.efbc2bbaa5"], "model.providence.dim_date": ["model.providence.mart_finance_dashboard", "test.providence.dbt_utils_accepted_range_dim_date_day_of_month__31__1.15b4b189b7", "test.providence.dbt_utils_accepted_range_dim_date_day_of_week__6__0.bfe7eaced3", "test.providence.dbt_utils_accepted_range_dim_date_month_of_year__12__1.e6a5877b18", "test.providence.dbt_utils_expression_is_true_dim_date_len_month_short_3.860ad91e49", "test.providence.dbt_utils_expression_is_true_dim_date_len_weekday_short_3.54c7bc245e", "test.providence.not_null_dim_date_date.78f11e7735", "test.providence.not_null_dim_date_day_of_month.8ae109937d", "test.providence.not_null_dim_date_day_of_week.45321d6610", "test.providence.not_null_dim_date_id.49e434ad59", "test.providence.not_null_dim_date_is_weekend.cf6d8ca02c", "test.providence.not_null_dim_date_month_name.f33095fb66", "test.providence.not_null_dim_date_month_of_year.951ad9a5b5", "test.providence.not_null_dim_date_month_short.0235b40229", "test.providence.not_null_dim_date_updated_at.edca938145", "test.providence.not_null_dim_date_weekday_name.33b8ebe86e", "test.providence.not_null_dim_date_year.aac8e263ab", "test.providence.relationships_fact_accounting_transaction_date_id__id__ref_dim_date_.187c6e8831", "test.providence.relationships_fact_bank_statement_begin_date_id__id__ref_dim_date_.60ddefb0f2", "test.providence.relationships_fact_bank_statement_end_date_id__id__ref_dim_date_.169ccb9dca", "test.providence.relationships_fact_monthly_budget_month_date_id__id__ref_dim_date_.8ccdca7d0c", "test.providence.relationships_fact_public_transport_trip_leg_travel_date_id__id__ref_dim_date_.c0364ad857", "test.providence.relationships_fact_vendor_transaction_date_id__id__ref_dim_date_.9733ab2ab4", "test.providence.unique_dim_date_id.54c6b7737b"], "model.providence.dim_bank_card": ["test.providence.not_null_dim_bank_card_id.37ec70b874", "test.providence.not_null_dim_bank_card_name.f3104c4b11", "test.providence.not_null_dim_bank_card_updated_at.a46061ae1d", "test.providence.relationships_fact_public_transport_trip_leg_bank_card_id__id__ref_dim_bank_card_.e54f7eda8c", "test.providence.unique_dim_bank_card_id.030c894cd7"], "model.providence.fact_vendor_transaction": ["model.providence.mart_finance_dashboard_uncleared", "test.providence.assert_sum_bank_transaction_amount_eq_account_balance", "test.providence.not_null_fact_vendor_transaction_account_id.ea995f0f67", "test.providence.not_null_fact_vendor_transaction_amount.c1ca65fe5a", "test.providence.not_null_fact_vendor_transaction_date_id.0908222b76", "test.providence.not_null_fact_vendor_transaction_description.3362e304ff", "test.providence.not_null_fact_vendor_transaction_id.d6eb69ec40", "test.providence.not_null_fact_vendor_transaction_updated_at.264f91d0c8", "test.providence.relationships_fact_vendor_transaction_account_id__id__ref_dim_account_.9bab398a5f", "test.providence.relationships_fact_vendor_transaction_date_id__id__ref_dim_date_.9733ab2ab4", "test.providence.unique_fact_vendor_transaction_id.65aee356e1"], "model.providence.fact_monthly_budget": ["test.providence.not_null_fact_monthly_budget_amount.ea62317861", "test.providence.not_null_fact_monthly_budget_budget_id.da8421df1a", "test.providence.not_null_fact_monthly_budget_category_id.8a82ce7473", "test.providence.not_null_fact_monthly_budget_id.10882a8339", "test.providence.not_null_fact_monthly_budget_month_date_id.15a822a005", "test.providence.not_null_fact_monthly_budget_updated_at.019c96409d", "test.providence.relationships_fact_monthly_budget_budget_id__id__ref_dim_budget_.0d161cb61b", "test.providence.relationships_fact_monthly_budget_category_id__id__ref_dim_budget_category_.621c0ef023", "test.providence.relationships_fact_monthly_budget_month_date_id__id__ref_dim_date_.8ccdca7d0c", "test.providence.unique_fact_monthly_budget_id.9411ccab94"], "model.providence.fact_public_transport_trip_leg": ["model.providence.mart_ynab_sink", "test.providence.accepted_values_fact_public_transport_trip_leg_transport_mode__Rail__Bus.d071843ebd", "test.providence.dbt_utils_accepted_range_fact_public_transport_trip_leg_cost_sgd__0.b499fccafb", "test.providence.not_null_fact_public_transport_trip_leg_account_id.c516df574d", "test.providence.not_null_fact_public_transport_trip_leg_bank_card_id.a699f6f8fe", "test.providence.not_null_fact_public_transport_trip_leg_cost_sgd.fb7f50e486", "test.providence.not_null_fact_public_transport_trip_leg_destination.f0b3c0c527", "test.providence.not_null_fact_public_transport_trip_leg_id.11e3c6b565", "test.providence.not_null_fact_public_transport_trip_leg_is_billed.e7b02e4221", "test.providence.not_null_fact_public_transport_trip_leg_source.e3b36ba6ac", "test.providence.not_null_fact_public_transport_trip_leg_transport_mode.61559e0639", "test.providence.not_null_fact_public_transport_trip_leg_travel_date_id.5aeebaf59d", "test.providence.not_null_fact_public_transport_trip_leg_traveled_on.20509891d1", "test.providence.not_null_fact_public_transport_trip_leg_updated_at.266160af5a", "test.providence.relationships_fact_public_transport_trip_leg_account_id__id__ref_dim_account_.45face645f", "test.providence.relationships_fact_public_transport_trip_leg_bank_card_id__id__ref_dim_bank_card_.e54f7eda8c", "test.providence.relationships_fact_public_transport_trip_leg_travel_date_id__id__ref_dim_date_.c0364ad857", "test.providence.unique_fact_public_transport_trip_leg_id.7753bf7410"], "model.providence.fact_accounting_transaction": ["model.providence.mart_finance_dashboard", "model.providence.mart_finance_dashboard_uncleared", "model.providence.mart_finance_dashboard_uncleared", "model.providence.mart_ynab_sink", "test.providence.accepted_values_fact_accounting_transaction_clearing_status__cleared__uncleared__reconciled.0ee9b01241", "test.providence.not_null_fact_accounting_transaction_account_id.3f40475ab6", "test.providence.not_null_fact_accounting_transaction_amount.f3893c8d61", "test.providence.not_null_fact_accounting_transaction_budget_id.f23909fedb", "test.providence.not_null_fact_accounting_transaction_clearing_status.cad5f8ec19", "test.providence.not_null_fact_accounting_transaction_date_id.99234ccbf5", "test.providence.not_null_fact_accounting_transaction_id.3dbfbe0498", "test.providence.not_null_fact_accounting_transaction_is_approved.612d410c7d", "test.providence.not_null_fact_accounting_transaction_updated_at.aa62b60ad2", "test.providence.relationships_fact_accounting_transaction_account_id__id__ref_dim_account_.ac11c53d5e", "test.providence.relationships_fact_accounting_transaction_budget_id__id__ref_dim_budget_.6fbd836a5a", "test.providence.relationships_fact_accounting_transaction_category_id__id__ref_dim_budget_category_.30e27b814d", "test.providence.relationships_fact_accounting_transaction_date_id__id__ref_dim_date_.187c6e8831", "test.providence.relationships_fact_accounting_transaction_payee_id__id__ref_dim_payee_.9c6ca5ae6d", "test.providence.relationships_fact_accounting_transaction_super_id__id__ref_stg_ynab_transaction_.80e6b77b9c", "test.providence.relationships_fact_accounting_transaction_transfer_account_id__id__ref_dim_account_.18c7cb303c", "test.providence.unique_fact_accounting_transaction_id.abe672c4c0"], "model.providence.dim_payee": ["model.providence.mart_finance_dashboard", "test.providence.not_null_dim_payee_id.5bb6244959", "test.providence.not_null_dim_payee_is_passive.6c619654a1", "test.providence.not_null_dim_payee_is_unaccounted.6d3f15be34", "test.providence.not_null_dim_payee_name.0471202f5e", "test.providence.not_null_dim_payee_updated_at.f6242bcd60", "test.providence.relationships_dim_payee_transfer_account_id__id__ref_dim_account_.e25f5dbae6", "test.providence.relationships_fact_accounting_transaction_payee_id__id__ref_dim_payee_.9c6ca5ae6d", "test.providence.unique_dim_payee_id.1b302dbda3"], "model.providence.dim_budget": ["test.providence.dbt_utils_expression_is_true_dim_budget_len_currency_code_3.227efc4fe7", "test.providence.not_null_dim_budget_currency_code.05cec94be1", "test.providence.not_null_dim_budget_currency_symbol.392bbc29a4", "test.providence.not_null_dim_budget_id.eabdd80ba9", "test.providence.not_null_dim_budget_modified_at.32d713448e", "test.providence.not_null_dim_budget_name.9d76c5e6d9", "test.providence.not_null_dim_budget_updated_at.6ff71eb898", "test.providence.relationships_dim_budget_category_budget_id__id__ref_dim_budget_.e8d44a263b", "test.providence.relationships_fact_accounting_transaction_budget_id__id__ref_dim_budget_.6fbd836a5a", "test.providence.relationships_fact_monthly_budget_budget_id__id__ref_dim_budget_.0d161cb61b", "test.providence.unique_dim_budget_id.3db1895c25"], "model.providence.fact_bank_statement": ["test.providence.not_null_fact_bank_statement_account_id.b3a3b1b348", "test.providence.not_null_fact_bank_statement_balance.7aedfd2ee7", "test.providence.not_null_fact_bank_statement_begin_date_id.9a523d8288", "test.providence.not_null_fact_bank_statement_end_date_id.4b8a538677", "test.providence.not_null_fact_bank_statement_id.2d02dd086a", "test.providence.not_null_fact_bank_statement_updated_at.a742b62ac0", "test.providence.relationships_fact_bank_statement_account_id__id__ref_dim_account_.97a7e5c36b", "test.providence.relationships_fact_bank_statement_begin_date_id__id__ref_dim_date_.60ddefb0f2", "test.providence.relationships_fact_bank_statement_end_date_id__id__ref_dim_date_.169ccb9dca", "test.providence.unique_fact_bank_statement_id.397aebff0f"], "model.providence.dim_account": ["model.providence.fact_bank_statement", "model.providence.fact_public_transport_trip_leg", "model.providence.int_unique_enriched_bank_statement", "model.providence.mart_finance_dashboard", "model.providence.mart_finance_dashboard_uncleared", "test.providence.accepted_values_dim_account_budget_type__checking__savings__cash__creditCard__lineOfCredit__otherAsset__otherLiability__mortgage__autoLoan__studentLoan__personalLoan__medicalDebt__otherDebt.6e20bce7f1", "test.providence.dbt_utils_expression_is_true_dim_account__vendor_id_is_null_and_vendor_type_is_null_and_vendor_id_is_null_or_not_vendor_id_is_null_and_vendor_type_is_null_and_vendor_id_is_null_.0b5ef6ac94", "test.providence.not_null_dim_account_budget_type.73ae332c56", "test.providence.not_null_dim_account_id.c525515029", "test.providence.not_null_dim_account_is_cash.ac783ea59a", "test.providence.not_null_dim_account_is_closed.4aefd67aa2", "test.providence.not_null_dim_account_is_deleted.249d707245", "test.providence.not_null_dim_account_name.69795079a1", "test.providence.not_null_dim_account_updated_at.525779dd6b", "test.providence.relationships_dim_payee_transfer_account_id__id__ref_dim_account_.e25f5dbae6", "test.providence.relationships_fact_accounting_transaction_account_id__id__ref_dim_account_.ac11c53d5e", "test.providence.relationships_fact_accounting_transaction_transfer_account_id__id__ref_dim_account_.18c7cb303c", "test.providence.relationships_fact_bank_statement_account_id__id__ref_dim_account_.97a7e5c36b", "test.providence.relationships_fact_public_transport_trip_leg_account_id__id__ref_dim_account_.45face645f", "test.providence.relationships_fact_vendor_transaction_account_id__id__ref_dim_account_.9bab398a5f", "test.providence.relationships_int_unique_enriched_bank_statement_account_id__id__ref_dim_account_.192e503d3c", "test.providence.unique_dim_account_id.03098a72cc"], "model.providence.stg_uob_statement": ["model.providence.dim_account", "model.providence.fact_bank_statement", "model.providence.int_unique_enriched_bank_statement", "test.providence.dbt_utils_accepted_range_stg_uob_statement_deposit__0_0.170b30f425", "test.providence.dbt_utils_accepted_range_stg_uob_statement_withdrawal__0_0.f91fe316bd", "test.providence.dbt_utils_expression_is_true_stg_uob_statement_statement_begin_statement_end.50f9a436ec", "test.providence.dbt_utils_expression_is_true_stg_uob_statement_statement_end_processed_on.3e8211e730", "test.providence.not_null_stg_uob_statement_account_no.9685b8d186", "test.providence.not_null_stg_uob_statement_balance.82c010a26e", "test.providence.not_null_stg_uob_statement_currency_code.c08da85da5", "test.providence.not_null_stg_uob_statement_deposit.2b4b0881bc", "test.providence.not_null_stg_uob_statement_description.f3790cced4", "test.providence.not_null_stg_uob_statement_name.f5d0e412c5", "test.providence.not_null_stg_uob_statement_processed_on.3e0942bd9a", "test.providence.not_null_stg_uob_statement_statement_begin.81f0d2c02d", "test.providence.not_null_stg_uob_statement_statement_end.e47cd50840", "test.providence.not_null_stg_uob_statement_transacted_on.a78d4cf63d", "test.providence.not_null_stg_uob_statement_withdrawal.c8f860e586"], "model.providence.stg_simplygo_card": ["model.providence.dim_bank_card", "test.providence.not_null_stg_simplygo_card_id.86b8c84d20", "test.providence.not_null_stg_simplygo_card_name.e0e9dd015c", "test.providence.not_null_stg_simplygo_card_scraped_on.f93674f0a8", "test.providence.relationships_stg_simplygo_trip_leg_card_id__id__ref_stg_simplygo_card_.b8ba3fa366"], "model.providence.stg_simplygo_trip_leg": ["model.providence.fact_public_transport_trip_leg", "model.providence.fact_public_transport_trip_leg", "test.providence.accepted_values_stg_simplygo_trip_leg_transport_mode__Rail__Bus.8e309c76c6", "test.providence.dbt_utils_accepted_range_stg_simplygo_trip_leg_cost_sgd__0.c74a0dfd16", "test.providence.not_null_stg_simplygo_trip_leg_begin_at.291c82b7fb", "test.providence.not_null_stg_simplygo_trip_leg_card_id.e07401f8e4", "test.providence.not_null_stg_simplygo_trip_leg_cost_sgd.0aecf580a3", "test.providence.not_null_stg_simplygo_trip_leg_destination.9c3cffae03", "test.providence.not_null_stg_simplygo_trip_leg_scraped_on.876fe1a10c", "test.providence.not_null_stg_simplygo_trip_leg_source.0e49a4cb22", "test.providence.not_null_stg_simplygo_trip_leg_transport_mode.e8cf1b7757", "test.providence.not_null_stg_simplygo_trip_leg_traveled_on.87229fc8d2", "test.providence.relationships_stg_simplygo_trip_leg_card_id__id__ref_stg_simplygo_card_.b8ba3fa366"], "model.providence.stg_ynab_budget_category_group": ["model.providence.dim_budget_category", "test.providence.not_null_stg_ynab_budget_category_group_id.6df0e0d0a3", "test.providence.not_null_stg_ynab_budget_category_group_is_deleted.2f5e288fd9", "test.providence.not_null_stg_ynab_budget_category_group_name.12d7756d7e", "test.providence.not_null_stg_ynab_budget_category_group_scraped_on.e523bbdd8d", "test.providence.relationships_dim_budget_category_category_group_id__id__ref_stg_ynab_budget_category_group_.4610ab6f13"], "model.providence.stg_ynab_subtransaction": ["model.providence.fact_accounting_transaction", "test.providence.not_null_stg_ynab_subtransaction_amount.c934e50708", "test.providence.not_null_stg_ynab_subtransaction_id.b580471f04", "test.providence.not_null_stg_ynab_subtransaction_is_deleted.d73738e2b3", "test.providence.not_null_stg_ynab_subtransaction_scraped_on.c78c26f3c0", "test.providence.not_null_stg_ynab_subtransaction_super_id.3e85af220b", "test.providence.relationships_stg_ynab_subtransaction_payee_id__id__ref_stg_ynab_payee_.e11d61d39e", "test.providence.relationships_stg_ynab_subtransaction_super_id__id__ref_stg_ynab_transaction_.73b591fb02", "test.providence.relationships_stg_ynab_subtransaction_transfer_account_id__id__ref_stg_ynab_account_.bb3848f847"], "model.providence.stg_ynab_transaction": ["model.providence.int_unique_transaction", "test.providence.accepted_values_stg_ynab_transaction_clearing_status__cleared__uncleared__reconciled.2076da252a", "test.providence.not_null_stg_ynab_transaction_account_id.23442828ee", "test.providence.not_null_stg_ynab_transaction_amount.2a25bb15f2", "test.providence.not_null_stg_ynab_transaction_budget_id.d943d0eb3d", "test.providence.not_null_stg_ynab_transaction_clearing_status.e60e57e998", "test.providence.not_null_stg_ynab_transaction_date.dd6a72adb5", "test.providence.not_null_stg_ynab_transaction_id.d13932320d", "test.providence.not_null_stg_ynab_transaction_is_approved.d8314cbd36", "test.providence.not_null_stg_ynab_transaction_is_deleted.bd2a11bbfa", "test.providence.not_null_stg_ynab_transaction_scraped_on.8275f75f0f", "test.providence.relationships_fact_accounting_transaction_super_id__id__ref_stg_ynab_transaction_.80e6b77b9c", "test.providence.relationships_stg_ynab_subtransaction_super_id__id__ref_stg_ynab_transaction_.73b591fb02", "test.providence.relationships_stg_ynab_transaction_account_id__id__ref_stg_ynab_account_.eac4609a6d", "test.providence.relationships_stg_ynab_transaction_budget_id__id__ref_stg_ynab_budget_.d38d14188a", "test.providence.relationships_stg_ynab_transaction_payee_id__id__ref_stg_ynab_payee_.78bd80cdf2", "test.providence.relationships_stg_ynab_transaction_transfer_account_id__id__ref_stg_ynab_account_.c8d0e0c625"], "model.providence.stg_ynab_payee": ["model.providence.dim_payee", "model.providence.dim_payee", "test.providence.not_null_stg_ynab_payee_id.e1b6fba8da", "test.providence.not_null_stg_ynab_payee_name.9eb4d84453", "test.providence.not_null_stg_ynab_payee_scraped_on.ba40d87921", "test.providence.relationships_int_unique_transaction_payee_id__id__ref_stg_ynab_payee_.632982383f", "test.providence.relationships_mart_ynab_sink_payee_id__id__ref_stg_ynab_payee_.84cf2f46ae", "test.providence.relationships_mart_ynab_sink_split_payee_id__id__ref_stg_ynab_payee_.badb4d2855", "test.providence.relationships_stg_ynab_account_payee_id__id__ref_stg_ynab_payee_.ea7b377d50", "test.providence.relationships_stg_ynab_payee_transfer_account_id__id__ref_stg_ynab_account_.c236b848e6", "test.providence.relationships_stg_ynab_subtransaction_payee_id__id__ref_stg_ynab_payee_.e11d61d39e", "test.providence.relationships_stg_ynab_transaction_payee_id__id__ref_stg_ynab_payee_.78bd80cdf2", "test.providence.relationships_ynab_payee_flag_payee_id__id__ref_stg_ynab_payee_.29b3512f64"], "model.providence.stg_ynab_budget": ["model.providence.dim_budget", "model.providence.dim_budget", "test.providence.not_null_stg_ynab_budget_currency_code.5274f2c06f", "test.providence.not_null_stg_ynab_budget_currency_symbol.ad3b25fbf9", "test.providence.not_null_stg_ynab_budget_id.19ad775a50", "test.providence.not_null_stg_ynab_budget_modified_at.93673c612a", "test.providence.not_null_stg_ynab_budget_name.b0cf7f0e50", "test.providence.not_null_stg_ynab_budget_scraped_on.8cd2839ae1", "test.providence.relationships_int_unique_budget_category_budget_id__id__ref_stg_ynab_budget_.908b88912b", "test.providence.relationships_int_unique_transaction_budget_id__id__ref_stg_ynab_budget_.959d640562", "test.providence.relationships_stg_ynab_transaction_budget_id__id__ref_stg_ynab_budget_.d38d14188a"], "model.providence.stg_ynab_account": ["model.providence.dim_account", "model.providence.dim_account", "test.providence.accepted_values_stg_ynab_account_type__checking__savings__cash__creditCard__lineOfCredit__otherAsset__otherLiability__mortgage__autoLoan__studentLoan__personalLoan__medicalDebt__otherDebt.c6021c65b1", "test.providence.not_null_stg_ynab_account_id.d72a2d3016", "test.providence.not_null_stg_ynab_account_is_closed.1a37a6ca85", "test.providence.not_null_stg_ynab_account_is_deleted.790da8023f", "test.providence.not_null_stg_ynab_account_name.c20bd5cb7a", "test.providence.not_null_stg_ynab_account_on_budget.3e48a5817a", "test.providence.not_null_stg_ynab_account_payee_id.d616757f19", "test.providence.not_null_stg_ynab_account_scraped_on.60f3690164", "test.providence.not_null_stg_ynab_account_type.f5a8ae798e", "test.providence.relationships_int_unique_transaction_account_id__id__ref_stg_ynab_account_.b8c211589f", "test.providence.relationships_int_unique_transaction_transfer_account_id__id__ref_stg_ynab_account_.1b44f14cac", "test.providence.relationships_mart_ynab_sink_account_id__id__ref_stg_ynab_account_.e853f9c233", "test.providence.relationships_stg_map_budget_account_budget_account_id__id__ref_stg_ynab_account_.aacc590115", "test.providence.relationships_stg_ynab_account_payee_id__id__ref_stg_ynab_payee_.ea7b377d50", "test.providence.relationships_stg_ynab_payee_transfer_account_id__id__ref_stg_ynab_account_.c236b848e6", "test.providence.relationships_stg_ynab_subtransaction_transfer_account_id__id__ref_stg_ynab_account_.bb3848f847", "test.providence.relationships_stg_ynab_transaction_account_id__id__ref_stg_ynab_account_.eac4609a6d", "test.providence.relationships_stg_ynab_transaction_transfer_account_id__id__ref_stg_ynab_account_.c8d0e0c625"], "model.providence.stg_ynab_budget_category": ["model.providence.int_unique_budget_category", "model.providence.int_unique_budget_category", "test.providence.accepted_values_stg_ynab_budget_category_goal_type__Target_Category_Balance__Target_Category_Balance_by_Date__Monthly_Funding__Plan_Your_Spending.6267ac3ad8", "test.providence.dbt_utils_expression_is_true_stg_ynab_budget_category__goal_type_is_null_and_goal_amount_0_or_not_goal_type_is_null_and_goal_amount_0_.54da2491b8", "test.providence.not_null_stg_ynab_budget_category_budget_amount.12e66c985c", "test.providence.not_null_stg_ynab_budget_category_budget_id.890de93caf", "test.providence.not_null_stg_ynab_budget_category_budget_month.8aa7e53510", "test.providence.not_null_stg_ynab_budget_category_category_group_id.3c4a91eef7", "test.providence.not_null_stg_ynab_budget_category_id.2295c7fd05", "test.providence.not_null_stg_ynab_budget_category_is_deleted.acf5b15580", "test.providence.not_null_stg_ynab_budget_category_name.5bb259202d", "test.providence.not_null_stg_ynab_budget_category_scraped_on.dcd1fccefe", "test.providence.relationships_mart_ynab_sink_category_id__id__ref_stg_ynab_budget_category_.1a96b31a48"], "model.providence.stg_map_budget_account": ["model.providence.dim_account", "test.providence.not_null_stg_map_budget_account_budget_account_id.27423bc86d", "test.providence.not_null_stg_map_budget_account_id.ea6ac451bf", "test.providence.not_null_stg_map_budget_account_vendor.29789eda48", "test.providence.not_null_stg_map_budget_account_vendor_id.c24b2e8ed6", "test.providence.relationships_stg_map_budget_account_budget_account_id__id__ref_stg_ynab_account_.aacc590115", "test.providence.unique_stg_map_budget_account_id.0ccaae2aa8"], "model.providence.stg_map_bank_card": ["model.providence.fact_public_transport_trip_leg", "test.providence.not_null_stg_map_bank_card_bank_card_id.b649121a27", "test.providence.not_null_stg_map_bank_card_id.09471a98aa", "test.providence.not_null_stg_map_bank_card_vendor.1ba813a4d1", "test.providence.not_null_stg_map_bank_card_vendor_id.3a45da337d", "test.providence.unique_stg_map_bank_card_id.75ca08ea40"], "model.providence.mart_finance_dashboard": ["model.providence.mart_finance_dashboard_cash_flow", "model.providence.mart_finance_dashboard_cash_flow", "model.providence.mart_finance_dashboard_cash_flow", "model.providence.mart_finance_dashboard_cash_flow", "model.providence.mart_finance_dashboard_cash_flow", "test.providence.accepted_values_mart_finance_dashboard_transaction_clearing_status__cleared__uncleared__reconciled.4eeccfbd75", "test.providence.dbt_utils_accepted_range_mart_finance_dashboard_income__0.c3a8aaeda4", "test.providence.dbt_utils_accepted_range_mart_finance_dashboard_spending__0.c6cd9ffb6a", "test.providence.not_null_mart_finance_dashboard_account_is_cash.0a7cd4cd8f", "test.providence.not_null_mart_finance_dashboard_budget_category.e4ec9c87e4", "test.providence.not_null_mart_finance_dashboard_budget_category_group.71e2c2c6f9", "test.providence.not_null_mart_finance_dashboard_budget_is_expense.7aed88128f", "test.providence.not_null_mart_finance_dashboard_cash_amount.2a3706a614", "test.providence.not_null_mart_finance_dashboard_income.b8db769c61", "test.providence.not_null_mart_finance_dashboard_is_passive.a5e0366134", "test.providence.not_null_mart_finance_dashboard_is_unaccounted.3357c4ad5d", "test.providence.not_null_mart_finance_dashboard_payee_name.4cd9b29c1e", "test.providence.not_null_mart_finance_dashboard_spending.d7b65d1f2a", "test.providence.not_null_mart_finance_dashboard_transaction_amount.09eb653cfe", "test.providence.not_null_mart_finance_dashboard_transaction_clearing_status.33f9be88e4", "test.providence.not_null_mart_finance_dashboard_transaction_date.4519375766", "test.providence.not_null_mart_finance_dashboard_transaction_is_transfer.390481d8b9", "test.providence.not_null_mart_finance_dashboard_year_month.47e90c339f", "test.providence.not_null_mart_finance_dashboard_year_month_week.c9ecab3de7"], "model.providence.mart_finance_dashboard_cash_flow": ["test.providence.dbt_utils_accepted_range_mart_finance_dashboard_cash_flow_amount__False__0.aa4c477046", "test.providence.not_null_mart_finance_dashboard_cash_flow_amount.fa4c32a1eb", "test.providence.not_null_mart_finance_dashboard_cash_flow_dest.fc8696faaf", "test.providence.not_null_mart_finance_dashboard_cash_flow_src.06ff43a6ef", "test.providence.not_null_mart_finance_dashboard_cash_flow_year_month.ea793bcf3a"], "model.providence.mart_finance_dashboard_uncleared": ["test.providence.not_null_mart_finance_dashboard_uncleared_in_accounting.fec8bb6204", "test.providence.not_null_mart_finance_dashboard_uncleared_in_vendor.74fbe73720", "test.providence.not_null_mart_finance_dashboard_uncleared_transaction_amount.1b84e894dc", "test.providence.not_null_mart_finance_dashboard_uncleared_transaction_date.efabc12149"], "model.providence.mart_ynab_sink": ["test.providence.accepted_values_mart_ynab_sink_approved__True__False.3528c7cffd", "test.providence.accepted_values_mart_ynab_sink_cleared__cleared__uncleared__reconciled.3f6aab68ab", "test.providence.dbt_utils_expression_is_true_mart_ynab_sink_length_import_id_36.38cb3a771e", "test.providence.not_null_mart_ynab_sink_account_id.2b2c80b8ea", "test.providence.not_null_mart_ynab_sink_amount.75f39d0a0d", "test.providence.not_null_mart_ynab_sink_approved.b0f3417c9c", "test.providence.not_null_mart_ynab_sink_category_id.53e2258bb5", "test.providence.not_null_mart_ynab_sink_cleared.92a7e7959b", "test.providence.not_null_mart_ynab_sink_import_id.6d078e189e", "test.providence.not_null_mart_ynab_sink_payee_id.026a9c67e0", "test.providence.relationships_mart_ynab_sink_account_id__id__ref_stg_ynab_account_.e853f9c233", "test.providence.relationships_mart_ynab_sink_category_id__id__ref_stg_ynab_budget_category_.1a96b31a48", "test.providence.relationships_mart_ynab_sink_payee_id__id__ref_stg_ynab_payee_.84cf2f46ae", "test.providence.relationships_mart_ynab_sink_split_payee_id__id__ref_stg_ynab_payee_.badb4d2855", "test.providence.unique_mart_ynab_sink_import_id.65f58d2771"], "test.providence.assert_sum_bank_transaction_amount_eq_account_balance": [], "seed.providence.ynab_payee_flag": ["model.providence.dim_payee", "test.providence.not_null_ynab_payee_flag_is_passive.1faee07e8d", "test.providence.not_null_ynab_payee_flag_is_unaccounted.56254e5476", "test.providence.not_null_ynab_payee_flag_payee_id.f87d99fc97", "test.providence.relationships_ynab_payee_flag_payee_id__id__ref_stg_ynab_payee_.29b3512f64"], "test.providence.unique_int_unique_budget_category_id.6c900d0e93": [], "test.providence.not_null_int_unique_budget_category_id.30b665b0b2": [], "test.providence.not_null_int_unique_budget_category_budget_id.b98915ceea": [], "test.providence.relationships_int_unique_budget_category_budget_id__id__ref_stg_ynab_budget_.908b88912b": [], "test.providence.not_null_int_unique_budget_category_category_id.9ac0e3c686": [], "test.providence.not_null_int_unique_budget_category_name.782a7b0adc": [], "test.providence.not_null_int_unique_budget_category_category_group_id.d241f6f8ec": [], "test.providence.not_null_int_unique_budget_category_is_deleted.5762ff5711": [], "test.providence.not_null_int_unique_budget_category_budget_amount.e7ca554d6e": [], "test.providence.not_null_int_unique_budget_category_budget_month.2a97219788": [], "test.providence.accepted_values_int_unique_budget_category_goal_type__Target_Category_Balance__Target_Category_Balance_by_Date__Monthly_Funding__Plan_Your_Spending.45e0ec7ee8": [], "test.providence.not_null_int_unique_budget_category_updated_at.3f6f47730e": [], "test.providence.unique_int_unique_enriched_bank_statement_id.0b266c74fa": [], "test.providence.not_null_int_unique_enriched_bank_statement_id.857bc95776": [], "test.providence.not_null_int_unique_enriched_bank_statement_transacted_on.6858c5f780": [], "test.providence.not_null_int_unique_enriched_bank_statement_description.2b182c3f17": [], "test.providence.not_null_int_unique_enriched_bank_statement_account_no.f52fb903a9": [], "test.providence.not_null_int_unique_enriched_bank_statement_account_id.0b1f57b3e2": [], "test.providence.relationships_int_unique_enriched_bank_statement_account_id__id__ref_dim_account_.192e503d3c": [], "test.providence.not_null_int_unique_enriched_bank_statement_name.52c8ba8d17": [], "test.providence.not_null_int_unique_enriched_bank_statement_deposit.70eb54a69c": [], "test.providence.dbt_utils_accepted_range_int_unique_enriched_bank_statement_deposit__0_0.ca148b59ce": [], "test.providence.not_null_int_unique_enriched_bank_statement_withdrawal.0a1bf24b4a": [], "test.providence.dbt_utils_accepted_range_int_unique_enriched_bank_statement_withdrawal__0_0.0958cf5ba4": [], "test.providence.not_null_int_unique_enriched_bank_statement_balance.36858c8aa9": [], "test.providence.not_null_int_unique_enriched_bank_statement_currency_code.282a32233c": [], "test.providence.not_null_int_unique_enriched_bank_statement_statement_begin.7709bb26cc": [], "test.providence.not_null_int_unique_enriched_bank_statement_statement_end.ace15564ad": [], "test.providence.not_null_int_unique_enriched_bank_statement_processed_on.6e6a0ea6ac": [], "test.providence.dbt_utils_expression_is_true_int_unique_enriched_bank_statement_statement_begin_statement_end.e45e89334b": [], "test.providence.dbt_utils_expression_is_true_int_unique_enriched_bank_statement_statement_end_processed_on.ba42e179c9": [], "test.providence.not_null_int_unique_transaction_id.3961df60ec": [], "test.providence.unique_int_unique_transaction_id.8055ebb23a": [], "test.providence.not_null_int_unique_transaction_amount.fa0cc48955": [], "test.providence.not_null_int_unique_transaction_clearing_status.60bf364a93": [], "test.providence.accepted_values_int_unique_transaction_clearing_status__cleared__uncleared__reconciled.dfe24d24da": [], "test.providence.not_null_int_unique_transaction_is_approved.15482bf359": [], "test.providence.not_null_int_unique_transaction_is_deleted.5e8e178bd0": [], "test.providence.accepted_values_int_unique_transaction_is_deleted__False.789e301767": [], "test.providence.not_null_int_unique_transaction_budget_id.d1f3858f87": [], "test.providence.relationships_int_unique_transaction_budget_id__id__ref_stg_ynab_budget_.959d640562": [], "test.providence.not_null_int_unique_transaction_account_id.ed556e32fe": [], "test.providence.relationships_int_unique_transaction_account_id__id__ref_stg_ynab_account_.b8c211589f": [], "test.providence.relationships_int_unique_transaction_payee_id__id__ref_stg_ynab_payee_.632982383f": [], "test.providence.relationships_int_unique_transaction_transfer_account_id__id__ref_stg_ynab_account_.1b44f14cac": [], "test.providence.not_null_int_unique_transaction_date.821ad44e28": [], "test.providence.not_null_int_unique_transaction_scraped_on.bb329b36ca": [], "test.providence.unique_dim_date_id.54c6b7737b": [], "test.providence.not_null_dim_date_id.49e434ad59": [], "test.providence.not_null_dim_date_date.78f11e7735": [], "test.providence.not_null_dim_date_day_of_month.8ae109937d": [], "test.providence.dbt_utils_accepted_range_dim_date_day_of_month__31__1.15b4b189b7": [], "test.providence.not_null_dim_date_day_of_week.45321d6610": [], "test.providence.dbt_utils_accepted_range_dim_date_day_of_week__6__0.bfe7eaced3": [], "test.providence.not_null_dim_date_weekday_name.33b8ebe86e": [], "test.providence.not_null_dim_date_month_of_year.951ad9a5b5": [], "test.providence.dbt_utils_accepted_range_dim_date_month_of_year__12__1.e6a5877b18": [], "test.providence.not_null_dim_date_month_name.f33095fb66": [], "test.providence.not_null_dim_date_month_short.0235b40229": [], "test.providence.not_null_dim_date_year.aac8e263ab": [], "test.providence.not_null_dim_date_is_weekend.cf6d8ca02c": [], "test.providence.not_null_dim_date_updated_at.edca938145": [], "test.providence.dbt_utils_expression_is_true_dim_date_len_month_short_3.860ad91e49": [], "test.providence.dbt_utils_expression_is_true_dim_date_len_weekday_short_3.54c7bc245e": [], "test.providence.not_null_dim_bank_card_id.37ec70b874": [], "test.providence.unique_dim_bank_card_id.030c894cd7": [], "test.providence.not_null_dim_bank_card_name.f3104c4b11": [], "test.providence.not_null_dim_bank_card_updated_at.a46061ae1d": [], "test.providence.not_null_fact_public_transport_trip_leg_id.11e3c6b565": [], "test.providence.unique_fact_public_transport_trip_leg_id.7753bf7410": [], "test.providence.not_null_fact_public_transport_trip_leg_traveled_on.20509891d1": [], "test.providence.not_null_fact_public_transport_trip_leg_travel_date_id.5aeebaf59d": [], "test.providence.relationships_fact_public_transport_trip_leg_travel_date_id__id__ref_dim_date_.c0364ad857": [], "test.providence.not_null_fact_public_transport_trip_leg_cost_sgd.fb7f50e486": [], "test.providence.dbt_utils_accepted_range_fact_public_transport_trip_leg_cost_sgd__0.b499fccafb": [], "test.providence.not_null_fact_public_transport_trip_leg_source.e3b36ba6ac": [], "test.providence.not_null_fact_public_transport_trip_leg_destination.f0b3c0c527": [], "test.providence.not_null_fact_public_transport_trip_leg_transport_mode.61559e0639": [], "test.providence.accepted_values_fact_public_transport_trip_leg_transport_mode__Rail__Bus.d071843ebd": [], "test.providence.not_null_fact_public_transport_trip_leg_bank_card_id.a699f6f8fe": [], "test.providence.relationships_fact_public_transport_trip_leg_bank_card_id__id__ref_dim_bank_card_.e54f7eda8c": [], "test.providence.not_null_fact_public_transport_trip_leg_account_id.c516df574d": [], "test.providence.relationships_fact_public_transport_trip_leg_account_id__id__ref_dim_account_.45face645f": [], "test.providence.not_null_fact_public_transport_trip_leg_is_billed.e7b02e4221": [], "test.providence.not_null_fact_public_transport_trip_leg_updated_at.266160af5a": [], "test.providence.unique_dim_budget_id.3db1895c25": [], "test.providence.not_null_dim_budget_id.eabdd80ba9": [], "test.providence.not_null_dim_budget_name.9d76c5e6d9": [], "test.providence.not_null_dim_budget_modified_at.32d713448e": [], "test.providence.not_null_dim_budget_currency_code.05cec94be1": [], "test.providence.not_null_dim_budget_currency_symbol.392bbc29a4": [], "test.providence.not_null_dim_budget_updated_at.6ff71eb898": [], "test.providence.dbt_utils_expression_is_true_dim_budget_len_currency_code_3.227efc4fe7": [], "test.providence.not_null_dim_budget_category_id.77da7ecc72": [], "test.providence.unique_dim_budget_category_id.efbc2bbaa5": [], "test.providence.not_null_dim_budget_category_category_id.1064e4c951": [], "test.providence.not_null_dim_budget_category_name.02f719e72b": [], "test.providence.not_null_dim_budget_category_budget_id.1b25eed24d": [], "test.providence.relationships_dim_budget_category_budget_id__id__ref_dim_budget_.e8d44a263b": [], "test.providence.relationships_dim_budget_category_category_group_id__id__ref_stg_ynab_budget_category_group_.4610ab6f13": [], "test.providence.accepted_values_dim_budget_category_goal_type__Target_Category_Balance__Target_Category_Balance_by_Date__Monthly_Funding__Plan_Your_Spending.f4e6afe66e": [], "test.providence.not_null_dim_budget_category_is_deleted.f8f14e0267": [], "test.providence.not_null_dim_budget_category_is_expense.6dbe0ce48b": [], "test.providence.not_null_dim_budget_category_updated_at.0346f86c7a": [], "test.providence.not_null_dim_budget_category_effective_at.8d5d59207f": [], "test.providence.not_null_dim_budget_category_expired_at.c9ef0053bb": [], "test.providence.not_null_dim_budget_category_is_current.91170880f8": [], "test.providence.dbt_utils_expression_is_true_dim_budget_category_effective_at_expired_at.d66027b17f": [], "test.providence.dbt_utils_expression_is_true_dim_budget_category_not_goal_type_is_null_and_goal_amount_0_or_goal_type_is_null_and_goal_amount_0_.4a71e79beb": [], "test.providence.not_null_fact_monthly_budget_id.10882a8339": [], "test.providence.unique_fact_monthly_budget_id.9411ccab94": [], "test.providence.not_null_fact_monthly_budget_month_date_id.15a822a005": [], "test.providence.relationships_fact_monthly_budget_month_date_id__id__ref_dim_date_.8ccdca7d0c": [], "test.providence.not_null_fact_monthly_budget_budget_id.da8421df1a": [], "test.providence.relationships_fact_monthly_budget_budget_id__id__ref_dim_budget_.0d161cb61b": [], "test.providence.not_null_fact_monthly_budget_category_id.8a82ce7473": [], "test.providence.relationships_fact_monthly_budget_category_id__id__ref_dim_budget_category_.621c0ef023": [], "test.providence.not_null_fact_monthly_budget_amount.ea62317861": [], "test.providence.not_null_fact_monthly_budget_updated_at.019c96409d": [], "test.providence.unique_dim_payee_id.1b302dbda3": [], "test.providence.not_null_dim_payee_id.5bb6244959": [], "test.providence.not_null_dim_payee_name.0471202f5e": [], "test.providence.relationships_dim_payee_transfer_account_id__id__ref_dim_account_.e25f5dbae6": [], "test.providence.not_null_dim_payee_updated_at.f6242bcd60": [], "test.providence.not_null_dim_payee_is_unaccounted.6d3f15be34": [], "test.providence.not_null_dim_payee_is_passive.6c619654a1": [], "test.providence.not_null_dim_account_id.c525515029": [], "test.providence.unique_dim_account_id.03098a72cc": [], "test.providence.not_null_dim_account_name.69795079a1": [], "test.providence.not_null_dim_account_is_closed.4aefd67aa2": [], "test.providence.not_null_dim_account_is_deleted.249d707245": [], "test.providence.not_null_dim_account_is_cash.ac783ea59a": [], "test.providence.not_null_dim_account_budget_type.73ae332c56": [], "test.providence.accepted_values_dim_account_budget_type__checking__savings__cash__creditCard__lineOfCredit__otherAsset__otherLiability__mortgage__autoLoan__studentLoan__personalLoan__medicalDebt__otherDebt.6e20bce7f1": [], "test.providence.not_null_dim_account_updated_at.525779dd6b": [], "test.providence.dbt_utils_expression_is_true_dim_account__vendor_id_is_null_and_vendor_type_is_null_and_vendor_id_is_null_or_not_vendor_id_is_null_and_vendor_type_is_null_and_vendor_id_is_null_.0b5ef6ac94": [], "test.providence.not_null_fact_accounting_transaction_id.3dbfbe0498": [], "test.providence.unique_fact_accounting_transaction_id.abe672c4c0": [], "test.providence.relationships_fact_accounting_transaction_super_id__id__ref_stg_ynab_transaction_.80e6b77b9c": [], "test.providence.not_null_fact_accounting_transaction_amount.f3893c8d61": [], "test.providence.not_null_fact_accounting_transaction_clearing_status.cad5f8ec19": [], "test.providence.accepted_values_fact_accounting_transaction_clearing_status__cleared__uncleared__reconciled.0ee9b01241": [], "test.providence.not_null_fact_accounting_transaction_is_approved.612d410c7d": [], "test.providence.not_null_fact_accounting_transaction_budget_id.f23909fedb": [], "test.providence.relationships_fact_accounting_transaction_budget_id__id__ref_dim_budget_.6fbd836a5a": [], "test.providence.not_null_fact_accounting_transaction_account_id.3f40475ab6": [], "test.providence.relationships_fact_accounting_transaction_account_id__id__ref_dim_account_.ac11c53d5e": [], "test.providence.relationships_fact_accounting_transaction_category_id__id__ref_dim_budget_category_.30e27b814d": [], "test.providence.relationships_fact_accounting_transaction_payee_id__id__ref_dim_payee_.9c6ca5ae6d": [], "test.providence.relationships_fact_accounting_transaction_transfer_account_id__id__ref_dim_account_.18c7cb303c": [], "test.providence.not_null_fact_accounting_transaction_date_id.99234ccbf5": [], "test.providence.relationships_fact_accounting_transaction_date_id__id__ref_dim_date_.187c6e8831": [], "test.providence.not_null_fact_accounting_transaction_updated_at.aa62b60ad2": [], "test.providence.unique_fact_vendor_transaction_id.65aee356e1": [], "test.providence.not_null_fact_vendor_transaction_id.d6eb69ec40": [], "test.providence.not_null_fact_vendor_transaction_description.3362e304ff": [], "test.providence.not_null_fact_vendor_transaction_date_id.0908222b76": [], "test.providence.relationships_fact_vendor_transaction_date_id__id__ref_dim_date_.9733ab2ab4": [], "test.providence.not_null_fact_vendor_transaction_account_id.ea995f0f67": [], "test.providence.relationships_fact_vendor_transaction_account_id__id__ref_dim_account_.9bab398a5f": [], "test.providence.not_null_fact_vendor_transaction_amount.c1ca65fe5a": [], "test.providence.not_null_fact_vendor_transaction_updated_at.264f91d0c8": [], "test.providence.unique_fact_bank_statement_id.397aebff0f": [], "test.providence.not_null_fact_bank_statement_id.2d02dd086a": [], "test.providence.not_null_fact_bank_statement_begin_date_id.9a523d8288": [], "test.providence.relationships_fact_bank_statement_begin_date_id__id__ref_dim_date_.60ddefb0f2": [], "test.providence.not_null_fact_bank_statement_end_date_id.4b8a538677": [], "test.providence.relationships_fact_bank_statement_end_date_id__id__ref_dim_date_.169ccb9dca": [], "test.providence.not_null_fact_bank_statement_account_id.b3a3b1b348": [], "test.providence.relationships_fact_bank_statement_account_id__id__ref_dim_account_.97a7e5c36b": [], "test.providence.not_null_fact_bank_statement_balance.7aedfd2ee7": [], "test.providence.not_null_fact_bank_statement_updated_at.a742b62ac0": [], "test.providence.not_null_stg_uob_statement_transacted_on.a78d4cf63d": [], "test.providence.not_null_stg_uob_statement_description.f3790cced4": [], "test.providence.not_null_stg_uob_statement_account_no.9685b8d186": [], "test.providence.not_null_stg_uob_statement_name.f5d0e412c5": [], "test.providence.not_null_stg_uob_statement_deposit.2b4b0881bc": [], "test.providence.dbt_utils_accepted_range_stg_uob_statement_deposit__0_0.170b30f425": [], "test.providence.not_null_stg_uob_statement_withdrawal.c8f860e586": [], "test.providence.dbt_utils_accepted_range_stg_uob_statement_withdrawal__0_0.f91fe316bd": [], "test.providence.not_null_stg_uob_statement_balance.82c010a26e": [], "test.providence.not_null_stg_uob_statement_currency_code.c08da85da5": [], "test.providence.not_null_stg_uob_statement_statement_begin.81f0d2c02d": [], "test.providence.not_null_stg_uob_statement_statement_end.e47cd50840": [], "test.providence.not_null_stg_uob_statement_processed_on.3e0942bd9a": [], "test.providence.dbt_utils_expression_is_true_stg_uob_statement_statement_begin_statement_end.50f9a436ec": [], "test.providence.dbt_utils_expression_is_true_stg_uob_statement_statement_end_processed_on.3e8211e730": [], "test.providence.not_null_stg_simplygo_card_id.86b8c84d20": [], "test.providence.not_null_stg_simplygo_card_name.e0e9dd015c": [], "test.providence.not_null_stg_simplygo_card_scraped_on.f93674f0a8": [], "test.providence.not_null_stg_simplygo_trip_leg_traveled_on.87229fc8d2": [], "test.providence.not_null_stg_simplygo_trip_leg_begin_at.291c82b7fb": [], "test.providence.not_null_stg_simplygo_trip_leg_cost_sgd.0aecf580a3": [], "test.providence.dbt_utils_accepted_range_stg_simplygo_trip_leg_cost_sgd__0.c74a0dfd16": [], "test.providence.not_null_stg_simplygo_trip_leg_source.0e49a4cb22": [], "test.providence.not_null_stg_simplygo_trip_leg_destination.9c3cffae03": [], "test.providence.not_null_stg_simplygo_trip_leg_transport_mode.e8cf1b7757": [], "test.providence.accepted_values_stg_simplygo_trip_leg_transport_mode__Rail__Bus.8e309c76c6": [], "test.providence.not_null_stg_simplygo_trip_leg_card_id.e07401f8e4": [], "test.providence.relationships_stg_simplygo_trip_leg_card_id__id__ref_stg_simplygo_card_.b8ba3fa366": [], "test.providence.not_null_stg_simplygo_trip_leg_scraped_on.876fe1a10c": [], "test.providence.not_null_stg_ynab_budget_id.19ad775a50": [], "test.providence.not_null_stg_ynab_budget_name.b0cf7f0e50": [], "test.providence.not_null_stg_ynab_budget_modified_at.93673c612a": [], "test.providence.not_null_stg_ynab_budget_currency_code.5274f2c06f": [], "test.providence.not_null_stg_ynab_budget_currency_symbol.ad3b25fbf9": [], "test.providence.not_null_stg_ynab_budget_scraped_on.8cd2839ae1": [], "test.providence.not_null_stg_ynab_budget_category_id.2295c7fd05": [], "test.providence.not_null_stg_ynab_budget_category_name.5bb259202d": [], "test.providence.not_null_stg_ynab_budget_category_budget_id.890de93caf": [], "test.providence.not_null_stg_ynab_budget_category_category_group_id.3c4a91eef7": [], "test.providence.not_null_stg_ynab_budget_category_budget_amount.12e66c985c": [], "test.providence.not_null_stg_ynab_budget_category_budget_month.8aa7e53510": [], "test.providence.accepted_values_stg_ynab_budget_category_goal_type__Target_Category_Balance__Target_Category_Balance_by_Date__Monthly_Funding__Plan_Your_Spending.6267ac3ad8": [], "test.providence.not_null_stg_ynab_budget_category_is_deleted.acf5b15580": [], "test.providence.not_null_stg_ynab_budget_category_scraped_on.dcd1fccefe": [], "test.providence.dbt_utils_expression_is_true_stg_ynab_budget_category__goal_type_is_null_and_goal_amount_0_or_not_goal_type_is_null_and_goal_amount_0_.54da2491b8": [], "test.providence.not_null_stg_ynab_budget_category_group_id.6df0e0d0a3": [], "test.providence.not_null_stg_ynab_budget_category_group_name.12d7756d7e": [], "test.providence.not_null_stg_ynab_budget_category_group_is_deleted.2f5e288fd9": [], "test.providence.not_null_stg_ynab_budget_category_group_scraped_on.e523bbdd8d": [], "test.providence.not_null_stg_ynab_account_id.d72a2d3016": [], "test.providence.not_null_stg_ynab_account_name.c20bd5cb7a": [], "test.providence.not_null_stg_ynab_account_type.f5a8ae798e": [], "test.providence.accepted_values_stg_ynab_account_type__checking__savings__cash__creditCard__lineOfCredit__otherAsset__otherLiability__mortgage__autoLoan__studentLoan__personalLoan__medicalDebt__otherDebt.c6021c65b1": [], "test.providence.not_null_stg_ynab_account_on_budget.3e48a5817a": [], "test.providence.not_null_stg_ynab_account_is_closed.1a37a6ca85": [], "test.providence.not_null_stg_ynab_account_is_deleted.790da8023f": [], "test.providence.not_null_stg_ynab_account_payee_id.d616757f19": [], "test.providence.relationships_stg_ynab_account_payee_id__id__ref_stg_ynab_payee_.ea7b377d50": [], "test.providence.not_null_stg_ynab_account_scraped_on.60f3690164": [], "test.providence.not_null_stg_ynab_payee_id.e1b6fba8da": [], "test.providence.not_null_stg_ynab_payee_name.9eb4d84453": [], "test.providence.relationships_stg_ynab_payee_transfer_account_id__id__ref_stg_ynab_account_.c236b848e6": [], "test.providence.not_null_stg_ynab_payee_scraped_on.ba40d87921": [], "test.providence.not_null_stg_ynab_transaction_id.d13932320d": [], "test.providence.not_null_stg_ynab_transaction_amount.2a25bb15f2": [], "test.providence.not_null_stg_ynab_transaction_clearing_status.e60e57e998": [], "test.providence.accepted_values_stg_ynab_transaction_clearing_status__cleared__uncleared__reconciled.2076da252a": [], "test.providence.not_null_stg_ynab_transaction_is_approved.d8314cbd36": [], "test.providence.not_null_stg_ynab_transaction_is_deleted.bd2a11bbfa": [], "test.providence.not_null_stg_ynab_transaction_budget_id.d943d0eb3d": [], "test.providence.relationships_stg_ynab_transaction_budget_id__id__ref_stg_ynab_budget_.d38d14188a": [], "test.providence.not_null_stg_ynab_transaction_account_id.23442828ee": [], "test.providence.relationships_stg_ynab_transaction_account_id__id__ref_stg_ynab_account_.eac4609a6d": [], "test.providence.relationships_stg_ynab_transaction_payee_id__id__ref_stg_ynab_payee_.78bd80cdf2": [], "test.providence.relationships_stg_ynab_transaction_transfer_account_id__id__ref_stg_ynab_account_.c8d0e0c625": [], "test.providence.not_null_stg_ynab_transaction_date.dd6a72adb5": [], "test.providence.not_null_stg_ynab_transaction_scraped_on.8275f75f0f": [], "test.providence.not_null_stg_ynab_subtransaction_id.b580471f04": [], "test.providence.not_null_stg_ynab_subtransaction_super_id.3e85af220b": [], "test.providence.relationships_stg_ynab_subtransaction_super_id__id__ref_stg_ynab_transaction_.73b591fb02": [], "test.providence.relationships_stg_ynab_subtransaction_payee_id__id__ref_stg_ynab_payee_.e11d61d39e": [], "test.providence.relationships_stg_ynab_subtransaction_transfer_account_id__id__ref_stg_ynab_account_.bb3848f847": [], "test.providence.not_null_stg_ynab_subtransaction_is_deleted.d73738e2b3": [], "test.providence.not_null_stg_ynab_subtransaction_amount.c934e50708": [], "test.providence.not_null_stg_ynab_subtransaction_scraped_on.c78c26f3c0": [], "test.providence.unique_stg_map_budget_account_id.0ccaae2aa8": [], "test.providence.not_null_stg_map_budget_account_id.ea6ac451bf": [], "test.providence.not_null_stg_map_budget_account_budget_account_id.27423bc86d": [], "test.providence.relationships_stg_map_budget_account_budget_account_id__id__ref_stg_ynab_account_.aacc590115": [], "test.providence.not_null_stg_map_budget_account_vendor.29789eda48": [], "test.providence.not_null_stg_map_budget_account_vendor_id.c24b2e8ed6": [], "test.providence.unique_stg_map_bank_card_id.75ca08ea40": [], "test.providence.not_null_stg_map_bank_card_id.09471a98aa": [], "test.providence.not_null_stg_map_bank_card_bank_card_id.b649121a27": [], "test.providence.not_null_stg_map_bank_card_vendor.1ba813a4d1": [], "test.providence.not_null_stg_map_bank_card_vendor_id.3a45da337d": [], "test.providence.not_null_mart_finance_dashboard_year_month.47e90c339f": [], "test.providence.not_null_mart_finance_dashboard_year_month_week.c9ecab3de7": [], "test.providence.not_null_mart_finance_dashboard_transaction_amount.09eb653cfe": [], "test.providence.not_null_mart_finance_dashboard_cash_amount.2a3706a614": [], "test.providence.not_null_mart_finance_dashboard_transaction_date.4519375766": [], "test.providence.not_null_mart_finance_dashboard_transaction_is_transfer.390481d8b9": [], "test.providence.not_null_mart_finance_dashboard_transaction_clearing_status.33f9be88e4": [], "test.providence.accepted_values_mart_finance_dashboard_transaction_clearing_status__cleared__uncleared__reconciled.4eeccfbd75": [], "test.providence.not_null_mart_finance_dashboard_account_is_cash.0a7cd4cd8f": [], "test.providence.not_null_mart_finance_dashboard_budget_category_group.71e2c2c6f9": [], "test.providence.not_null_mart_finance_dashboard_budget_category.e4ec9c87e4": [], "test.providence.not_null_mart_finance_dashboard_budget_is_expense.7aed88128f": [], "test.providence.not_null_mart_finance_dashboard_payee_name.4cd9b29c1e": [], "test.providence.not_null_mart_finance_dashboard_spending.d7b65d1f2a": [], "test.providence.dbt_utils_accepted_range_mart_finance_dashboard_spending__0.c6cd9ffb6a": [], "test.providence.not_null_mart_finance_dashboard_is_unaccounted.3357c4ad5d": [], "test.providence.not_null_mart_finance_dashboard_income.b8db769c61": [], "test.providence.dbt_utils_accepted_range_mart_finance_dashboard_income__0.c3a8aaeda4": [], "test.providence.not_null_mart_finance_dashboard_is_passive.a5e0366134": [], "test.providence.not_null_mart_finance_dashboard_cash_flow_year_month.ea793bcf3a": [], "test.providence.not_null_mart_finance_dashboard_cash_flow_src.06ff43a6ef": [], "test.providence.not_null_mart_finance_dashboard_cash_flow_dest.fc8696faaf": [], "test.providence.not_null_mart_finance_dashboard_cash_flow_amount.fa4c32a1eb": [], "test.providence.dbt_utils_accepted_range_mart_finance_dashboard_cash_flow_amount__False__0.aa4c477046": [], "test.providence.not_null_mart_finance_dashboard_uncleared_transaction_date.efabc12149": [], "test.providence.not_null_mart_finance_dashboard_uncleared_transaction_amount.1b84e894dc": [], "test.providence.not_null_mart_finance_dashboard_uncleared_in_accounting.fec8bb6204": [], "test.providence.not_null_mart_finance_dashboard_uncleared_in_vendor.74fbe73720": [], "test.providence.not_null_mart_ynab_sink_import_id.6d078e189e": [], "test.providence.unique_mart_ynab_sink_import_id.65f58d2771": [], "test.providence.not_null_mart_ynab_sink_account_id.2b2c80b8ea": [], "test.providence.relationships_mart_ynab_sink_account_id__id__ref_stg_ynab_account_.e853f9c233": [], "test.providence.not_null_mart_ynab_sink_amount.75f39d0a0d": [], "test.providence.not_null_mart_ynab_sink_payee_id.026a9c67e0": [], "test.providence.relationships_mart_ynab_sink_payee_id__id__ref_stg_ynab_payee_.84cf2f46ae": [], "test.providence.not_null_mart_ynab_sink_category_id.53e2258bb5": [], "test.providence.relationships_mart_ynab_sink_category_id__id__ref_stg_ynab_budget_category_.1a96b31a48": [], "test.providence.not_null_mart_ynab_sink_cleared.92a7e7959b": [], "test.providence.accepted_values_mart_ynab_sink_cleared__cleared__uncleared__reconciled.3f6aab68ab": [], "test.providence.not_null_mart_ynab_sink_approved.b0f3417c9c": [], "test.providence.accepted_values_mart_ynab_sink_approved__True__False.3528c7cffd": [], "test.providence.relationships_mart_ynab_sink_split_payee_id__id__ref_stg_ynab_payee_.badb4d2855": [], "test.providence.dbt_utils_expression_is_true_mart_ynab_sink_length_import_id_36.38cb3a771e": [], "test.providence.not_null_ynab_payee_flag_payee_id.f87d99fc97": [], "test.providence.relationships_ynab_payee_flag_payee_id__id__ref_stg_ynab_payee_.29b3512f64": [], "test.providence.not_null_ynab_payee_flag_is_unaccounted.56254e5476": [], "test.providence.not_null_ynab_payee_flag_is_passive.1faee07e8d": [], "source.providence.uob.source_uob": ["model.providence.stg_uob_statement"], "source.providence.simplygo.source_simplygo": ["model.providence.stg_simplygo_card", "model.providence.stg_simplygo_trip_leg"], "source.providence.ynab.source_ynab": ["model.providence.stg_ynab_account", "model.providence.stg_ynab_budget", "model.providence.stg_ynab_budget_category", "model.providence.stg_ynab_budget_category_group", "model.providence.stg_ynab_payee", "model.providence.stg_ynab_subtransaction", "model.providence.stg_ynab_transaction"], "source.providence.mapping.map_account": ["model.providence.stg_map_budget_account"], "source.providence.mapping.map_bank_card": ["model.providence.stg_map_bank_card"]}}